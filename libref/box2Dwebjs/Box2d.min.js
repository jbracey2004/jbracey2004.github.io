





<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
  <link rel="dns-prefetch" href="https://assets-cdn.github.com">
  <link rel="dns-prefetch" href="https://avatars0.githubusercontent.com">
  <link rel="dns-prefetch" href="https://avatars1.githubusercontent.com">
  <link rel="dns-prefetch" href="https://avatars2.githubusercontent.com">
  <link rel="dns-prefetch" href="https://avatars3.githubusercontent.com">
  <link rel="dns-prefetch" href="https://github-cloud.s3.amazonaws.com">
  <link rel="dns-prefetch" href="https://user-images.githubusercontent.com/">



  <link crossorigin="anonymous" href="https://assets-cdn.github.com/assets/frameworks-a4bf54bef6fb.css" integrity="sha512-pL9Uvvb7LMqGC8jv/AyqZ7Ya6/HTgkhZzKwEsHOdsfaW2pr3fgzqjgKUSJfYkZ/klxwHrcu+tZwtNDTuw8vH6Q==" media="all" rel="stylesheet" />
  <link crossorigin="anonymous" href="https://assets-cdn.github.com/assets/github-d5aa84dde2d5.css" integrity="sha512-1aqE3eLVo8QJ3AfkPFnOFkzBmHnOY5YYQ89j1V4ke28LRSpxHMVQecd6/XxAp5lGLPPSEaFNhLyGKHQHiFXT7w==" media="all" rel="stylesheet" />
  
  
  <link crossorigin="anonymous" href="https://assets-cdn.github.com/assets/site-40fcabbe0152.css" integrity="sha512-QPyrvgFSff4TPraGjRVwjjUuUYhkKKzPUBEwcArwfkdRwAHGF0V7+v1hPmMZbnJKdXTWicSkRiGOTvEiNmCISg==" media="all" rel="stylesheet" />
  

  <meta name="viewport" content="width=device-width">
  
  <title>box2dweb/Box2d.min.js at master · hecht-software/box2dweb · GitHub</title>
    <meta name="description" content="GitHub is where people build software. More than 28 million people use GitHub to discover, fork, and contribute to over 80 million projects.">
  <link rel="search" type="application/opensearchdescription+xml" href="/opensearch.xml" title="GitHub">
  <link rel="fluid-icon" href="https://github.com/fluidicon.png" title="GitHub">
  <meta property="fb:app_id" content="1401488693436528">

    
    <meta content="https://avatars1.githubusercontent.com/u/13943237?s=400&amp;v=4" property="og:image" /><meta content="GitHub" property="og:site_name" /><meta content="object" property="og:type" /><meta content="hecht-software/box2dweb" property="og:title" /><meta content="https://github.com/hecht-software/box2dweb" property="og:url" /><meta content="Automatically exported from code.google.com/p/box2dweb" property="og:description" />

  <link rel="assets" href="https://assets-cdn.github.com/">
  
  <meta name="pjax-timeout" content="1000">
  
  <meta name="request-id" content="C9B3:3A7C:15A684:2B97B6:5AA0339F" data-pjax-transient>
  

  <meta name="selected-link" value="repo_source" data-pjax-transient>

    <meta name="google-site-verification" content="KT5gs8h0wvaagLKAVWq8bbeNwnZZK1r1XQysX3xurLU">
  <meta name="google-site-verification" content="ZzhVyEFwb7w3e0-uOTltm8Jsck2F5StVihD0exw2fsA">
  <meta name="google-site-verification" content="GXs5KoUUkNCoaAZn7wPN-t01Pywp9M3sEjnt_3_ZWPc">
    <meta name="google-analytics" content="UA-3769691-2">

<meta content="collector.githubapp.com" name="octolytics-host" /><meta content="github" name="octolytics-app-id" /><meta content="https://collector.githubapp.com/github-external/browser_event" name="octolytics-event-url" /><meta content="C9B3:3A7C:15A684:2B97B6:5AA0339F" name="octolytics-dimension-request_id" /><meta content="iad" name="octolytics-dimension-region_edge" /><meta content="iad" name="octolytics-dimension-region_render" />
<meta content="https://github.com/hydro_browser_events" name="hydro-events-url" />
<meta content="/&lt;user-name&gt;/&lt;repo-name&gt;/blob/show" data-pjax-transient="true" name="analytics-location" />




  <meta class="js-ga-set" name="dimension1" content="Logged Out">


  

      <meta name="hostname" content="github.com">
    <meta name="user-login" content="">

      <meta name="expected-hostname" content="github.com">
    <meta name="js-proxy-site-detection-payload" content="NGY2MThiZjllZTMxYWM1NWI0NGQyYTEwZmUxMjdhOGFmYjI2ZGNiNDJkNGJjNzFhNDdkNDE0OWJhNGI0NmM4Y3x7InJlbW90ZV9hZGRyZXNzIjoiNjkuNDcuMTMyLjE4MyIsInJlcXVlc3RfaWQiOiJDOUIzOjNBN0M6MTVBNjg0OjJCOTdCNjo1QUEwMzM5RiIsInRpbWVzdGFtcCI6MTUyMDQ0ODQzOSwiaG9zdCI6ImdpdGh1Yi5jb20ifQ==">

    <meta name="enabled-features" content="UNIVERSE_BANNER,FREE_TRIALS,MARKETPLACE_INSIGHTS,MARKETPLACE_INSIGHTS_CONVERSION_PERCENTAGES,JS_ROLLUP">

  <meta name="html-safe-nonce" content="da05c61bbdcba10301d86b752d123f892fba2289">

  <meta http-equiv="x-pjax-version" content="b1b456d232db1330a0192cf2c2248b18">
  

      <link href="https://github.com/hecht-software/box2dweb/commits/master.atom" rel="alternate" title="Recent Commits to box2dweb:master" type="application/atom+xml">

  <meta name="description" content="Automatically exported from code.google.com/p/box2dweb">
  <meta name="go-import" content="github.com/hecht-software/box2dweb git https://github.com/hecht-software/box2dweb.git">

  <meta content="13943237" name="octolytics-dimension-user_id" /><meta content="hecht-software" name="octolytics-dimension-user_login" /><meta content="41297778" name="octolytics-dimension-repository_id" /><meta content="hecht-software/box2dweb" name="octolytics-dimension-repository_nwo" /><meta content="true" name="octolytics-dimension-repository_public" /><meta content="false" name="octolytics-dimension-repository_is_fork" /><meta content="41297778" name="octolytics-dimension-repository_network_root_id" /><meta content="hecht-software/box2dweb" name="octolytics-dimension-repository_network_root_nwo" /><meta content="false" name="octolytics-dimension-repository_explore_github_marketplace_ci_cta_shown" />


    <link rel="canonical" href="https://github.com/hecht-software/box2dweb/blob/master/Box2d.min.js" data-pjax-transient>


  <meta name="browser-stats-url" content="https://api.github.com/_private/browser/stats">

  <meta name="browser-errors-url" content="https://api.github.com/_private/browser/errors">

  <link rel="mask-icon" href="https://assets-cdn.github.com/pinned-octocat.svg" color="#000000">
  <link rel="icon" type="image/x-icon" class="js-site-favicon" href="https://assets-cdn.github.com/favicon.ico">

<meta name="theme-color" content="#1e2327">



<link rel="manifest" href="/manifest.json" crossOrigin="use-credentials">

  </head>

  <body class="logged-out env-production page-blob">
    

  <div class="position-relative js-header-wrapper ">
    <a href="#start-of-content" tabindex="1" class="px-2 py-4 show-on-focus js-skip-to-content">Skip to content</a>
    <div id="js-pjax-loader-bar" class="pjax-loader-bar"><div class="progress"></div></div>

    
    
    



        <header class="Header header-logged-out  position-relative f4 py-3" role="banner">
  <div class="container-lg d-flex px-3">
    <div class="d-flex flex-justify-between flex-items-center">
      <a class="header-logo-invertocat my-0" href="https://github.com/" aria-label="Homepage" data-ga-click="(Logged out) Header, go to homepage, icon:logo-wordmark">
        <svg aria-hidden="true" class="octicon octicon-mark-github" height="32" version="1.1" viewBox="0 0 16 16" width="32"><path fill-rule="evenodd" d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z"/></svg>
      </a>

    </div>

    <div class="HeaderMenu HeaderMenu--bright d-flex flex-justify-between flex-auto">
        <nav class="mt-0">
          <ul class="d-flex list-style-none">
              <li class="ml-2">
                <a href="/features" class="js-selected-navigation-item HeaderNavlink px-0 py-2 m-0" data-ga-click="Header, click, Nav menu - item:features" data-selected-links="/features /features/project-management /features/code-review /features/project-management /features/integrations /features">
                  Features
</a>              </li>
              <li class="ml-4">
                <a href="/business" class="js-selected-navigation-item HeaderNavlink px-0 py-2 m-0" data-ga-click="Header, click, Nav menu - item:business" data-selected-links="/business /business/security /business/customers /business">
                  Business
</a>              </li>

              <li class="ml-4">
                <a href="/explore" class="js-selected-navigation-item HeaderNavlink px-0 py-2 m-0" data-ga-click="Header, click, Nav menu - item:explore" data-selected-links="/explore /trending /trending/developers /integrations /integrations/feature/code /integrations/feature/collaborate /integrations/feature/ship showcases showcases_search showcases_landing /explore">
                  Explore
</a>              </li>

              <li class="ml-4">
                    <a href="/marketplace" class="js-selected-navigation-item HeaderNavlink px-0 py-2 m-0" data-ga-click="Header, click, Nav menu - item:marketplace" data-selected-links=" /marketplace">
                      Marketplace
</a>              </li>
              <li class="ml-4">
                <a href="/pricing" class="js-selected-navigation-item HeaderNavlink px-0 py-2 m-0" data-ga-click="Header, click, Nav menu - item:pricing" data-selected-links="/pricing /pricing/developer /pricing/team /pricing/business-hosted /pricing/business-enterprise /pricing">
                  Pricing
</a>              </li>
          </ul>
        </nav>

      <div class="d-flex">
          <div class="d-lg-flex flex-items-center mr-3">
            <div class="header-search scoped-search site-scoped-search js-site-search" role="search">
  <!-- '"` --><!-- </textarea></xmp> --></option></form><form accept-charset="UTF-8" action="/hecht-software/box2dweb/search" class="js-site-search-form" data-scoped-search-url="/hecht-software/box2dweb/search" data-unscoped-search-url="/search" method="get"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /></div>
    <label class="form-control header-search-wrapper js-chromeless-input-container">
        <a href="/hecht-software/box2dweb/blob/master/Box2d.min.js" class="header-search-scope no-underline">This repository</a>
      <input type="text"
        class="form-control header-search-input js-site-search-focus js-site-search-field is-clearable"
        data-hotkey="s"
        name="q"
        value=""
        placeholder="Search"
        aria-label="Search this repository"
        data-unscoped-placeholder="Search GitHub"
        data-scoped-placeholder="Search"
        autocapitalize="off">
        <input type="hidden" class="js-site-search-type-field" name="type" >
    </label>
</form></div>

          </div>

        <span class="d-inline-block">
            <div class="HeaderNavlink px-0 py-2 m-0">
              <a class="text-bold text-white no-underline" href="/login?return_to=%2Fhecht-software%2Fbox2dweb%2Fblob%2Fmaster%2FBox2d.min.js" data-ga-click="(Logged out) Header, clicked Sign in, text:sign-in">Sign in</a>
                <span class="text-gray">or</span>
                <a class="text-bold text-white no-underline" href="/join?source=header-repo" data-ga-click="(Logged out) Header, clicked Sign up, text:sign-up">Sign up</a>
            </div>
        </span>
      </div>
    </div>
  </div>
</header>

  </div>

  <div id="start-of-content" class="show-on-focus"></div>

    <div id="js-flash-container">
</div>



  <div role="main" class="application-main ">
        <div itemscope itemtype="http://schema.org/SoftwareSourceCode" class="">
    <div id="js-repo-pjax-container" data-pjax-container >
      







  <div class="pagehead repohead instapaper_ignore readability-menu experiment-repo-nav  ">
    <div class="repohead-details-container clearfix container">

      <ul class="pagehead-actions">
  <li>
      <a href="/login?return_to=%2Fhecht-software%2Fbox2dweb"
    class="btn btn-sm btn-with-count tooltipped tooltipped-n"
    aria-label="You must be signed in to watch a repository" rel="nofollow">
    <svg aria-hidden="true" class="octicon octicon-eye" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M8.06 2C3 2 0 8 0 8s3 6 8.06 6C13 14 16 8 16 8s-3-6-7.94-6zM8 12c-2.2 0-4-1.78-4-4 0-2.2 1.8-4 4-4 2.22 0 4 1.8 4 4 0 2.22-1.78 4-4 4zm2-4c0 1.11-.89 2-2 2-1.11 0-2-.89-2-2 0-1.11.89-2 2-2 1.11 0 2 .89 2 2z"/></svg>
    Watch
  </a>
  <a class="social-count" href="/hecht-software/box2dweb/watchers"
     aria-label="14 users are watching this repository">
    14
  </a>

  </li>

  <li>
      <a href="/login?return_to=%2Fhecht-software%2Fbox2dweb"
    class="btn btn-sm btn-with-count tooltipped tooltipped-n"
    aria-label="You must be signed in to star a repository" rel="nofollow">
    <svg aria-hidden="true" class="octicon octicon-star" height="16" version="1.1" viewBox="0 0 14 16" width="14"><path fill-rule="evenodd" d="M14 6l-4.9-.64L7 1 4.9 5.36 0 6l3.6 3.26L2.67 14 7 11.67 11.33 14l-.93-4.74z"/></svg>
    Star
  </a>

    <a class="social-count js-social-count" href="/hecht-software/box2dweb/stargazers"
      aria-label="168 users starred this repository">
      168
    </a>

  </li>

  <li>
      <a href="/login?return_to=%2Fhecht-software%2Fbox2dweb"
        class="btn btn-sm btn-with-count tooltipped tooltipped-n"
        aria-label="You must be signed in to fork a repository" rel="nofollow">
        <svg aria-hidden="true" class="octicon octicon-repo-forked" height="16" version="1.1" viewBox="0 0 10 16" width="10"><path fill-rule="evenodd" d="M8 1a1.993 1.993 0 0 0-1 3.72V6L5 8 3 6V4.72A1.993 1.993 0 0 0 2 1a1.993 1.993 0 0 0-1 3.72V6.5l3 3v1.78A1.993 1.993 0 0 0 5 15a1.993 1.993 0 0 0 1-3.72V9.5l3-3V4.72A1.993 1.993 0 0 0 8 1zM2 4.2C1.34 4.2.8 3.65.8 3c0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2zm3 10c-.66 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2zm3-10c-.66 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2z"/></svg>
        Fork
      </a>

    <a href="/hecht-software/box2dweb/network" class="social-count"
       aria-label="52 users forked this repository">
      52
    </a>
  </li>
</ul>

      <h1 class="public ">
  <svg aria-hidden="true" class="octicon octicon-repo" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M4 9H3V8h1v1zm0-3H3v1h1V6zm0-2H3v1h1V4zm0-2H3v1h1V2zm8-1v12c0 .55-.45 1-1 1H6v2l-1.5-1.5L3 16v-2H1c-.55 0-1-.45-1-1V1c0-.55.45-1 1-1h10c.55 0 1 .45 1 1zm-1 10H1v2h2v-1h3v1h5v-2zm0-10H2v9h9V1z"/></svg>
  <span class="author" itemprop="author"><a href="/hecht-software" class="url fn" rel="author">hecht-software</a></span><!--
--><span class="path-divider">/</span><!--
--><strong itemprop="name"><a href="/hecht-software/box2dweb" data-pjax="#js-repo-pjax-container">box2dweb</a></strong>

</h1>

    </div>
    
<nav class="reponav js-repo-nav js-sidenav-container-pjax container"
     itemscope
     itemtype="http://schema.org/BreadcrumbList"
     role="navigation"
     data-pjax="#js-repo-pjax-container">

  <span itemscope itemtype="http://schema.org/ListItem" itemprop="itemListElement">
    <a href="/hecht-software/box2dweb" class="js-selected-navigation-item selected reponav-item" data-hotkey="g c" data-selected-links="repo_source repo_downloads repo_commits repo_releases repo_tags repo_branches repo_packages /hecht-software/box2dweb" itemprop="url">
      <svg aria-hidden="true" class="octicon octicon-code" height="16" version="1.1" viewBox="0 0 14 16" width="14"><path fill-rule="evenodd" d="M9.5 3L8 4.5 11.5 8 8 11.5 9.5 13 14 8 9.5 3zm-5 0L0 8l4.5 5L6 11.5 2.5 8 6 4.5 4.5 3z"/></svg>
      <span itemprop="name">Code</span>
      <meta itemprop="position" content="1">
</a>  </span>

    <span itemscope itemtype="http://schema.org/ListItem" itemprop="itemListElement">
      <a href="/hecht-software/box2dweb/issues" class="js-selected-navigation-item reponav-item" data-hotkey="g i" data-selected-links="repo_issues repo_labels repo_milestones /hecht-software/box2dweb/issues" itemprop="url">
        <svg aria-hidden="true" class="octicon octicon-issue-opened" height="16" version="1.1" viewBox="0 0 14 16" width="14"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"/></svg>
        <span itemprop="name">Issues</span>
        <span class="Counter">34</span>
        <meta itemprop="position" content="2">
</a>    </span>

  <span itemscope itemtype="http://schema.org/ListItem" itemprop="itemListElement">
    <a href="/hecht-software/box2dweb/pulls" class="js-selected-navigation-item reponav-item" data-hotkey="g p" data-selected-links="repo_pulls checks /hecht-software/box2dweb/pulls" itemprop="url">
      <svg aria-hidden="true" class="octicon octicon-git-pull-request" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M11 11.28V5c-.03-.78-.34-1.47-.94-2.06C9.46 2.35 8.78 2.03 8 2H7V0L4 3l3 3V4h1c.27.02.48.11.69.31.21.2.3.42.31.69v6.28A1.993 1.993 0 0 0 10 15a1.993 1.993 0 0 0 1-3.72zm-1 2.92c-.66 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2zM4 3c0-1.11-.89-2-2-2a1.993 1.993 0 0 0-1 3.72v6.56A1.993 1.993 0 0 0 2 15a1.993 1.993 0 0 0 1-3.72V4.72c.59-.34 1-.98 1-1.72zm-.8 10c0 .66-.55 1.2-1.2 1.2-.65 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2zM2 4.2C1.34 4.2.8 3.65.8 3c0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2z"/></svg>
      <span itemprop="name">Pull requests</span>
      <span class="Counter">2</span>
      <meta itemprop="position" content="3">
</a>  </span>

    <a href="/hecht-software/box2dweb/projects" class="js-selected-navigation-item reponav-item" data-hotkey="g b" data-selected-links="repo_projects new_repo_project repo_project /hecht-software/box2dweb/projects">
      <svg aria-hidden="true" class="octicon octicon-project" height="16" version="1.1" viewBox="0 0 15 16" width="15"><path fill-rule="evenodd" d="M10 12h3V2h-3v10zm-4-2h3V2H6v8zm-4 4h3V2H2v12zm-1 1h13V1H1v14zM14 0H1a1 1 0 0 0-1 1v14a1 1 0 0 0 1 1h13a1 1 0 0 0 1-1V1a1 1 0 0 0-1-1z"/></svg>
      Projects
      <span class="Counter" >0</span>
</a>
    <a href="/hecht-software/box2dweb/wiki" class="js-selected-navigation-item reponav-item" data-hotkey="g w" data-selected-links="repo_wiki /hecht-software/box2dweb/wiki">
      <svg aria-hidden="true" class="octicon octicon-book" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M3 5h4v1H3V5zm0 3h4V7H3v1zm0 2h4V9H3v1zm11-5h-4v1h4V5zm0 2h-4v1h4V7zm0 2h-4v1h4V9zm2-6v9c0 .55-.45 1-1 1H9.5l-1 1-1-1H2c-.55 0-1-.45-1-1V3c0-.55.45-1 1-1h5.5l1 1 1-1H15c.55 0 1 .45 1 1zm-8 .5L7.5 3H2v9h6V3.5zm7-.5H9.5l-.5.5V12h6V3z"/></svg>
      Wiki
</a>

  <a href="/hecht-software/box2dweb/pulse" class="js-selected-navigation-item reponav-item" data-selected-links="repo_graphs repo_contributors dependency_graph pulse /hecht-software/box2dweb/pulse">
    <svg aria-hidden="true" class="octicon octicon-graph" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M16 14v1H0V0h1v14h15zM5 13H3V8h2v5zm4 0H7V3h2v10zm4 0h-2V6h2v7z"/></svg>
    Insights
</a>

</nav>


  </div>

<div class="container new-discussion-timeline experiment-repo-nav  ">
  <div class="repository-content ">

    
  <a href="/hecht-software/box2dweb/blob/03ff76dac7f9961668011b44c5ae716a30dd0b6f/Box2d.min.js" class="d-none js-permalink-shortcut" data-hotkey="y">Permalink</a>

  <!-- blob contrib key: blob_contributors:v21:041cb06f8ca3eb726826005b82a077b0 -->

  <div class="file-navigation">
    
<div class="select-menu branch-select-menu js-menu-container js-select-menu float-left">
  <button class=" btn btn-sm select-menu-button js-menu-target css-truncate" data-hotkey="w"
    
    type="button" aria-label="Switch branches or tags" aria-expanded="false" aria-haspopup="true">
      <i>Branch:</i>
      <span class="js-select-button css-truncate-target">master</span>
  </button>

  <div class="select-menu-modal-holder js-menu-content js-navigation-container" data-pjax>

    <div class="select-menu-modal">
      <div class="select-menu-header">
        <svg aria-label="Close" class="octicon octicon-x js-menu-close" height="16" role="img" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M7.48 8l3.75 3.75-1.48 1.48L6 9.48l-3.75 3.75-1.48-1.48L4.52 8 .77 4.25l1.48-1.48L6 6.52l3.75-3.75 1.48 1.48z"/></svg>
        <span class="select-menu-title">Switch branches/tags</span>
      </div>

      <div class="select-menu-filters">
        <div class="select-menu-text-filter">
          <input type="text" aria-label="Filter branches/tags" id="context-commitish-filter-field" class="form-control js-filterable-field js-navigation-enable" placeholder="Filter branches/tags">
        </div>
        <div class="select-menu-tabs">
          <ul>
            <li class="select-menu-tab">
              <a href="#" data-tab-filter="branches" data-filter-placeholder="Filter branches/tags" class="js-select-menu-tab" role="tab">Branches</a>
            </li>
            <li class="select-menu-tab">
              <a href="#" data-tab-filter="tags" data-filter-placeholder="Find a tag…" class="js-select-menu-tab" role="tab">Tags</a>
            </li>
          </ul>
        </div>
      </div>

      <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket" data-tab-filter="branches" role="menu">

        <div data-filterable-for="context-commitish-filter-field" data-filterable-type="substring">


            <a class="select-menu-item js-navigation-item js-navigation-open selected"
               href="/hecht-software/box2dweb/blob/master/Box2d.min.js"
               data-name="master"
               data-skip-pjax="true"
               rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target js-select-menu-filter-text">
                master
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
               href="/hecht-software/box2dweb/blob/wiki/Box2d.min.js"
               data-name="wiki"
               data-skip-pjax="true"
               rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target js-select-menu-filter-text">
                wiki
              </span>
            </a>
        </div>

          <div class="select-menu-no-results">Nothing to show</div>
      </div>

      <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket" data-tab-filter="tags">
        <div data-filterable-for="context-commitish-filter-field" data-filterable-type="substring">


            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/hecht-software/box2dweb/tree/v2.1a.4/Box2d.min.js"
              data-name="v2.1a.4"
              data-skip-pjax="true"
              rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="v2.1a.4">
                v2.1a.4
              </span>
            </a>
        </div>

        <div class="select-menu-no-results">Nothing to show</div>
      </div>

    </div>
  </div>
</div>

    <div class="BtnGroup float-right">
      <a href="/hecht-software/box2dweb/find/master"
            class="js-pjax-capture-input btn btn-sm BtnGroup-item"
            data-pjax
            data-hotkey="t">
        Find file
      </a>
      <clipboard-copy
            for="blob-path"
            role="button"
            aria-label="Copy file path to clipboard"
            class="btn btn-sm BtnGroup-item tooltipped tooltipped-s"
            data-copied-hint="Copied!">
        Copy path
      </clipboard-copy>
    </div>
    <div id="blob-path" class="breadcrumb">
      <span class="repo-root js-repo-root"><span class="js-path-segment"><a href="/hecht-software/box2dweb" data-pjax="true"><span>box2dweb</span></a></span></span><span class="separator">/</span><strong class="final-path">Box2d.min.js</strong>
    </div>
  </div>


  <include-fragment class="commit-tease" src="/hecht-software/box2dweb/contributors/master/Box2d.min.js">
    <div>
      Fetching contributors&hellip;
    </div>

    <div class="commit-tease-contributors">
      <img alt="" class="loader-loading float-left" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32-EAF2F5.gif" width="16" />
      <span class="loader-error">Cannot retrieve contributors at this time</span>
    </div>
</include-fragment>

  <div class="file">
    <div class="file-header">
  <div class="file-actions">

    <div class="BtnGroup">
      <a href="/hecht-software/box2dweb/raw/master/Box2d.min.js" class="btn btn-sm BtnGroup-item" id="raw-url">Raw</a>
        <a href="/hecht-software/box2dweb/blame/master/Box2d.min.js" class="btn btn-sm js-update-url-with-hash BtnGroup-item" data-hotkey="b">Blame</a>
      <a href="/hecht-software/box2dweb/commits/master/Box2d.min.js" class="btn btn-sm BtnGroup-item" rel="nofollow">History</a>
    </div>

        <a class="btn-octicon tooltipped tooltipped-nw"
           href="https://desktop.github.com"
           aria-label="Open this file in GitHub Desktop"
           data-ga-click="Repository, open with desktop, type:windows">
            <svg aria-hidden="true" class="octicon octicon-device-desktop" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M15 2H1c-.55 0-1 .45-1 1v9c0 .55.45 1 1 1h5.34c-.25.61-.86 1.39-2.34 2h8c-1.48-.61-2.09-1.39-2.34-2H15c.55 0 1-.45 1-1V3c0-.55-.45-1-1-1zm0 9H1V3h14v8z"/></svg>
        </a>

        <button type="button" class="btn-octicon disabled tooltipped tooltipped-nw"
          aria-label="You must be signed in to make or propose changes">
          <svg aria-hidden="true" class="octicon octicon-pencil" height="16" version="1.1" viewBox="0 0 14 16" width="14"><path fill-rule="evenodd" d="M0 12v3h3l8-8-3-3-8 8zm3 2H1v-2h1v1h1v1zm10.3-9.3L12 6 9 3l1.3-1.3a.996.996 0 0 1 1.41 0l1.59 1.59c.39.39.39 1.02 0 1.41z"/></svg>
        </button>
        <button type="button" class="btn-octicon btn-octicon-danger disabled tooltipped tooltipped-nw"
          aria-label="You must be signed in to make or propose changes">
          <svg aria-hidden="true" class="octicon octicon-trashcan" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M11 2H9c0-.55-.45-1-1-1H5c-.55 0-1 .45-1 1H2c-.55 0-1 .45-1 1v1c0 .55.45 1 1 1v9c0 .55.45 1 1 1h7c.55 0 1-.45 1-1V5c.55 0 1-.45 1-1V3c0-.55-.45-1-1-1zm-1 12H3V5h1v8h1V5h1v8h1V5h1v8h1V5h1v9zm1-10H2V3h9v1z"/></svg>
        </button>
  </div>

  <div class="file-info">
      446 lines (445 sloc)
      <span class="file-info-divider"></span>
    220 KB
  </div>
</div>

    

  <div itemprop="text" class="blob-wrapper data type-javascript">
      <table class="highlight tab-size js-file-line-container" data-tab-size="8">
      <tr>
        <td id="L1" class="blob-num js-line-number" data-line-number="1"></td>
        <td id="LC1" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> Box2D<span class="pl-k">=</span>{};</td>
      </tr>
      <tr>
        <td id="L2" class="blob-num js-line-number" data-line-number="2"></td>
        <td id="LC2" class="blob-code blob-code-inner js-file-line">(<span class="pl-k">function</span>(<span class="pl-c1">F</span>,<span class="pl-c1">G</span>){<span class="pl-k">function</span> <span class="pl-en">K</span>(){}<span class="pl-k">if</span>(<span class="pl-k">!</span>(<span class="pl-c1">Object</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">defineProperty</span> <span class="pl-k">instanceof</span> <span class="pl-c1">Function</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-c1">Object</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">__defineGetter__</span> <span class="pl-k">instanceof</span> <span class="pl-c1">Function</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">Object</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">__defineSetter__</span> <span class="pl-k">instanceof</span> <span class="pl-c1">Function</span>)<span class="pl-c1">Object</span>.<span class="pl-en">defineProperty</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">y</span>,<span class="pl-smi">w</span>,<span class="pl-c1">A</span>){<span class="pl-c1">A</span>.<span class="pl-smi">get</span> <span class="pl-k">instanceof</span> <span class="pl-c1">Function</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">y</span>.<span class="pl-en">__defineGetter__</span>(w,<span class="pl-c1">A</span>.<span class="pl-smi">get</span>);<span class="pl-c1">A</span>.<span class="pl-smi">set</span> <span class="pl-k">instanceof</span> <span class="pl-c1">Function</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">y</span>.<span class="pl-en">__defineSetter__</span>(w,<span class="pl-c1">A</span>.<span class="pl-smi">set</span>)};<span class="pl-c1">F</span>.<span class="pl-en">inherit</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">y</span>,<span class="pl-smi">w</span>){<span class="pl-c1">K</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-c1">prototype</span>;<span class="pl-smi">y</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">K</span>;<span class="pl-smi">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span>y};<span class="pl-c1">F</span>.<span class="pl-en">generateCallback</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">y</span>,<span class="pl-smi">w</span>){<span class="pl-k">return</span> <span class="pl-k">function</span>(){<span class="pl-smi">w</span>.<span class="pl-c1">apply</span>(y,<span class="pl-c1">arguments</span>)}};</td>
      </tr>
      <tr>
        <td id="L3" class="blob-num js-line-number" data-line-number="3"></td>
        <td id="LC3" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">F</span>.<span class="pl-en">NVector</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">y</span>){<span class="pl-k">if</span>(y<span class="pl-k">===</span><span class="pl-c1">G</span>)y<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> w<span class="pl-k">=</span><span class="pl-c1">Array</span>(y<span class="pl-k">||</span><span class="pl-c1">0</span>),<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">A</span><span class="pl-k">&lt;</span>y;<span class="pl-k">++</span><span class="pl-c1">A</span>)w[<span class="pl-c1">A</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> w};<span class="pl-c1">F</span>.<span class="pl-en">is</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">y</span>,<span class="pl-smi">w</span>){<span class="pl-k">if</span>(y<span class="pl-k">===</span><span class="pl-c1">null</span>)<span class="pl-k">return</span> <span class="pl-c1">false</span>;<span class="pl-k">if</span>(w <span class="pl-k">instanceof</span> <span class="pl-c1">Function</span><span class="pl-k">&amp;&amp;</span>y <span class="pl-k">instanceof</span> w)<span class="pl-k">return</span> <span class="pl-c1">true</span>;<span class="pl-k">if</span>(<span class="pl-smi">y</span>.<span class="pl-c1">constructor</span>.<span class="pl-smi">__implements</span><span class="pl-k">!=</span><span class="pl-c1">G</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">y</span>.<span class="pl-c1">constructor</span>.<span class="pl-smi">__implements</span>[w])<span class="pl-k">return</span> <span class="pl-c1">true</span>;<span class="pl-k">return</span> <span class="pl-c1">false</span>};<span class="pl-c1">F</span>.<span class="pl-en">parseUInt</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">y</span>){<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-c1">parseInt</span>(y))}})(Box2D);<span class="pl-k">var</span> Vector<span class="pl-k">=</span><span class="pl-c1">Array</span>,Vector_a2j_Number<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">NVector</span>;<span class="pl-k">if</span>(<span class="pl-k">typeof</span> Box2D<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>undefined<span class="pl-pds">&quot;</span></span>)Box2D<span class="pl-k">=</span>{};<span class="pl-k">if</span>(<span class="pl-k">typeof</span> <span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span><span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>undefined<span class="pl-pds">&quot;</span></span>)<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span><span class="pl-k">=</span>{};</td>
      </tr>
      <tr>
        <td id="L4" class="blob-num js-line-number" data-line-number="4"></td>
        <td id="LC4" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>(<span class="pl-k">typeof</span> <span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">Shapes</span><span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>undefined<span class="pl-pds">&quot;</span></span>)<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">Shapes</span><span class="pl-k">=</span>{};<span class="pl-k">if</span>(<span class="pl-k">typeof</span> <span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span><span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>undefined<span class="pl-pds">&quot;</span></span>)<span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span><span class="pl-k">=</span>{};<span class="pl-k">if</span>(<span class="pl-k">typeof</span> <span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">Math</span><span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>undefined<span class="pl-pds">&quot;</span></span>)<span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">Math</span><span class="pl-k">=</span>{};<span class="pl-k">if</span>(<span class="pl-k">typeof</span> <span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span><span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>undefined<span class="pl-pds">&quot;</span></span>)<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span><span class="pl-k">=</span>{};<span class="pl-k">if</span>(<span class="pl-k">typeof</span> <span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span><span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>undefined<span class="pl-pds">&quot;</span></span>)<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span><span class="pl-k">=</span>{};<span class="pl-k">if</span>(<span class="pl-k">typeof</span> <span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Controllers</span><span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>undefined<span class="pl-pds">&quot;</span></span>)<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Controllers</span><span class="pl-k">=</span>{};<span class="pl-k">if</span>(<span class="pl-k">typeof</span> <span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span><span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>undefined<span class="pl-pds">&quot;</span></span>)<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span><span class="pl-k">=</span>{};</td>
      </tr>
      <tr>
        <td id="L5" class="blob-num js-line-number" data-line-number="5"></td>
        <td id="LC5" class="blob-code blob-code-inner js-file-line">(<span class="pl-k">function</span>(){<span class="pl-k">function</span> <span class="pl-en">F</span>(){<span class="pl-c1">F</span>.<span class="pl-smi">b2AABB</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>)}function G(){G.b2Bound.apply(this,arguments)}function K(){K.b2BoundValues.apply(this,arguments);this.constructor===K&amp;&amp;this.b2BoundValues.apply(this,arguments)}function y(){y.b2Collision.apply(this,arguments)}function w(){w.b2ContactID.apply(this,arguments);this.constructor===w&amp;&amp;this.b2ContactID.apply(this,arguments)}function A(){A.b2ContactPoint.apply(this,arguments)}function U(){U.b2Distance.apply(this,arguments)}function p(){p.b2DistanceInput.apply(this,</td>
      </tr>
      <tr>
        <td id="L6" class="blob-num js-line-number" data-line-number="6"></td>
        <td id="LC6" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">arguments</span>)}function B(){B.b2DistanceOutput.apply(this,arguments)}function Q(){Q.b2DistanceProxy.apply(this,arguments)}function V(){V.b2DynamicTree.apply(this,arguments);this.constructor===V&amp;&amp;this.b2DynamicTree.apply(this,arguments)}function M(){M.b2DynamicTreeBroadPhase.apply(this,arguments)}function L(){L.b2DynamicTreeNode.apply(this,arguments)}function I(){I.b2DynamicTreePair.apply(this,arguments)}function W(){W.b2Manifold.apply(this,arguments);this.constructor===W&amp;&amp;this.b2Manifold.apply(this,arguments)}</td>
      </tr>
      <tr>
        <td id="L7" class="blob-num js-line-number" data-line-number="7"></td>
        <td id="LC7" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">Y</span>(){<span class="pl-c1">Y</span>.<span class="pl-smi">b2ManifoldPoint</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>);<span class="pl-c1">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span><span class="pl-c1">Y</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">b2ManifoldPoint</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>)}function k(){k.b2Point.apply(this,arguments)}function z(){z.b2RayCastInput.apply(this,arguments);this.constructor===z&amp;&amp;this.b2RayCastInput.apply(this,arguments)}function u(){u.b2RayCastOutput.apply(this,arguments)}function D(){D.b2Segment.apply(this,arguments)}function H(){H.b2SeparationFunction.apply(this,arguments)}function O(){O.b2Simplex.apply(this,arguments);this.constructor===</td>
      </tr>
      <tr>
        <td id="L8" class="blob-num js-line-number" data-line-number="8"></td>
        <td id="LC8" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">O</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">b2Simplex</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>)}function E(){E.b2SimplexCache.apply(this,arguments)}function R(){R.b2SimplexVertex.apply(this,arguments)}function N(){N.b2TimeOfImpact.apply(this,arguments)}function S(){S.b2TOIInput.apply(this,arguments)}function aa(){aa.b2WorldManifold.apply(this,arguments);this.constructor===aa&amp;&amp;this.b2WorldManifold.apply(this,arguments)}function Z(){Z.ClipVertex.apply(this,arguments)}function d(){d.Features.apply(this,arguments)}function h(){h.b2CircleShape.apply(this,arguments);</td>
      </tr>
      <tr>
        <td id="L9" class="blob-num js-line-number" data-line-number="9"></td>
        <td id="LC9" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>h<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">b2CircleShape</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>)}function l(){l.b2EdgeChainDef.apply(this,arguments);this.constructor===l&amp;&amp;this.b2EdgeChainDef.apply(this,arguments)}function j(){j.b2EdgeShape.apply(this,arguments);this.constructor===j&amp;&amp;this.b2EdgeShape.apply(this,arguments)}function o(){o.b2MassData.apply(this,arguments)}function q(){q.b2PolygonShape.apply(this,arguments);this.constructor===q&amp;&amp;this.b2PolygonShape.apply(this,arguments)}function n(){n.b2Shape.apply(this,arguments);this.constructor===</td>
      </tr>
      <tr>
        <td id="L10" class="blob-num js-line-number" data-line-number="10"></td>
        <td id="LC10" class="blob-code blob-code-inner js-file-line">n<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">b2Shape</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>)}function a(){a.b2Color.apply(this,arguments);this.constructor===a&amp;&amp;this.b2Color.apply(this,arguments)}function c(){c.b2Settings.apply(this,arguments)}function g(){g.b2Mat22.apply(this,arguments);this.constructor===g&amp;&amp;this.b2Mat22.apply(this,arguments)}function b(){b.b2Mat33.apply(this,arguments);this.constructor===b&amp;&amp;this.b2Mat33.apply(this,arguments)}function e(){e.b2Math.apply(this,arguments)}function f(){f.b2Sweep.apply(this,arguments)}function m(){m.b2Transform.apply(this,</td>
      </tr>
      <tr>
        <td id="L11" class="blob-num js-line-number" data-line-number="11"></td>
        <td id="LC11" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">arguments</span>);<span class="pl-c1">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>m<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">b2Transform</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>)}function r(){r.b2Vec2.apply(this,arguments);this.constructor===r&amp;&amp;this.b2Vec2.apply(this,arguments)}function s(){s.b2Vec3.apply(this,arguments);this.constructor===s&amp;&amp;this.b2Vec3.apply(this,arguments)}function v(){v.b2Body.apply(this,arguments);this.constructor===v&amp;&amp;this.b2Body.apply(this,arguments)}function t(){t.b2BodyDef.apply(this,arguments);this.constructor===t&amp;&amp;this.b2BodyDef.apply(this,arguments)}function x(){x.b2ContactFilter.apply(this,</td>
      </tr>
      <tr>
        <td id="L12" class="blob-num js-line-number" data-line-number="12"></td>
        <td id="LC12" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">arguments</span>)}function C(){C.b2ContactImpulse.apply(this,arguments)}function J(){J.b2ContactListener.apply(this,arguments)}function T(){T.b2ContactManager.apply(this,arguments);this.constructor===T&amp;&amp;this.b2ContactManager.apply(this,arguments)}function P(){P.b2DebugDraw.apply(this,arguments);this.constructor===P&amp;&amp;this.b2DebugDraw.apply(this,arguments)}function X(){X.b2DestructionListener.apply(this,arguments)}function $(){$.b2FilterData.apply(this,arguments)}function ba(){ba.b2Fixture.apply(this,arguments);</td>
      </tr>
      <tr>
        <td id="L13" class="blob-num js-line-number" data-line-number="13"></td>
        <td id="LC13" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>ba<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">b2Fixture</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>)}function ca(){ca.b2FixtureDef.apply(this,arguments);this.constructor===ca&amp;&amp;this.b2FixtureDef.apply(this,arguments)}function da(){da.b2Island.apply(this,arguments);this.constructor===da&amp;&amp;this.b2Island.apply(this,arguments)}function Fa(){Fa.b2TimeStep.apply(this,arguments)}function ea(){ea.b2World.apply(this,arguments);this.constructor===ea&amp;&amp;this.b2World.apply(this,arguments)}function Ga(){Ga.b2CircleContact.apply(this,arguments)}function fa(){fa.b2Contact.apply(this,</td>
      </tr>
      <tr>
        <td id="L14" class="blob-num js-line-number" data-line-number="14"></td>
        <td id="LC14" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">arguments</span>);<span class="pl-c1">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>fa<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">b2Contact</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>)}function ga(){ga.b2ContactConstraint.apply(this,arguments);this.constructor===ga&amp;&amp;this.b2ContactConstraint.apply(this,arguments)}function Ha(){Ha.b2ContactConstraintPoint.apply(this,arguments)}function Ia(){Ia.b2ContactEdge.apply(this,arguments)}function ha(){ha.b2ContactFactory.apply(this,arguments);this.constructor===ha&amp;&amp;this.b2ContactFactory.apply(this,arguments)}function Ja(){Ja.b2ContactRegister.apply(this,arguments)}function Ka(){Ka.b2ContactResult.apply(this,</td>
      </tr>
      <tr>
        <td id="L15" class="blob-num js-line-number" data-line-number="15"></td>
        <td id="LC15" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">arguments</span>)}function ia(){ia.b2ContactSolver.apply(this,arguments);this.constructor===ia&amp;&amp;this.b2ContactSolver.apply(this,arguments)}function La(){La.b2EdgeAndCircleContact.apply(this,arguments)}function ja(){ja.b2NullContact.apply(this,arguments);this.constructor===ja&amp;&amp;this.b2NullContact.apply(this,arguments)}function Ma(){Ma.b2PolyAndCircleContact.apply(this,arguments)}function Na(){Na.b2PolyAndEdgeContact.apply(this,arguments)}function Oa(){Oa.b2PolygonContact.apply(this,arguments)}function ka(){ka.b2PositionSolverManifold.apply(this,</td>
      </tr>
      <tr>
        <td id="L16" class="blob-num js-line-number" data-line-number="16"></td>
        <td id="LC16" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">arguments</span>);<span class="pl-c1">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>ka<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">b2PositionSolverManifold</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>)}function Pa(){Pa.b2BuoyancyController.apply(this,arguments)}function Qa(){Qa.b2ConstantAccelController.apply(this,arguments)}function Ra(){Ra.b2ConstantForceController.apply(this,arguments)}function Sa(){Sa.b2Controller.apply(this,arguments)}function Ta(){Ta.b2ControllerEdge.apply(this,arguments)}function Ua(){Ua.b2GravityController.apply(this,arguments)}function Va(){Va.b2TensorDampingController.apply(this,arguments)}</td>
      </tr>
      <tr>
        <td id="L17" class="blob-num js-line-number" data-line-number="17"></td>
        <td id="LC17" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">la</span>(){<span class="pl-smi">la</span>.<span class="pl-smi">b2DistanceJoint</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>);<span class="pl-c1">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>la<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">b2DistanceJoint</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>)}function ma(){ma.b2DistanceJointDef.apply(this,arguments);this.constructor===ma&amp;&amp;this.b2DistanceJointDef.apply(this,arguments)}function na(){na.b2FrictionJoint.apply(this,arguments);this.constructor===na&amp;&amp;this.b2FrictionJoint.apply(this,arguments)}function oa(){oa.b2FrictionJointDef.apply(this,arguments);this.constructor===oa&amp;&amp;this.b2FrictionJointDef.apply(this,arguments)}function pa(){pa.b2GearJoint.apply(this,</td>
      </tr>
      <tr>
        <td id="L18" class="blob-num js-line-number" data-line-number="18"></td>
        <td id="LC18" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">arguments</span>);<span class="pl-c1">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>pa<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">b2GearJoint</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>)}function qa(){qa.b2GearJointDef.apply(this,arguments);this.constructor===qa&amp;&amp;this.b2GearJointDef.apply(this,arguments)}function Wa(){Wa.b2Jacobian.apply(this,arguments)}function ra(){ra.b2Joint.apply(this,arguments);this.constructor===ra&amp;&amp;this.b2Joint.apply(this,arguments)}function sa(){sa.b2JointDef.apply(this,arguments);this.constructor===sa&amp;&amp;this.b2JointDef.apply(this,arguments)}function Xa(){Xa.b2JointEdge.apply(this,arguments)}</td>
      </tr>
      <tr>
        <td id="L19" class="blob-num js-line-number" data-line-number="19"></td>
        <td id="LC19" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">ta</span>(){<span class="pl-smi">ta</span>.<span class="pl-smi">b2LineJoint</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>);<span class="pl-c1">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>ta<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">b2LineJoint</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>)}function ua(){ua.b2LineJointDef.apply(this,arguments);this.constructor===ua&amp;&amp;this.b2LineJointDef.apply(this,arguments)}function va(){va.b2MouseJoint.apply(this,arguments);this.constructor===va&amp;&amp;this.b2MouseJoint.apply(this,arguments)}function wa(){wa.b2MouseJointDef.apply(this,arguments);this.constructor===wa&amp;&amp;this.b2MouseJointDef.apply(this,arguments)}function xa(){xa.b2PrismaticJoint.apply(this,</td>
      </tr>
      <tr>
        <td id="L20" class="blob-num js-line-number" data-line-number="20"></td>
        <td id="LC20" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">arguments</span>);<span class="pl-c1">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>xa<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">b2PrismaticJoint</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>)}function ya(){ya.b2PrismaticJointDef.apply(this,arguments);this.constructor===ya&amp;&amp;this.b2PrismaticJointDef.apply(this,arguments)}function za(){za.b2PulleyJoint.apply(this,arguments);this.constructor===za&amp;&amp;this.b2PulleyJoint.apply(this,arguments)}function Aa(){Aa.b2PulleyJointDef.apply(this,arguments);this.constructor===Aa&amp;&amp;this.b2PulleyJointDef.apply(this,arguments)}function Ba(){Ba.b2RevoluteJoint.apply(this,arguments);</td>
      </tr>
      <tr>
        <td id="L21" class="blob-num js-line-number" data-line-number="21"></td>
        <td id="LC21" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>Ba<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">b2RevoluteJoint</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>)}function Ca(){Ca.b2RevoluteJointDef.apply(this,arguments);this.constructor===Ca&amp;&amp;this.b2RevoluteJointDef.apply(this,arguments)}function Da(){Da.b2WeldJoint.apply(this,arguments);this.constructor===Da&amp;&amp;this.b2WeldJoint.apply(this,arguments)}function Ea(){Ea.b2WeldJointDef.apply(this,arguments);this.constructor===Ea&amp;&amp;this.b2WeldJointDef.apply(this,arguments)}Box2D.Collision.IBroadPhase=&quot;Box2D.Collision.IBroadPhase&quot;;Box2D.Collision.b2AABB=</td>
      </tr>
      <tr>
        <td id="L22" class="blob-num js-line-number" data-line-number="22"></td>
        <td id="LC22" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">F</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2Bound</span><span class="pl-k">=</span><span class="pl-c1">G</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2BoundValues</span><span class="pl-k">=</span><span class="pl-c1">K</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2Collision</span><span class="pl-k">=</span>y;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2ContactID</span><span class="pl-k">=</span>w;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2ContactPoint</span><span class="pl-k">=</span><span class="pl-c1">A</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2Distance</span><span class="pl-k">=</span><span class="pl-c1">U</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2DistanceInput</span><span class="pl-k">=</span>p;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2DistanceOutput</span><span class="pl-k">=</span><span class="pl-c1">B</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2DistanceProxy</span><span class="pl-k">=</span><span class="pl-c1">Q</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2DynamicTree</span><span class="pl-k">=</span><span class="pl-c1">V</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2DynamicTreeBroadPhase</span><span class="pl-k">=</span><span class="pl-c1">M</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2DynamicTreeNode</span><span class="pl-k">=</span><span class="pl-c1">L</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2DynamicTreePair</span><span class="pl-k">=</span><span class="pl-c1">I</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2Manifold</span><span class="pl-k">=</span><span class="pl-c1">W</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2ManifoldPoint</span><span class="pl-k">=</span><span class="pl-c1">Y</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2Point</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L23" class="blob-num js-line-number" data-line-number="23"></td>
        <td id="LC23" class="blob-code blob-code-inner js-file-line">k;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2RayCastInput</span><span class="pl-k">=</span>z;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2RayCastOutput</span><span class="pl-k">=</span>u;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2Segment</span><span class="pl-k">=</span><span class="pl-c1">D</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2SeparationFunction</span><span class="pl-k">=</span><span class="pl-c1">H</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2Simplex</span><span class="pl-k">=</span><span class="pl-c1">O</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2SimplexCache</span><span class="pl-k">=</span><span class="pl-c1">E</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2SimplexVertex</span><span class="pl-k">=</span><span class="pl-c1">R</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2TimeOfImpact</span><span class="pl-k">=</span><span class="pl-c1">N</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2TOIInput</span><span class="pl-k">=</span><span class="pl-c1">S</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2WorldManifold</span><span class="pl-k">=</span>aa;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">ClipVertex</span><span class="pl-k">=</span><span class="pl-c1">Z</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">Features</span><span class="pl-k">=</span>d;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">Shapes</span>.<span class="pl-smi">b2CircleShape</span><span class="pl-k">=</span>h;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">Shapes</span>.<span class="pl-smi">b2EdgeChainDef</span><span class="pl-k">=</span>l;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">Shapes</span>.<span class="pl-smi">b2EdgeShape</span><span class="pl-k">=</span>j;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">Shapes</span>.<span class="pl-smi">b2MassData</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L24" class="blob-num js-line-number" data-line-number="24"></td>
        <td id="LC24" class="blob-code blob-code-inner js-file-line">o;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">Shapes</span>.<span class="pl-smi">b2PolygonShape</span><span class="pl-k">=</span>q;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">Shapes</span>.<span class="pl-smi">b2Shape</span><span class="pl-k">=</span>n;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">b2internal</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>Box2D.Common.b2internal<span class="pl-pds">&quot;</span></span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">b2Color</span><span class="pl-k">=</span>a;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">b2Settings</span><span class="pl-k">=</span>c;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">Math</span>.<span class="pl-smi">b2Mat22</span><span class="pl-k">=</span>g;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">Math</span>.<span class="pl-smi">b2Mat33</span><span class="pl-k">=</span>b;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">Math</span>.<span class="pl-smi">b2Math</span><span class="pl-k">=</span>e;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">Math</span>.<span class="pl-smi">b2Sweep</span><span class="pl-k">=</span>f;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">Math</span>.<span class="pl-smi">b2Transform</span><span class="pl-k">=</span>m;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">Math</span>.<span class="pl-smi">b2Vec2</span><span class="pl-k">=</span>r;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">Math</span>.<span class="pl-smi">b2Vec3</span><span class="pl-k">=</span>s;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2Body</span><span class="pl-k">=</span>v;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2BodyDef</span><span class="pl-k">=</span>t;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2ContactFilter</span><span class="pl-k">=</span>x;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2ContactImpulse</span><span class="pl-k">=</span><span class="pl-c1">C</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2ContactListener</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L25" class="blob-num js-line-number" data-line-number="25"></td>
        <td id="LC25" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">J</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2ContactManager</span><span class="pl-k">=</span><span class="pl-c1">T</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2DebugDraw</span><span class="pl-k">=</span><span class="pl-c1">P</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2DestructionListener</span><span class="pl-k">=</span><span class="pl-c1">X</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2FilterData</span><span class="pl-k">=</span>$;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2Fixture</span><span class="pl-k">=</span>ba;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2FixtureDef</span><span class="pl-k">=</span>ca;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2Island</span><span class="pl-k">=</span>da;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2TimeStep</span><span class="pl-k">=</span>Fa;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2World</span><span class="pl-k">=</span>ea;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2CircleContact</span><span class="pl-k">=</span>Ga;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2Contact</span><span class="pl-k">=</span>fa;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2ContactConstraint</span><span class="pl-k">=</span>ga;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2ContactConstraintPoint</span><span class="pl-k">=</span>Ha;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2ContactEdge</span><span class="pl-k">=</span>Ia;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2ContactFactory</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L26" class="blob-num js-line-number" data-line-number="26"></td>
        <td id="LC26" class="blob-code blob-code-inner js-file-line">ha;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2ContactRegister</span><span class="pl-k">=</span>Ja;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2ContactResult</span><span class="pl-k">=</span>Ka;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2ContactSolver</span><span class="pl-k">=</span>ia;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2EdgeAndCircleContact</span><span class="pl-k">=</span>La;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2NullContact</span><span class="pl-k">=</span>ja;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2PolyAndCircleContact</span><span class="pl-k">=</span>Ma;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2PolyAndEdgeContact</span><span class="pl-k">=</span>Na;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2PolygonContact</span><span class="pl-k">=</span>Oa;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2PositionSolverManifold</span><span class="pl-k">=</span>ka;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Controllers</span>.<span class="pl-smi">b2BuoyancyController</span><span class="pl-k">=</span>Pa;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Controllers</span>.<span class="pl-smi">b2ConstantAccelController</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L27" class="blob-num js-line-number" data-line-number="27"></td>
        <td id="LC27" class="blob-code blob-code-inner js-file-line">Qa;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Controllers</span>.<span class="pl-smi">b2ConstantForceController</span><span class="pl-k">=</span>Ra;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Controllers</span>.<span class="pl-smi">b2Controller</span><span class="pl-k">=</span>Sa;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Controllers</span>.<span class="pl-smi">b2ControllerEdge</span><span class="pl-k">=</span>Ta;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Controllers</span>.<span class="pl-smi">b2GravityController</span><span class="pl-k">=</span>Ua;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Controllers</span>.<span class="pl-smi">b2TensorDampingController</span><span class="pl-k">=</span>Va;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2DistanceJoint</span><span class="pl-k">=</span>la;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2DistanceJointDef</span><span class="pl-k">=</span>ma;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2FrictionJoint</span><span class="pl-k">=</span>na;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2FrictionJointDef</span><span class="pl-k">=</span>oa;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2GearJoint</span><span class="pl-k">=</span>pa;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2GearJointDef</span><span class="pl-k">=</span>qa;</td>
      </tr>
      <tr>
        <td id="L28" class="blob-num js-line-number" data-line-number="28"></td>
        <td id="LC28" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2Jacobian</span><span class="pl-k">=</span>Wa;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2Joint</span><span class="pl-k">=</span>ra;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2JointDef</span><span class="pl-k">=</span>sa;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2JointEdge</span><span class="pl-k">=</span>Xa;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2LineJoint</span><span class="pl-k">=</span>ta;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2LineJointDef</span><span class="pl-k">=</span>ua;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2MouseJoint</span><span class="pl-k">=</span>va;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2MouseJointDef</span><span class="pl-k">=</span>wa;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2PrismaticJoint</span><span class="pl-k">=</span>xa;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2PrismaticJointDef</span><span class="pl-k">=</span>ya;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2PulleyJoint</span><span class="pl-k">=</span>za;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2PulleyJointDef</span><span class="pl-k">=</span>Aa;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2RevoluteJoint</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L29" class="blob-num js-line-number" data-line-number="29"></td>
        <td id="LC29" class="blob-code blob-code-inner js-file-line">Ba;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2RevoluteJointDef</span><span class="pl-k">=</span>Ca;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2WeldJoint</span><span class="pl-k">=</span>Da;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2WeldJointDef</span><span class="pl-k">=</span>Ea})();<span class="pl-smi">Box2D</span>.<span class="pl-smi">postDefs</span><span class="pl-k">=</span>[];</td>
      </tr>
      <tr>
        <td id="L30" class="blob-num js-line-number" data-line-number="30"></td>
        <td id="LC30" class="blob-code blob-code-inner js-file-line">(<span class="pl-k">function</span>(){<span class="pl-k">var</span> <span class="pl-c1">F</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">Shapes</span>.<span class="pl-smi">b2CircleShape</span>,<span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">Shapes</span>.<span class="pl-smi">b2PolygonShape</span>,<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">Shapes</span>.<span class="pl-smi">b2Shape</span>,y<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">b2Settings</span>,w<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">Math</span>.<span class="pl-smi">b2Math</span>,<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">Math</span>.<span class="pl-smi">b2Sweep</span>,<span class="pl-c1">U</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">Math</span>.<span class="pl-smi">b2Transform</span>,p<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">Math</span>.<span class="pl-smi">b2Vec2</span>,<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2AABB</span>,<span class="pl-c1">Q</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2Bound</span>,<span class="pl-c1">V</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2BoundValues</span>,<span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2Collision</span>,<span class="pl-c1">L</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2ContactID</span>,<span class="pl-c1">I</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2ContactPoint</span>,<span class="pl-c1">W</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2Distance</span>,<span class="pl-c1">Y</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2DistanceInput</span>,</td>
      </tr>
      <tr>
        <td id="L31" class="blob-num js-line-number" data-line-number="31"></td>
        <td id="LC31" class="blob-code blob-code-inner js-file-line">k<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2DistanceOutput</span>,z<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2DistanceProxy</span>,u<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2DynamicTree</span>,<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2DynamicTreeBroadPhase</span>,<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2DynamicTreeNode</span>,<span class="pl-c1">O</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2DynamicTreePair</span>,<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2Manifold</span>,<span class="pl-c1">R</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2ManifoldPoint</span>,<span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2Point</span>,<span class="pl-c1">S</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2RayCastInput</span>,aa<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2RayCastOutput</span>,<span class="pl-c1">Z</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2Segment</span>,d<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2SeparationFunction</span>,h<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2Simplex</span>,l<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2SimplexCache</span>,j<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L32" class="blob-num js-line-number" data-line-number="32"></td>
        <td id="LC32" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2SimplexVertex</span>,o<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2TimeOfImpact</span>,q<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2TOIInput</span>,n<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2WorldManifold</span>,a<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">ClipVertex</span>,c<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">Features</span>,g<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">IBroadPhase</span>;<span class="pl-c1">B</span>.<span class="pl-en">b2AABB</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">lowerBound</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>;<span class="pl-c1">this</span>.<span class="pl-smi">upperBound</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">IsValid</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">y</span>;<span class="pl-k">return</span> b<span class="pl-k">=</span>(b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">x</span><span class="pl-k">&gt;=</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>b<span class="pl-k">&gt;=</span><span class="pl-c1">0</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-en">IsValid</span>()<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">upperBound</span>.<span class="pl-en">IsValid</span>()};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetCenter</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">p</span>((<span class="pl-c1">this</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">x</span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L33" class="blob-num js-line-number" data-line-number="33"></td>
        <td id="LC33" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">x</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>,(<span class="pl-c1">this</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">y</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>)};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetExtents</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">p</span>((<span class="pl-c1">this</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">x</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>,(<span class="pl-c1">this</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">y</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>)};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Contains</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-k">return</span> e<span class="pl-k">=</span>(e<span class="pl-k">=</span>(e<span class="pl-k">=</span>(e<span class="pl-k">=</span>e<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">x</span><span class="pl-k">&lt;=</span><span class="pl-smi">b</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">x</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">y</span><span class="pl-k">&lt;=</span><span class="pl-smi">b</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">y</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-smi">b</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">x</span><span class="pl-k">&lt;=</span><span class="pl-c1">this</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">x</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-smi">b</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">y</span><span class="pl-k">&lt;=</span><span class="pl-c1">this</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">y</span>};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">RayCast</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">Number</span>.<span class="pl-c1">MAX_VALUE</span>,m<span class="pl-k">=</span><span class="pl-c1">Number</span>.<span class="pl-c1">MAX_VALUE</span>,r<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">p1</span>.<span class="pl-c1">x</span>,s<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">p1</span>.<span class="pl-c1">y</span>,v<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">p2</span>.<span class="pl-c1">x</span><span class="pl-k">-</span></td>
      </tr>
      <tr>
        <td id="L34" class="blob-num js-line-number" data-line-number="34"></td>
        <td id="LC34" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">e</span>.<span class="pl-smi">p1</span>.<span class="pl-c1">x</span>,t<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">p2</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-smi">p1</span>.<span class="pl-c1">y</span>,x<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(t),<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">normal</span>,<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">P</span><span class="pl-k">=</span><span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">P</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(v)<span class="pl-k">&lt;</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>){<span class="pl-k">if</span>(r<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">x</span><span class="pl-k">||</span><span class="pl-c1">this</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">x</span><span class="pl-k">&lt;</span>r)<span class="pl-k">return</span> <span class="pl-c1">false</span>}<span class="pl-k">else</span>{<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>v;<span class="pl-c1">T</span><span class="pl-k">=</span>(<span class="pl-c1">this</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">x</span><span class="pl-k">-</span>r)<span class="pl-k">*</span><span class="pl-c1">J</span>;<span class="pl-c1">J</span><span class="pl-k">=</span>(<span class="pl-c1">this</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">x</span><span class="pl-k">-</span>r)<span class="pl-k">*</span><span class="pl-c1">J</span>;<span class="pl-c1">P</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-k">if</span>(<span class="pl-c1">T</span><span class="pl-k">&gt;</span><span class="pl-c1">J</span>){<span class="pl-c1">P</span><span class="pl-k">=</span><span class="pl-c1">T</span>;<span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-c1">J</span>;<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-c1">P</span>;<span class="pl-c1">P</span><span class="pl-k">=</span><span class="pl-c1">1</span>}<span class="pl-k">if</span>(<span class="pl-c1">T</span><span class="pl-k">&gt;</span>f){<span class="pl-c1">C</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">P</span>;<span class="pl-c1">C</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">=</span><span class="pl-c1">T</span>}m<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(m,<span class="pl-c1">J</span>);<span class="pl-k">if</span>(f<span class="pl-k">&gt;</span>m)<span class="pl-k">return</span> <span class="pl-c1">false</span>}<span class="pl-k">if</span>(x<span class="pl-k">&lt;</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>){<span class="pl-k">if</span>(s<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">y</span><span class="pl-k">||</span><span class="pl-c1">this</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">y</span><span class="pl-k">&lt;</span>s)<span class="pl-k">return</span> <span class="pl-c1">false</span>}<span class="pl-k">else</span>{<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>t;<span class="pl-c1">T</span><span class="pl-k">=</span>(<span class="pl-c1">this</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>s)<span class="pl-k">*</span><span class="pl-c1">J</span>;<span class="pl-c1">J</span><span class="pl-k">=</span>(<span class="pl-c1">this</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>s)<span class="pl-k">*</span><span class="pl-c1">J</span>;<span class="pl-c1">P</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-k">if</span>(<span class="pl-c1">T</span><span class="pl-k">&gt;</span><span class="pl-c1">J</span>){<span class="pl-c1">P</span><span class="pl-k">=</span><span class="pl-c1">T</span>;<span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-c1">J</span>;<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-c1">P</span>;<span class="pl-c1">P</span><span class="pl-k">=</span><span class="pl-c1">1</span>}<span class="pl-k">if</span>(<span class="pl-c1">T</span><span class="pl-k">&gt;</span>f){<span class="pl-c1">C</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">P</span>;<span class="pl-c1">C</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L35" class="blob-num js-line-number" data-line-number="35"></td>
        <td id="LC35" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">T</span>}m<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(m,<span class="pl-c1">J</span>);<span class="pl-k">if</span>(f<span class="pl-k">&gt;</span>m)<span class="pl-k">return</span> <span class="pl-c1">false</span>}<span class="pl-smi">b</span>.<span class="pl-smi">fraction</span><span class="pl-k">=</span>f;<span class="pl-k">return</span> <span class="pl-c1">true</span>};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">TestOverlap</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">y</span>,f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">b</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">y</span>;<span class="pl-k">if</span>(<span class="pl-smi">b</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">x</span><span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">||</span>e<span class="pl-k">&gt;</span><span class="pl-c1">0</span>)<span class="pl-k">return</span> <span class="pl-c1">false</span>;<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">b</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">x</span><span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">||</span>f<span class="pl-k">&gt;</span><span class="pl-c1">0</span>)<span class="pl-k">return</span> <span class="pl-c1">false</span>;<span class="pl-k">return</span> <span class="pl-c1">true</span>};<span class="pl-c1">B</span>.<span class="pl-en">Combine</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">B</span>;<span class="pl-smi">f</span>.<span class="pl-en">Combine</span>(b,e);<span class="pl-k">return</span> f};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Combine</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>){<span class="pl-c1">this</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-smi">b</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">x</span>,<span class="pl-smi">e</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">x</span>);<span class="pl-c1">this</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-smi">b</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">y</span>,<span class="pl-smi">e</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">y</span>);</td>
      </tr>
      <tr>
        <td id="L36" class="blob-num js-line-number" data-line-number="36"></td>
        <td id="LC36" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-smi">b</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">x</span>,<span class="pl-smi">e</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">x</span>);<span class="pl-c1">this</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-smi">b</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">y</span>,<span class="pl-smi">e</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">y</span>)};<span class="pl-c1">Q</span>.<span class="pl-en">b2Bound</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">Q</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">IsLower</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-c1">this</span>.<span class="pl-c1">value</span><span class="pl-k">&amp;</span><span class="pl-c1">1</span>)<span class="pl-k">==</span><span class="pl-c1">0</span>};<span class="pl-c1">Q</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">IsUpper</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-c1">this</span>.<span class="pl-c1">value</span><span class="pl-k">&amp;</span><span class="pl-c1">1</span>)<span class="pl-k">==</span><span class="pl-c1">1</span>};<span class="pl-c1">Q</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Swap</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">value</span>,f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">proxy</span>,m<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">stabbingCount</span>;<span class="pl-c1">this</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">value</span>;<span class="pl-c1">this</span>.<span class="pl-smi">proxy</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">proxy</span>;<span class="pl-c1">this</span>.<span class="pl-smi">stabbingCount</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">stabbingCount</span>;<span class="pl-smi">b</span>.<span class="pl-c1">value</span><span class="pl-k">=</span>e;<span class="pl-smi">b</span>.<span class="pl-smi">proxy</span><span class="pl-k">=</span>f;<span class="pl-smi">b</span>.<span class="pl-smi">stabbingCount</span><span class="pl-k">=</span>m};<span class="pl-c1">V</span>.<span class="pl-en">b2BoundValues</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">V</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2BoundValues</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">lowerValues</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L37" class="blob-num js-line-number" data-line-number="37"></td>
        <td id="LC37" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">Vector_a2j_Number</span>;<span class="pl-c1">this</span>.<span class="pl-smi">lowerValues</span>[<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">lowerValues</span>[<span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">upperValues</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector_a2j_Number</span>;<span class="pl-c1">this</span>.<span class="pl-smi">upperValues</span>[<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">upperValues</span>[<span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">M</span>.<span class="pl-en">b2Collision</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">M</span>.<span class="pl-en">ClipSegmentToLine</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">m</span>){<span class="pl-k">if</span>(m<span class="pl-k">===</span><span class="pl-c1">undefined</span>)m<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> r,s<span class="pl-k">=</span><span class="pl-c1">0</span>;r<span class="pl-k">=</span>e[<span class="pl-c1">0</span>];<span class="pl-k">var</span> v<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-smi">v</span>;r<span class="pl-k">=</span>e[<span class="pl-c1">1</span>];<span class="pl-k">var</span> t<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-smi">v</span>,x<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">v</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">f</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">v</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>m;r<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">t</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">f</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">t</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>m;x<span class="pl-k">&lt;=</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>b[s<span class="pl-k">++</span>].<span class="pl-en">Set</span>(e[<span class="pl-c1">0</span>]);r<span class="pl-k">&lt;=</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>b[s<span class="pl-k">++</span>].<span class="pl-en">Set</span>(e[<span class="pl-c1">1</span>]);<span class="pl-k">if</span>(x<span class="pl-k">*</span>r<span class="pl-k">&lt;</span><span class="pl-c1">0</span>){f<span class="pl-k">=</span>x<span class="pl-k">/</span>(x<span class="pl-k">-</span>r);r<span class="pl-k">=</span>b[s];r<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-smi">v</span>;<span class="pl-smi">r</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">v</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>f<span class="pl-k">*</span>(<span class="pl-smi">t</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">v</span>.<span class="pl-c1">x</span>);<span class="pl-smi">r</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">v</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>f<span class="pl-k">*</span>(<span class="pl-smi">t</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">v</span>.<span class="pl-c1">y</span>);r<span class="pl-k">=</span>b[s];<span class="pl-smi">r</span>.<span class="pl-c1">id</span><span class="pl-k">=</span>(x<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">?</span>e[<span class="pl-c1">0</span>]<span class="pl-k">:</span>e[<span class="pl-c1">1</span>]).<span class="pl-c1">id</span>;<span class="pl-k">++</span>s}<span class="pl-k">return</span> s};<span class="pl-c1">M</span>.<span class="pl-smi">EdgeSeparation</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L38" class="blob-num js-line-number" data-line-number="38"></td>
        <td id="LC38" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">m</span>,<span class="pl-smi">r</span>){<span class="pl-k">if</span>(f<span class="pl-k">===</span><span class="pl-c1">undefined</span>)f<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">parseInt</span>(<span class="pl-smi">b</span>.<span class="pl-smi">m_vertexCount</span>);<span class="pl-k">var</span> s<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">m_vertices</span>;b<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">m_normals</span>;<span class="pl-k">var</span> v<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(<span class="pl-smi">m</span>.<span class="pl-smi">m_vertexCount</span>),t<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-smi">m_vertices</span>,x,<span class="pl-c1">C</span>;x<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">R</span>;<span class="pl-c1">C</span><span class="pl-k">=</span>b[f];b<span class="pl-k">=</span><span class="pl-smi">x</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">C</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">x</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">C</span>.<span class="pl-c1">y</span>;m<span class="pl-k">=</span><span class="pl-smi">x</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">C</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">x</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">C</span>.<span class="pl-c1">y</span>;x<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-c1">R</span>;<span class="pl-k">var</span> <span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-smi">x</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>b<span class="pl-k">+</span><span class="pl-smi">x</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>m;x<span class="pl-k">=</span><span class="pl-smi">x</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>b<span class="pl-k">+</span><span class="pl-smi">x</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>m;<span class="pl-k">for</span>(<span class="pl-k">var</span> <span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">P</span><span class="pl-k">=</span><span class="pl-c1">Number</span>.<span class="pl-c1">MAX_VALUE</span>,<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">X</span><span class="pl-k">&lt;</span>v;<span class="pl-k">++</span><span class="pl-c1">X</span>){<span class="pl-c1">C</span><span class="pl-k">=</span>t[<span class="pl-c1">X</span>];<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-c1">C</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">J</span><span class="pl-k">+</span><span class="pl-c1">C</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>x;<span class="pl-k">if</span>(<span class="pl-c1">C</span><span class="pl-k">&lt;</span><span class="pl-c1">P</span>){<span class="pl-c1">P</span><span class="pl-k">=</span><span class="pl-c1">C</span>;<span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-c1">X</span>}}<span class="pl-c1">C</span><span class="pl-k">=</span>s[f];x<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">R</span>;f<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-smi">x</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">C</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">x</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">C</span>.<span class="pl-c1">y</span>);e<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-smi">x</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">C</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">x</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">C</span>.<span class="pl-c1">y</span>);<span class="pl-c1">C</span><span class="pl-k">=</span>t[<span class="pl-c1">T</span>];x<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-c1">R</span>;s<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-smi">x</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">C</span>.<span class="pl-c1">x</span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L39" class="blob-num js-line-number" data-line-number="39"></td>
        <td id="LC39" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">x</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">C</span>.<span class="pl-c1">y</span>);r<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-smi">x</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">C</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">x</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">C</span>.<span class="pl-c1">y</span>);s<span class="pl-k">-=</span>f;r<span class="pl-k">-=</span>e;<span class="pl-k">return</span> s<span class="pl-k">*</span>b<span class="pl-k">+</span>r<span class="pl-k">*</span>m};<span class="pl-c1">M</span>.<span class="pl-en">FindMaxSeparation</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">m</span>,<span class="pl-smi">r</span>){<span class="pl-k">var</span> s<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(<span class="pl-smi">e</span>.<span class="pl-smi">m_vertexCount</span>),v<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">m_normals</span>,t,x;x<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-c1">R</span>;t<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-smi">m_centroid</span>;<span class="pl-k">var</span> <span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-smi">x</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">t</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">x</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">t</span>.<span class="pl-c1">y</span>),<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-smi">x</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">t</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">x</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">t</span>.<span class="pl-c1">y</span>);x<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">R</span>;t<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">m_centroid</span>;<span class="pl-c1">C</span><span class="pl-k">-=</span><span class="pl-smi">f</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-smi">x</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">t</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">x</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">t</span>.<span class="pl-c1">y</span>);<span class="pl-c1">J</span><span class="pl-k">-=</span><span class="pl-smi">f</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-smi">x</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">t</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">x</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">t</span>.<span class="pl-c1">y</span>);x<span class="pl-k">=</span><span class="pl-c1">C</span><span class="pl-k">*</span><span class="pl-smi">f</span>.<span class="pl-c1">R</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">J</span><span class="pl-k">*</span><span class="pl-smi">f</span>.<span class="pl-c1">R</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span>;<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-c1">C</span><span class="pl-k">*</span><span class="pl-smi">f</span>.<span class="pl-c1">R</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">J</span><span class="pl-k">*</span><span class="pl-smi">f</span>.<span class="pl-c1">R</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span>;<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> <span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">Number</span>.<span class="pl-c1">MAX_VALUE</span>,<span class="pl-c1">P</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">P</span><span class="pl-k">&lt;</span>s;<span class="pl-k">++</span><span class="pl-c1">P</span>){t<span class="pl-k">=</span>v[<span class="pl-c1">P</span>];</td>
      </tr>
      <tr>
        <td id="L40" class="blob-num js-line-number" data-line-number="40"></td>
        <td id="LC40" class="blob-code blob-code-inner js-file-line">t<span class="pl-k">=</span><span class="pl-smi">t</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>x<span class="pl-k">+</span><span class="pl-smi">t</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">J</span>;<span class="pl-k">if</span>(t<span class="pl-k">&gt;</span><span class="pl-c1">T</span>){<span class="pl-c1">T</span><span class="pl-k">=</span>t;<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-c1">P</span>}}v<span class="pl-k">=</span><span class="pl-c1">M</span>.<span class="pl-en">EdgeSeparation</span>(e,f,<span class="pl-c1">C</span>,m,r);t<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(<span class="pl-c1">C</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">&gt;=</span><span class="pl-c1">0</span><span class="pl-k">?</span><span class="pl-c1">C</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span>s<span class="pl-k">-</span><span class="pl-c1">1</span>);x<span class="pl-k">=</span><span class="pl-c1">M</span>.<span class="pl-en">EdgeSeparation</span>(e,f,t,m,r);<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-c1">parseInt</span>(<span class="pl-c1">C</span><span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">&lt;</span>s<span class="pl-k">?</span><span class="pl-c1">C</span><span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">0</span>);<span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-c1">M</span>.<span class="pl-en">EdgeSeparation</span>(e,f,<span class="pl-c1">J</span>,m,r);<span class="pl-k">var</span> <span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-c1">P</span><span class="pl-k">=</span><span class="pl-c1">0</span>,$<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(x<span class="pl-k">&gt;</span>v<span class="pl-k">&amp;&amp;</span>x<span class="pl-k">&gt;</span><span class="pl-c1">T</span>){$<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-c1">P</span><span class="pl-k">=</span>t;<span class="pl-c1">X</span><span class="pl-k">=</span>x}<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-c1">T</span><span class="pl-k">&gt;</span>v){$<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">P</span><span class="pl-k">=</span><span class="pl-c1">J</span>;<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-c1">T</span>}<span class="pl-k">else</span>{b[<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-c1">C</span>;<span class="pl-k">return</span> v}<span class="pl-k">for</span>(;;){<span class="pl-c1">C</span><span class="pl-k">=</span>$<span class="pl-k">==</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">?</span><span class="pl-c1">P</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">&gt;=</span><span class="pl-c1">0</span><span class="pl-k">?</span><span class="pl-c1">P</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span>s<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">P</span><span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">&lt;</span>s<span class="pl-k">?</span><span class="pl-c1">P</span><span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">0</span>;v<span class="pl-k">=</span><span class="pl-c1">M</span>.<span class="pl-en">EdgeSeparation</span>(e,f,<span class="pl-c1">C</span>,m,r);<span class="pl-k">if</span>(v<span class="pl-k">&gt;</span><span class="pl-c1">X</span>){<span class="pl-c1">P</span><span class="pl-k">=</span><span class="pl-c1">C</span>;<span class="pl-c1">X</span><span class="pl-k">=</span>v}<span class="pl-k">else</span> <span class="pl-k">break</span>}b[<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-c1">P</span>;<span class="pl-k">return</span> <span class="pl-c1">X</span>};<span class="pl-c1">M</span>.<span class="pl-en">FindIncidentEdge</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">m</span>,<span class="pl-smi">r</span>,<span class="pl-smi">s</span>){<span class="pl-k">if</span>(m<span class="pl-k">===</span><span class="pl-c1">undefined</span>)m<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">parseInt</span>(<span class="pl-smi">e</span>.<span class="pl-smi">m_vertexCount</span>);<span class="pl-k">var</span> v<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">m_normals</span>,t<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(<span class="pl-smi">r</span>.<span class="pl-smi">m_vertexCount</span>);</td>
      </tr>
      <tr>
        <td id="L41" class="blob-num js-line-number" data-line-number="41"></td>
        <td id="LC41" class="blob-code blob-code-inner js-file-line">e<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-smi">m_vertices</span>;r<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-smi">m_normals</span>;<span class="pl-k">var</span> x;x<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">R</span>;f<span class="pl-k">=</span>v[m];v<span class="pl-k">=</span><span class="pl-smi">x</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">f</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">x</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">f</span>.<span class="pl-c1">y</span>;<span class="pl-k">var</span> <span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-smi">x</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">f</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">x</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">f</span>.<span class="pl-c1">y</span>;x<span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-c1">R</span>;f<span class="pl-k">=</span><span class="pl-smi">x</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>v<span class="pl-k">+</span><span class="pl-smi">x</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">C</span>;<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-smi">x</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>v<span class="pl-k">+</span><span class="pl-smi">x</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">C</span>;v<span class="pl-k">=</span>f;x<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> <span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-c1">Number</span>.<span class="pl-c1">MAX_VALUE</span>,<span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">T</span><span class="pl-k">&lt;</span>t;<span class="pl-k">++</span><span class="pl-c1">T</span>){f<span class="pl-k">=</span>r[<span class="pl-c1">T</span>];f<span class="pl-k">=</span>v<span class="pl-k">*</span><span class="pl-smi">f</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">C</span><span class="pl-k">*</span><span class="pl-smi">f</span>.<span class="pl-c1">y</span>;<span class="pl-k">if</span>(f<span class="pl-k">&lt;</span><span class="pl-c1">J</span>){<span class="pl-c1">J</span><span class="pl-k">=</span>f;x<span class="pl-k">=</span><span class="pl-c1">T</span>}}r<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(x);v<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(r<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">&lt;</span>t<span class="pl-k">?</span>r<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">0</span>);t<span class="pl-k">=</span>b[<span class="pl-c1">0</span>];f<span class="pl-k">=</span>e[r];x<span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-c1">R</span>;<span class="pl-smi">t</span>.<span class="pl-smi">v</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-smi">x</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">f</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">x</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">f</span>.<span class="pl-c1">y</span>);<span class="pl-smi">t</span>.<span class="pl-smi">v</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-smi">x</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">f</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">x</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">f</span>.<span class="pl-c1">y</span>);<span class="pl-smi">t</span>.<span class="pl-c1">id</span>.<span class="pl-smi">features</span>.<span class="pl-smi">referenceEdge</span><span class="pl-k">=</span>m;<span class="pl-smi">t</span>.<span class="pl-c1">id</span>.<span class="pl-smi">features</span>.<span class="pl-smi">incidentEdge</span><span class="pl-k">=</span>r;<span class="pl-smi">t</span>.<span class="pl-c1">id</span>.<span class="pl-smi">features</span>.<span class="pl-smi">incidentVertex</span><span class="pl-k">=</span><span class="pl-c1">0</span>;t<span class="pl-k">=</span>b[<span class="pl-c1">1</span>];f<span class="pl-k">=</span>e[v];</td>
      </tr>
      <tr>
        <td id="L42" class="blob-num js-line-number" data-line-number="42"></td>
        <td id="LC42" class="blob-code blob-code-inner js-file-line">x<span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-c1">R</span>;<span class="pl-smi">t</span>.<span class="pl-smi">v</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-smi">x</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">f</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">x</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">f</span>.<span class="pl-c1">y</span>);<span class="pl-smi">t</span>.<span class="pl-smi">v</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-smi">x</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">f</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">x</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">f</span>.<span class="pl-c1">y</span>);<span class="pl-smi">t</span>.<span class="pl-c1">id</span>.<span class="pl-smi">features</span>.<span class="pl-smi">referenceEdge</span><span class="pl-k">=</span>m;<span class="pl-smi">t</span>.<span class="pl-c1">id</span>.<span class="pl-smi">features</span>.<span class="pl-smi">incidentEdge</span><span class="pl-k">=</span>v;<span class="pl-smi">t</span>.<span class="pl-c1">id</span>.<span class="pl-smi">features</span>.<span class="pl-smi">incidentVertex</span><span class="pl-k">=</span><span class="pl-c1">1</span>};<span class="pl-c1">M</span>.<span class="pl-en">MakeClipPointVector</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>(<span class="pl-c1">2</span>);b[<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">a</span>;b[<span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">a</span>;<span class="pl-k">return</span> b};<span class="pl-c1">M</span>.<span class="pl-en">CollidePolygons</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">m</span>,<span class="pl-smi">r</span>){<span class="pl-k">var</span> s;<span class="pl-smi">b</span>.<span class="pl-smi">m_pointCount</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> v<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">m_radius</span><span class="pl-k">+</span><span class="pl-smi">m</span>.<span class="pl-smi">m_radius</span>;s<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">M</span>.<span class="pl-smi">s_edgeAO</span>[<span class="pl-c1">0</span>]<span class="pl-k">=</span>s;<span class="pl-k">var</span> t<span class="pl-k">=</span><span class="pl-c1">M</span>.<span class="pl-en">FindMaxSeparation</span>(<span class="pl-c1">M</span>.<span class="pl-smi">s_edgeAO</span>,e,f,m,r);s<span class="pl-k">=</span><span class="pl-c1">M</span>.<span class="pl-smi">s_edgeAO</span>[<span class="pl-c1">0</span>];<span class="pl-k">if</span>(<span class="pl-k">!</span>(t<span class="pl-k">&gt;</span>v)){<span class="pl-k">var</span> x<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">M</span>.<span class="pl-smi">s_edgeBO</span>[<span class="pl-c1">0</span>]<span class="pl-k">=</span>x;<span class="pl-k">var</span> <span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-c1">M</span>.<span class="pl-en">FindMaxSeparation</span>(<span class="pl-c1">M</span>.<span class="pl-smi">s_edgeBO</span>,</td>
      </tr>
      <tr>
        <td id="L43" class="blob-num js-line-number" data-line-number="43"></td>
        <td id="LC43" class="blob-code blob-code-inner js-file-line">m,r,e,f);x<span class="pl-k">=</span><span class="pl-c1">M</span>.<span class="pl-smi">s_edgeBO</span>[<span class="pl-c1">0</span>];<span class="pl-k">if</span>(<span class="pl-k">!</span>(<span class="pl-c1">C</span><span class="pl-k">&gt;</span>v)){<span class="pl-k">var</span> <span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-c1">C</span><span class="pl-k">&gt;</span><span class="pl-c1">0.98</span><span class="pl-k">*</span>t<span class="pl-k">+</span><span class="pl-c1">0.0010</span>){t<span class="pl-k">=</span>m;m<span class="pl-k">=</span>e;e<span class="pl-k">=</span>r;f<span class="pl-k">=</span>f;<span class="pl-c1">J</span><span class="pl-k">=</span>x;<span class="pl-smi">b</span>.<span class="pl-smi">m_type</span><span class="pl-k">=</span><span class="pl-c1">E</span>.<span class="pl-smi">e_faceB</span>;<span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-c1">1</span>}<span class="pl-k">else</span>{t<span class="pl-k">=</span>e;m<span class="pl-k">=</span>m;e<span class="pl-k">=</span>f;f<span class="pl-k">=</span>r;<span class="pl-c1">J</span><span class="pl-k">=</span>s;<span class="pl-smi">b</span>.<span class="pl-smi">m_type</span><span class="pl-k">=</span><span class="pl-c1">E</span>.<span class="pl-smi">e_faceA</span>;<span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-c1">0</span>}s<span class="pl-k">=</span><span class="pl-c1">M</span>.<span class="pl-smi">s_incidentEdge</span>;<span class="pl-c1">M</span>.<span class="pl-en">FindIncidentEdge</span>(s,t,e,<span class="pl-c1">J</span>,m,f);x<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(<span class="pl-smi">t</span>.<span class="pl-smi">m_vertexCount</span>);r<span class="pl-k">=</span><span class="pl-smi">t</span>.<span class="pl-smi">m_vertices</span>;t<span class="pl-k">=</span>r[<span class="pl-c1">J</span>];<span class="pl-k">var</span> <span class="pl-c1">P</span>;<span class="pl-c1">P</span><span class="pl-k">=</span><span class="pl-c1">J</span><span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">&lt;</span>x<span class="pl-k">?</span>r[<span class="pl-c1">parseInt</span>(<span class="pl-c1">J</span><span class="pl-k">+</span><span class="pl-c1">1</span>)]<span class="pl-k">:</span>r[<span class="pl-c1">0</span>];<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-c1">M</span>.<span class="pl-smi">s_localTangent</span>;<span class="pl-c1">J</span>.<span class="pl-en">Set</span>(<span class="pl-c1">P</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">t</span>.<span class="pl-c1">x</span>,<span class="pl-c1">P</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">t</span>.<span class="pl-c1">y</span>);<span class="pl-c1">J</span>.<span class="pl-en">Normalize</span>();r<span class="pl-k">=</span><span class="pl-c1">M</span>.<span class="pl-smi">s_localNormal</span>;<span class="pl-smi">r</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">J</span>.<span class="pl-c1">y</span>;<span class="pl-smi">r</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">J</span>.<span class="pl-c1">x</span>;m<span class="pl-k">=</span><span class="pl-c1">M</span>.<span class="pl-smi">s_planePoint</span>;<span class="pl-smi">m</span>.<span class="pl-en">Set</span>(<span class="pl-c1">0.5</span><span class="pl-k">*</span>(<span class="pl-smi">t</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">P</span>.<span class="pl-c1">x</span>),<span class="pl-c1">0.5</span><span class="pl-k">*</span>(<span class="pl-smi">t</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">P</span>.<span class="pl-c1">y</span>));<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-c1">M</span>.<span class="pl-smi">s_tangent</span>;x<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">R</span>;<span class="pl-c1">C</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">x</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">J</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">x</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">J</span>.<span class="pl-c1">y</span>;<span class="pl-c1">C</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">x</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L44" class="blob-num js-line-number" data-line-number="44"></td>
        <td id="LC44" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">J</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">x</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">J</span>.<span class="pl-c1">y</span>;<span class="pl-k">var</span> <span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-c1">M</span>.<span class="pl-smi">s_tangent2</span>;<span class="pl-c1">X</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">C</span>.<span class="pl-c1">x</span>;<span class="pl-c1">X</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">C</span>.<span class="pl-c1">y</span>;<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-c1">M</span>.<span class="pl-smi">s_normal</span>;<span class="pl-c1">J</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">C</span>.<span class="pl-c1">y</span>;<span class="pl-c1">J</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">C</span>.<span class="pl-c1">x</span>;<span class="pl-k">var</span> $<span class="pl-k">=</span><span class="pl-c1">M</span>.<span class="pl-smi">s_v11</span>,ba<span class="pl-k">=</span><span class="pl-c1">M</span>.<span class="pl-smi">s_v12</span>;<span class="pl-smi">$</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-smi">x</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">t</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">x</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">t</span>.<span class="pl-c1">y</span>);<span class="pl-smi">$</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-smi">x</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">t</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">x</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">t</span>.<span class="pl-c1">y</span>);<span class="pl-smi">ba</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-smi">x</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">P</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">x</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">P</span>.<span class="pl-c1">y</span>);<span class="pl-smi">ba</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-smi">x</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">P</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">x</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">P</span>.<span class="pl-c1">y</span>);e<span class="pl-k">=</span><span class="pl-c1">J</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">$</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">J</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">$</span>.<span class="pl-c1">y</span>;x<span class="pl-k">=</span><span class="pl-c1">C</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">ba</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">C</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">ba</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>v;<span class="pl-c1">P</span><span class="pl-k">=</span><span class="pl-c1">M</span>.<span class="pl-smi">s_clipPoints1</span>;t<span class="pl-k">=</span><span class="pl-c1">M</span>.<span class="pl-smi">s_clipPoints2</span>;ba<span class="pl-k">=</span><span class="pl-c1">0</span>;ba<span class="pl-k">=</span><span class="pl-c1">M</span>.<span class="pl-en">ClipSegmentToLine</span>(<span class="pl-c1">P</span>,s,<span class="pl-c1">X</span>,<span class="pl-k">-</span><span class="pl-c1">C</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">$</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">C</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">$</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>v);<span class="pl-k">if</span>(<span class="pl-k">!</span>(ba<span class="pl-k">&lt;</span><span class="pl-c1">2</span>)){ba<span class="pl-k">=</span><span class="pl-c1">M</span>.<span class="pl-en">ClipSegmentToLine</span>(t,<span class="pl-c1">P</span>,<span class="pl-c1">C</span>,x);<span class="pl-k">if</span>(<span class="pl-k">!</span>(ba<span class="pl-k">&lt;</span><span class="pl-c1">2</span>)){<span class="pl-smi">b</span>.<span class="pl-smi">m_localPlaneNormal</span>.<span class="pl-en">SetV</span>(r);</td>
      </tr>
      <tr>
        <td id="L45" class="blob-num js-line-number" data-line-number="45"></td>
        <td id="LC45" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>.<span class="pl-smi">m_localPoint</span>.<span class="pl-en">SetV</span>(m);<span class="pl-k">for</span>(m<span class="pl-k">=</span>r<span class="pl-k">=</span><span class="pl-c1">0</span>;m<span class="pl-k">&lt;</span><span class="pl-smi">y</span>.<span class="pl-smi">b2_maxManifoldPoints</span>;<span class="pl-k">++</span>m){s<span class="pl-k">=</span>t[m];<span class="pl-k">if</span>(<span class="pl-c1">J</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">s</span>.<span class="pl-smi">v</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">J</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">s</span>.<span class="pl-smi">v</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>e<span class="pl-k">&lt;=</span>v){<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">m_points</span>[r];x<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">R</span>;<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">v</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">f</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span>;$<span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">v</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">f</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span>;<span class="pl-c1">C</span>.<span class="pl-smi">m_localPoint</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">X</span><span class="pl-k">*</span><span class="pl-smi">x</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>$<span class="pl-k">*</span><span class="pl-smi">x</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span>;<span class="pl-c1">C</span>.<span class="pl-smi">m_localPoint</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">X</span><span class="pl-k">*</span><span class="pl-smi">x</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>$<span class="pl-k">*</span><span class="pl-smi">x</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span>;<span class="pl-c1">C</span>.<span class="pl-smi">m_id</span>.<span class="pl-en">Set</span>(<span class="pl-smi">s</span>.<span class="pl-c1">id</span>);<span class="pl-c1">C</span>.<span class="pl-smi">m_id</span>.<span class="pl-smi">features</span>.<span class="pl-smi">flip</span><span class="pl-k">=</span><span class="pl-c1">T</span>;<span class="pl-k">++</span>r}}<span class="pl-smi">b</span>.<span class="pl-smi">m_pointCount</span><span class="pl-k">=</span>r}}}}};<span class="pl-c1">M</span>.<span class="pl-en">CollideCircles</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">m</span>,<span class="pl-smi">r</span>){<span class="pl-smi">b</span>.<span class="pl-smi">m_pointCount</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> s,v;s<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">R</span>;v<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">m_p</span>;<span class="pl-k">var</span> t<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-smi">s</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">v</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">s</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">v</span>.<span class="pl-c1">y</span>);f<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-smi">s</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">v</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">s</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">v</span>.<span class="pl-c1">y</span>);s<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-c1">R</span>;v<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-smi">m_p</span>;t<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L46" class="blob-num js-line-number" data-line-number="46"></td>
        <td id="LC46" class="blob-code blob-code-inner js-file-line">(<span class="pl-smi">s</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">v</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">s</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">v</span>.<span class="pl-c1">y</span>)<span class="pl-k">-</span>t;r<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-smi">s</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">v</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">s</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">v</span>.<span class="pl-c1">y</span>)<span class="pl-k">-</span>f;s<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">m_radius</span><span class="pl-k">+</span><span class="pl-smi">m</span>.<span class="pl-smi">m_radius</span>;<span class="pl-k">if</span>(<span class="pl-k">!</span>(t<span class="pl-k">*</span>t<span class="pl-k">+</span>r<span class="pl-k">*</span>r<span class="pl-k">&gt;</span>s<span class="pl-k">*</span>s)){<span class="pl-smi">b</span>.<span class="pl-smi">m_type</span><span class="pl-k">=</span><span class="pl-c1">E</span>.<span class="pl-smi">e_circles</span>;<span class="pl-smi">b</span>.<span class="pl-smi">m_localPoint</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">e</span>.<span class="pl-smi">m_p</span>);<span class="pl-smi">b</span>.<span class="pl-smi">m_localPlaneNormal</span>.<span class="pl-en">SetZero</span>();<span class="pl-smi">b</span>.<span class="pl-smi">m_pointCount</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-smi">b</span>.<span class="pl-smi">m_points</span>[<span class="pl-c1">0</span>].<span class="pl-smi">m_localPoint</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">m</span>.<span class="pl-smi">m_p</span>);<span class="pl-smi">b</span>.<span class="pl-smi">m_points</span>[<span class="pl-c1">0</span>].<span class="pl-smi">m_id</span>.<span class="pl-smi">key</span><span class="pl-k">=</span><span class="pl-c1">0</span>}};<span class="pl-c1">M</span>.<span class="pl-en">CollidePolygonAndCircle</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">m</span>,<span class="pl-smi">r</span>){<span class="pl-k">var</span> s<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">m_pointCount</span><span class="pl-k">=</span><span class="pl-c1">0</span>,v<span class="pl-k">=</span><span class="pl-c1">0</span>,t,x;x<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-c1">R</span>;t<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-smi">m_p</span>;<span class="pl-k">var</span> <span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-smi">x</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">t</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">x</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">t</span>.<span class="pl-c1">y</span>);s<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-smi">x</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">t</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">x</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">t</span>.<span class="pl-c1">y</span>)<span class="pl-k">-</span><span class="pl-smi">f</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span>;v<span class="pl-k">=</span><span class="pl-c1">C</span><span class="pl-k">-</span><span class="pl-smi">f</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span>;x<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">R</span>;f<span class="pl-k">=</span>s<span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L47" class="blob-num js-line-number" data-line-number="47"></td>
        <td id="LC47" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">x</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>v<span class="pl-k">*</span><span class="pl-smi">x</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span>;x<span class="pl-k">=</span>s<span class="pl-k">*</span><span class="pl-smi">x</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>v<span class="pl-k">*</span><span class="pl-smi">x</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span>;<span class="pl-k">var</span> <span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">Number</span>.<span class="pl-c1">MAX_VALUE</span>;r<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">m_radius</span><span class="pl-k">+</span><span class="pl-smi">m</span>.<span class="pl-smi">m_radius</span>;<span class="pl-k">var</span> <span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-c1">parseInt</span>(<span class="pl-smi">e</span>.<span class="pl-smi">m_vertexCount</span>),<span class="pl-c1">P</span><span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">m_vertices</span>;e<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">m_normals</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> <span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">X</span><span class="pl-k">&lt;</span><span class="pl-c1">T</span>;<span class="pl-k">++</span><span class="pl-c1">X</span>){t<span class="pl-k">=</span><span class="pl-c1">P</span>[<span class="pl-c1">X</span>];s<span class="pl-k">=</span>f<span class="pl-k">-</span><span class="pl-smi">t</span>.<span class="pl-c1">x</span>;v<span class="pl-k">=</span>x<span class="pl-k">-</span><span class="pl-smi">t</span>.<span class="pl-c1">y</span>;t<span class="pl-k">=</span>e[<span class="pl-c1">X</span>];s<span class="pl-k">=</span><span class="pl-smi">t</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>s<span class="pl-k">+</span><span class="pl-smi">t</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>v;<span class="pl-k">if</span>(s<span class="pl-k">&gt;</span>r)<span class="pl-k">return</span>;<span class="pl-k">if</span>(s<span class="pl-k">&gt;</span><span class="pl-c1">C</span>){<span class="pl-c1">C</span><span class="pl-k">=</span>s;<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-c1">X</span>}}s<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(<span class="pl-c1">J</span>);v<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(s<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">&lt;</span><span class="pl-c1">T</span><span class="pl-k">?</span>s<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">0</span>);t<span class="pl-k">=</span><span class="pl-c1">P</span>[s];<span class="pl-c1">P</span><span class="pl-k">=</span><span class="pl-c1">P</span>[v];<span class="pl-k">if</span>(<span class="pl-c1">C</span><span class="pl-k">&lt;</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>){<span class="pl-smi">b</span>.<span class="pl-smi">m_pointCount</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-smi">b</span>.<span class="pl-smi">m_type</span><span class="pl-k">=</span><span class="pl-c1">E</span>.<span class="pl-smi">e_faceA</span>;<span class="pl-smi">b</span>.<span class="pl-smi">m_localPlaneNormal</span>.<span class="pl-en">SetV</span>(e[<span class="pl-c1">J</span>]);<span class="pl-smi">b</span>.<span class="pl-smi">m_localPoint</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(<span class="pl-smi">t</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">P</span>.<span class="pl-c1">x</span>);<span class="pl-smi">b</span>.<span class="pl-smi">m_localPoint</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(<span class="pl-smi">t</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">P</span>.<span class="pl-c1">y</span>)}<span class="pl-k">else</span>{<span class="pl-c1">C</span><span class="pl-k">=</span>(f<span class="pl-k">-</span><span class="pl-c1">P</span>.<span class="pl-c1">x</span>)<span class="pl-k">*</span>(<span class="pl-smi">t</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">P</span>.<span class="pl-c1">x</span>)<span class="pl-k">+</span>(x<span class="pl-k">-</span><span class="pl-c1">P</span>.<span class="pl-c1">y</span>)<span class="pl-k">*</span>(<span class="pl-smi">t</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">P</span>.<span class="pl-c1">y</span>);</td>
      </tr>
      <tr>
        <td id="L48" class="blob-num js-line-number" data-line-number="48"></td>
        <td id="LC48" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>((f<span class="pl-k">-</span><span class="pl-smi">t</span>.<span class="pl-c1">x</span>)<span class="pl-k">*</span>(<span class="pl-c1">P</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">t</span>.<span class="pl-c1">x</span>)<span class="pl-k">+</span>(x<span class="pl-k">-</span><span class="pl-smi">t</span>.<span class="pl-c1">y</span>)<span class="pl-k">*</span>(<span class="pl-c1">P</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">t</span>.<span class="pl-c1">y</span>)<span class="pl-k">&lt;=</span><span class="pl-c1">0</span>){<span class="pl-k">if</span>((f<span class="pl-k">-</span><span class="pl-smi">t</span>.<span class="pl-c1">x</span>)<span class="pl-k">*</span>(f<span class="pl-k">-</span><span class="pl-smi">t</span>.<span class="pl-c1">x</span>)<span class="pl-k">+</span>(x<span class="pl-k">-</span><span class="pl-smi">t</span>.<span class="pl-c1">y</span>)<span class="pl-k">*</span>(x<span class="pl-k">-</span><span class="pl-smi">t</span>.<span class="pl-c1">y</span>)<span class="pl-k">&gt;</span>r<span class="pl-k">*</span>r)<span class="pl-k">return</span>;<span class="pl-smi">b</span>.<span class="pl-smi">m_pointCount</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-smi">b</span>.<span class="pl-smi">m_type</span><span class="pl-k">=</span><span class="pl-c1">E</span>.<span class="pl-smi">e_faceA</span>;<span class="pl-smi">b</span>.<span class="pl-smi">m_localPlaneNormal</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>f<span class="pl-k">-</span><span class="pl-smi">t</span>.<span class="pl-c1">x</span>;<span class="pl-smi">b</span>.<span class="pl-smi">m_localPlaneNormal</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>x<span class="pl-k">-</span><span class="pl-smi">t</span>.<span class="pl-c1">y</span>;<span class="pl-smi">b</span>.<span class="pl-smi">m_localPlaneNormal</span>.<span class="pl-en">Normalize</span>();<span class="pl-smi">b</span>.<span class="pl-smi">m_localPoint</span>.<span class="pl-en">SetV</span>(t)}<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-c1">C</span><span class="pl-k">&lt;=</span><span class="pl-c1">0</span>){<span class="pl-k">if</span>((f<span class="pl-k">-</span><span class="pl-c1">P</span>.<span class="pl-c1">x</span>)<span class="pl-k">*</span>(f<span class="pl-k">-</span><span class="pl-c1">P</span>.<span class="pl-c1">x</span>)<span class="pl-k">+</span>(x<span class="pl-k">-</span><span class="pl-c1">P</span>.<span class="pl-c1">y</span>)<span class="pl-k">*</span>(x<span class="pl-k">-</span><span class="pl-c1">P</span>.<span class="pl-c1">y</span>)<span class="pl-k">&gt;</span>r<span class="pl-k">*</span>r)<span class="pl-k">return</span>;<span class="pl-smi">b</span>.<span class="pl-smi">m_pointCount</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-smi">b</span>.<span class="pl-smi">m_type</span><span class="pl-k">=</span><span class="pl-c1">E</span>.<span class="pl-smi">e_faceA</span>;<span class="pl-smi">b</span>.<span class="pl-smi">m_localPlaneNormal</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>f<span class="pl-k">-</span><span class="pl-c1">P</span>.<span class="pl-c1">x</span>;<span class="pl-smi">b</span>.<span class="pl-smi">m_localPlaneNormal</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>x<span class="pl-k">-</span><span class="pl-c1">P</span>.<span class="pl-c1">y</span>;<span class="pl-smi">b</span>.<span class="pl-smi">m_localPlaneNormal</span>.<span class="pl-en">Normalize</span>();<span class="pl-smi">b</span>.<span class="pl-smi">m_localPoint</span>.<span class="pl-en">SetV</span>(<span class="pl-c1">P</span>)}<span class="pl-k">else</span>{<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(<span class="pl-smi">t</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">P</span>.<span class="pl-c1">x</span>);t<span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(<span class="pl-smi">t</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">P</span>.<span class="pl-c1">y</span>);<span class="pl-c1">C</span><span class="pl-k">=</span>(f<span class="pl-k">-</span><span class="pl-c1">J</span>)<span class="pl-k">*</span>e[s].<span class="pl-c1">x</span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L49" class="blob-num js-line-number" data-line-number="49"></td>
        <td id="LC49" class="blob-code blob-code-inner js-file-line">(x<span class="pl-k">-</span>t)<span class="pl-k">*</span>e[s].<span class="pl-c1">y</span>;<span class="pl-k">if</span>(<span class="pl-c1">C</span><span class="pl-k">&gt;</span>r)<span class="pl-k">return</span>;<span class="pl-smi">b</span>.<span class="pl-smi">m_pointCount</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-smi">b</span>.<span class="pl-smi">m_type</span><span class="pl-k">=</span><span class="pl-c1">E</span>.<span class="pl-smi">e_faceA</span>;<span class="pl-smi">b</span>.<span class="pl-smi">m_localPlaneNormal</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>e[s].<span class="pl-c1">x</span>;<span class="pl-smi">b</span>.<span class="pl-smi">m_localPlaneNormal</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>e[s].<span class="pl-c1">y</span>;<span class="pl-smi">b</span>.<span class="pl-smi">m_localPlaneNormal</span>.<span class="pl-en">Normalize</span>();<span class="pl-smi">b</span>.<span class="pl-smi">m_localPoint</span>.<span class="pl-en">Set</span>(<span class="pl-c1">J</span>,t)}}<span class="pl-smi">b</span>.<span class="pl-smi">m_points</span>[<span class="pl-c1">0</span>].<span class="pl-smi">m_localPoint</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">m</span>.<span class="pl-smi">m_p</span>);<span class="pl-smi">b</span>.<span class="pl-smi">m_points</span>[<span class="pl-c1">0</span>].<span class="pl-smi">m_id</span>.<span class="pl-smi">key</span><span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">M</span>.<span class="pl-en">TestOverlap</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">lowerBound</span>,m<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">upperBound</span>,r<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">m</span>.<span class="pl-c1">x</span>,s<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">m</span>.<span class="pl-c1">y</span>;f<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">lowerBound</span>;m<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">upperBound</span>;<span class="pl-k">var</span> v<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">m</span>.<span class="pl-c1">y</span>;<span class="pl-k">if</span>(r<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">||</span>s<span class="pl-k">&gt;</span><span class="pl-c1">0</span>)<span class="pl-k">return</span> <span class="pl-c1">false</span>;<span class="pl-k">if</span>(<span class="pl-smi">f</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">m</span>.<span class="pl-c1">x</span><span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">||</span>v<span class="pl-k">&gt;</span><span class="pl-c1">0</span>)<span class="pl-k">return</span> <span class="pl-c1">false</span>;<span class="pl-k">return</span> <span class="pl-c1">true</span>};<span class="pl-smi">Box2D</span>.<span class="pl-smi">postDefs</span>.<span class="pl-c1">push</span>(<span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2Collision</span>.<span class="pl-smi">s_incidentEdge</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L50" class="blob-num js-line-number" data-line-number="50"></td>
        <td id="LC50" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">M</span>.<span class="pl-en">MakeClipPointVector</span>();<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2Collision</span>.<span class="pl-smi">s_clipPoints1</span><span class="pl-k">=</span><span class="pl-c1">M</span>.<span class="pl-en">MakeClipPointVector</span>();<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2Collision</span>.<span class="pl-smi">s_clipPoints2</span><span class="pl-k">=</span><span class="pl-c1">M</span>.<span class="pl-en">MakeClipPointVector</span>();<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2Collision</span>.<span class="pl-smi">s_edgeAO</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector_a2j_Number</span>(<span class="pl-c1">1</span>);<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2Collision</span>.<span class="pl-smi">s_edgeBO</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector_a2j_Number</span>(<span class="pl-c1">1</span>);<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2Collision</span>.<span class="pl-smi">s_localTangent</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2Collision</span>.<span class="pl-smi">s_localNormal</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2Collision</span>.<span class="pl-smi">s_planePoint</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2Collision</span>.<span class="pl-smi">s_normal</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2Collision</span>.<span class="pl-smi">s_tangent</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L51" class="blob-num js-line-number" data-line-number="51"></td>
        <td id="LC51" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">p</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2Collision</span>.<span class="pl-smi">s_tangent2</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2Collision</span>.<span class="pl-smi">s_v11</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2Collision</span>.<span class="pl-smi">s_v12</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2Collision</span>.<span class="pl-smi">b2CollidePolyTempVec</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2Collision</span>.<span class="pl-smi">b2_nullFeature</span><span class="pl-k">=</span><span class="pl-c1">255</span>});<span class="pl-c1">L</span>.<span class="pl-en">b2ContactID</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">features</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">c</span>};<span class="pl-c1">L</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2ContactID</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">features</span>.<span class="pl-smi">_m_id</span><span class="pl-k">=</span><span class="pl-c1">this</span>};<span class="pl-c1">L</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Set</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">key</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">_key</span>};<span class="pl-c1">L</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">L</span>;<span class="pl-smi">b</span>.<span class="pl-smi">key</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">key</span>;<span class="pl-k">return</span> b};<span class="pl-c1">Object</span>.<span class="pl-en">defineProperty</span>(<span class="pl-c1">L</span>.<span class="pl-c1">prototype</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>key<span class="pl-pds">&quot;</span></span>,{enumerable<span class="pl-k">:</span><span class="pl-c1">false</span>,</td>
      </tr>
      <tr>
        <td id="L52" class="blob-num js-line-number" data-line-number="52"></td>
        <td id="LC52" class="blob-code blob-code-inner js-file-line">configurable<span class="pl-k">:</span><span class="pl-c1">true</span>,<span class="pl-en">get</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">_key</span>}});<span class="pl-c1">Object</span>.<span class="pl-en">defineProperty</span>(<span class="pl-c1">L</span>.<span class="pl-c1">prototype</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>key<span class="pl-pds">&quot;</span></span>,{enumerable<span class="pl-k">:</span><span class="pl-c1">false</span>,configurable<span class="pl-k">:</span><span class="pl-c1">true</span>,<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">if</span>(b<span class="pl-k">===</span><span class="pl-c1">undefined</span>)b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">_key</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">features</span>.<span class="pl-smi">_referenceEdge</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">_key</span><span class="pl-k">&amp;</span><span class="pl-c1">255</span>;<span class="pl-c1">this</span>.<span class="pl-smi">features</span>.<span class="pl-smi">_incidentEdge</span><span class="pl-k">=</span>(<span class="pl-c1">this</span>.<span class="pl-smi">_key</span><span class="pl-k">&amp;</span><span class="pl-c1">65280</span>)<span class="pl-k">&gt;&gt;</span><span class="pl-c1">8</span><span class="pl-k">&amp;</span><span class="pl-c1">255</span>;<span class="pl-c1">this</span>.<span class="pl-smi">features</span>.<span class="pl-smi">_incidentVertex</span><span class="pl-k">=</span>(<span class="pl-c1">this</span>.<span class="pl-smi">_key</span><span class="pl-k">&amp;</span><span class="pl-c1">16711680</span>)<span class="pl-k">&gt;&gt;</span><span class="pl-c1">16</span><span class="pl-k">&amp;</span><span class="pl-c1">255</span>;<span class="pl-c1">this</span>.<span class="pl-smi">features</span>.<span class="pl-smi">_flip</span><span class="pl-k">=</span>(<span class="pl-c1">this</span>.<span class="pl-smi">_key</span><span class="pl-k">&amp;</span><span class="pl-c1">4278190080</span>)<span class="pl-k">&gt;&gt;</span><span class="pl-c1">24</span><span class="pl-k">&amp;</span><span class="pl-c1">255</span>}});<span class="pl-c1">I</span>.<span class="pl-en">b2ContactPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">position</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>;<span class="pl-c1">this</span>.<span class="pl-smi">velocity</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>;<span class="pl-c1">this</span>.<span class="pl-smi">normal</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>;<span class="pl-c1">this</span>.<span class="pl-c1">id</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">L</span>};<span class="pl-c1">W</span>.<span class="pl-smi">b2Distance</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L53" class="blob-num js-line-number" data-line-number="53"></td>
        <td id="LC53" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(){};<span class="pl-c1">W</span>.<span class="pl-en">Distance</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>){<span class="pl-k">++</span><span class="pl-c1">W</span>.<span class="pl-smi">b2_gjkCalls</span>;<span class="pl-k">var</span> m<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">proxyA</span>,r<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">proxyB</span>,s<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">transformA</span>,v<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">transformB</span>,t<span class="pl-k">=</span><span class="pl-c1">W</span>.<span class="pl-smi">s_simplex</span>;<span class="pl-smi">t</span>.<span class="pl-en">ReadCache</span>(e,m,s,r,v);<span class="pl-k">var</span> x<span class="pl-k">=</span><span class="pl-smi">t</span>.<span class="pl-smi">m_vertices</span>,<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-c1">W</span>.<span class="pl-smi">s_saveA</span>,<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-c1">W</span>.<span class="pl-smi">s_saveB</span>,<span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-smi">t</span>.<span class="pl-en">GetClosestPoint</span>().<span class="pl-en">LengthSquared</span>();<span class="pl-k">for</span>(<span class="pl-k">var</span> <span class="pl-c1">P</span><span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">X</span>,$<span class="pl-k">=</span><span class="pl-c1">0</span>;$<span class="pl-k">&lt;</span><span class="pl-c1">20</span>;){<span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-smi">t</span>.<span class="pl-smi">m_count</span>;<span class="pl-k">for</span>(<span class="pl-c1">P</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">P</span><span class="pl-k">&lt;</span><span class="pl-c1">T</span>;<span class="pl-c1">P</span><span class="pl-k">++</span>){<span class="pl-c1">C</span>[<span class="pl-c1">P</span>]<span class="pl-k">=</span>x[<span class="pl-c1">P</span>].<span class="pl-smi">indexA</span>;<span class="pl-c1">J</span>[<span class="pl-c1">P</span>]<span class="pl-k">=</span>x[<span class="pl-c1">P</span>].<span class="pl-smi">indexB</span>}<span class="pl-k">switch</span>(<span class="pl-smi">t</span>.<span class="pl-smi">m_count</span>){<span class="pl-k">case</span> <span class="pl-c1">1</span>:<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">2</span>:<span class="pl-smi">t</span>.<span class="pl-en">Solve2</span>();<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">3</span>:<span class="pl-smi">t</span>.<span class="pl-en">Solve3</span>();<span class="pl-k">break</span>;<span class="pl-k">default</span>:<span class="pl-smi">y</span>.<span class="pl-en">b2Assert</span>(<span class="pl-c1">false</span>)}<span class="pl-k">if</span>(<span class="pl-smi">t</span>.<span class="pl-smi">m_count</span><span class="pl-k">==</span><span class="pl-c1">3</span>)<span class="pl-k">break</span>;<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-smi">t</span>.<span class="pl-en">GetClosestPoint</span>();<span class="pl-c1">X</span>.<span class="pl-en">LengthSquared</span>();<span class="pl-c1">P</span><span class="pl-k">=</span><span class="pl-smi">t</span>.<span class="pl-en">GetSearchDirection</span>();</td>
      </tr>
      <tr>
        <td id="L54" class="blob-num js-line-number" data-line-number="54"></td>
        <td id="LC54" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>(<span class="pl-c1">P</span>.<span class="pl-en">LengthSquared</span>()<span class="pl-k">&lt;</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span><span class="pl-k">*</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>)<span class="pl-k">break</span>;<span class="pl-c1">X</span><span class="pl-k">=</span>x[<span class="pl-smi">t</span>.<span class="pl-smi">m_count</span>];<span class="pl-c1">X</span>.<span class="pl-smi">indexA</span><span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-en">GetSupport</span>(<span class="pl-smi">w</span>.<span class="pl-en">MulTMV</span>(<span class="pl-smi">s</span>.<span class="pl-c1">R</span>,<span class="pl-c1">P</span>.<span class="pl-en">GetNegative</span>()));<span class="pl-c1">X</span>.<span class="pl-smi">wA</span><span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">MulX</span>(s,<span class="pl-smi">m</span>.<span class="pl-en">GetVertex</span>(<span class="pl-c1">X</span>.<span class="pl-smi">indexA</span>));<span class="pl-c1">X</span>.<span class="pl-smi">indexB</span><span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-en">GetSupport</span>(<span class="pl-smi">w</span>.<span class="pl-en">MulTMV</span>(<span class="pl-smi">v</span>.<span class="pl-c1">R</span>,<span class="pl-c1">P</span>));<span class="pl-c1">X</span>.<span class="pl-smi">wB</span><span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">MulX</span>(v,<span class="pl-smi">r</span>.<span class="pl-en">GetVertex</span>(<span class="pl-c1">X</span>.<span class="pl-smi">indexB</span>));<span class="pl-c1">X</span>.<span class="pl-smi">w</span><span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">SubtractVV</span>(<span class="pl-c1">X</span>.<span class="pl-smi">wB</span>,<span class="pl-c1">X</span>.<span class="pl-smi">wA</span>);<span class="pl-k">++</span>$;<span class="pl-k">++</span><span class="pl-c1">W</span>.<span class="pl-smi">b2_gjkIters</span>;<span class="pl-k">var</span> ba<span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-k">for</span>(<span class="pl-c1">P</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">P</span><span class="pl-k">&lt;</span><span class="pl-c1">T</span>;<span class="pl-c1">P</span><span class="pl-k">++</span>)<span class="pl-k">if</span>(<span class="pl-c1">X</span>.<span class="pl-smi">indexA</span><span class="pl-k">==</span><span class="pl-c1">C</span>[<span class="pl-c1">P</span>]<span class="pl-k">&amp;&amp;</span><span class="pl-c1">X</span>.<span class="pl-smi">indexB</span><span class="pl-k">==</span><span class="pl-c1">J</span>[<span class="pl-c1">P</span>]){ba<span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-k">break</span>}<span class="pl-k">if</span>(ba)<span class="pl-k">break</span>;<span class="pl-k">++</span><span class="pl-smi">t</span>.<span class="pl-smi">m_count</span>}<span class="pl-c1">W</span>.<span class="pl-smi">b2_gjkMaxIters</span><span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">Max</span>(<span class="pl-c1">W</span>.<span class="pl-smi">b2_gjkMaxIters</span>,$);<span class="pl-smi">t</span>.<span class="pl-en">GetWitnessPoints</span>(<span class="pl-smi">b</span>.<span class="pl-smi">pointA</span>,<span class="pl-smi">b</span>.<span class="pl-smi">pointB</span>);<span class="pl-smi">b</span>.<span class="pl-smi">distance</span><span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">SubtractVV</span>(<span class="pl-smi">b</span>.<span class="pl-smi">pointA</span>,</td>
      </tr>
      <tr>
        <td id="L55" class="blob-num js-line-number" data-line-number="55"></td>
        <td id="LC55" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>.<span class="pl-smi">pointB</span>).<span class="pl-en">Length</span>();<span class="pl-smi">b</span>.<span class="pl-smi">iterations</span><span class="pl-k">=</span>$;<span class="pl-smi">t</span>.<span class="pl-en">WriteCache</span>(e);<span class="pl-k">if</span>(<span class="pl-smi">f</span>.<span class="pl-smi">useRadii</span>){e<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-smi">m_radius</span>;r<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-smi">m_radius</span>;<span class="pl-k">if</span>(<span class="pl-smi">b</span>.<span class="pl-smi">distance</span><span class="pl-k">&gt;</span>e<span class="pl-k">+</span>r<span class="pl-k">&amp;&amp;</span><span class="pl-smi">b</span>.<span class="pl-smi">distance</span><span class="pl-k">&gt;</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>){<span class="pl-smi">b</span>.<span class="pl-smi">distance</span><span class="pl-k">-=</span>e<span class="pl-k">+</span>r;f<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">SubtractVV</span>(<span class="pl-smi">b</span>.<span class="pl-smi">pointB</span>,<span class="pl-smi">b</span>.<span class="pl-smi">pointA</span>);<span class="pl-smi">f</span>.<span class="pl-en">Normalize</span>();<span class="pl-smi">b</span>.<span class="pl-smi">pointA</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span>e<span class="pl-k">*</span><span class="pl-smi">f</span>.<span class="pl-c1">x</span>;<span class="pl-smi">b</span>.<span class="pl-smi">pointA</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span>e<span class="pl-k">*</span><span class="pl-smi">f</span>.<span class="pl-c1">y</span>;<span class="pl-smi">b</span>.<span class="pl-smi">pointB</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span>r<span class="pl-k">*</span><span class="pl-smi">f</span>.<span class="pl-c1">x</span>;<span class="pl-smi">b</span>.<span class="pl-smi">pointB</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span>r<span class="pl-k">*</span><span class="pl-smi">f</span>.<span class="pl-c1">y</span>}<span class="pl-k">else</span>{<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>;<span class="pl-c1">X</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(<span class="pl-smi">b</span>.<span class="pl-smi">pointA</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">b</span>.<span class="pl-smi">pointB</span>.<span class="pl-c1">x</span>);<span class="pl-c1">X</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(<span class="pl-smi">b</span>.<span class="pl-smi">pointA</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-smi">b</span>.<span class="pl-smi">pointB</span>.<span class="pl-c1">y</span>);<span class="pl-smi">b</span>.<span class="pl-smi">pointA</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">pointB</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">X</span>.<span class="pl-c1">x</span>;<span class="pl-smi">b</span>.<span class="pl-smi">pointA</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">pointB</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">X</span>.<span class="pl-c1">y</span>;<span class="pl-smi">b</span>.<span class="pl-smi">distance</span><span class="pl-k">=</span><span class="pl-c1">0</span>}}};<span class="pl-smi">Box2D</span>.<span class="pl-smi">postDefs</span>.<span class="pl-c1">push</span>(<span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2Distance</span>.<span class="pl-smi">s_simplex</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">h</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2Distance</span>.<span class="pl-smi">s_saveA</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L56" class="blob-num js-line-number" data-line-number="56"></td>
        <td id="LC56" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">Vector_a2j_Number</span>(<span class="pl-c1">3</span>);<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2Distance</span>.<span class="pl-smi">s_saveB</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector_a2j_Number</span>(<span class="pl-c1">3</span>)});<span class="pl-c1">Y</span>.<span class="pl-en">b2DistanceInput</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-smi">k</span>.<span class="pl-en">b2DistanceOutput</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">pointA</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>;<span class="pl-c1">this</span>.<span class="pl-smi">pointB</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>};<span class="pl-smi">z</span>.<span class="pl-en">b2DistanceProxy</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-smi">z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Set</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">switch</span>(<span class="pl-smi">b</span>.<span class="pl-en">GetType</span>()){<span class="pl-k">case</span> <span class="pl-c1">K</span>.<span class="pl-smi">e_circleShape</span>:b<span class="pl-k">=</span>b <span class="pl-k">instanceof</span> <span class="pl-c1">F</span><span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>(<span class="pl-c1">1</span>,<span class="pl-c1">true</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">m_p</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_count</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_radius</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">m_radius</span>;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">K</span>.<span class="pl-smi">e_polygonShape</span>:b<span class="pl-k">=</span>b <span class="pl-k">instanceof</span> <span class="pl-c1">G</span><span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">m_vertices</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_count</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L57" class="blob-num js-line-number" data-line-number="57"></td>
        <td id="LC57" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>.<span class="pl-smi">m_vertexCount</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_radius</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">m_radius</span>;<span class="pl-k">break</span>;<span class="pl-k">default</span>:<span class="pl-smi">y</span>.<span class="pl-en">b2Assert</span>(<span class="pl-c1">false</span>)}};<span class="pl-smi">z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetSupport</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[<span class="pl-c1">0</span>].<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[<span class="pl-c1">0</span>].<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span>,m<span class="pl-k">=</span><span class="pl-c1">1</span>;m<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_count</span>;<span class="pl-k">++</span>m){<span class="pl-k">var</span> r<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[m].<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[m].<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span>;<span class="pl-k">if</span>(r<span class="pl-k">&gt;</span>f){e<span class="pl-k">=</span>m;f<span class="pl-k">=</span>r}}<span class="pl-k">return</span> e};<span class="pl-smi">z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetSupportVertex</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[<span class="pl-c1">0</span>].<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[<span class="pl-c1">0</span>].<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span>,m<span class="pl-k">=</span><span class="pl-c1">1</span>;m<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_count</span>;<span class="pl-k">++</span>m){<span class="pl-k">var</span> r<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[m].<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[m].<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span>;<span class="pl-k">if</span>(r<span class="pl-k">&gt;</span>f){e<span class="pl-k">=</span>m;f<span class="pl-k">=</span>r}}<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[e]};</td>
      </tr>
      <tr>
        <td id="L58" class="blob-num js-line-number" data-line-number="58"></td>
        <td id="LC58" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetVertexCount</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_count</span>};<span class="pl-smi">z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetVertex</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">if</span>(b<span class="pl-k">===</span><span class="pl-c1">undefined</span>)b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-smi">y</span>.<span class="pl-en">b2Assert</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;=</span>b<span class="pl-k">&amp;&amp;</span>b<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_count</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[b]};<span class="pl-smi">u</span>.<span class="pl-en">b2DynamicTree</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-smi">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2DynamicTree</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">m_freeList</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_root</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_insertionCount</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_path</span><span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-smi">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">CreateProxy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">AllocateNode</span>(),m<span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-smi">b2_aabbExtension</span>,r<span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-smi">b2_aabbExtension</span>;<span class="pl-smi">f</span>.<span class="pl-smi">aabb</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">x</span><span class="pl-k">-</span>m;<span class="pl-smi">f</span>.<span class="pl-smi">aabb</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>r;<span class="pl-smi">f</span>.<span class="pl-smi">aabb</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">x</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L59" class="blob-num js-line-number" data-line-number="59"></td>
        <td id="LC59" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>m;<span class="pl-smi">f</span>.<span class="pl-smi">aabb</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>r;<span class="pl-smi">f</span>.<span class="pl-smi">userData</span><span class="pl-k">=</span>e;<span class="pl-c1">this</span>.<span class="pl-en">InsertLeaf</span>(f);<span class="pl-k">return</span> f};<span class="pl-smi">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">DestroyProxy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-en">RemoveLeaf</span>(b);<span class="pl-c1">this</span>.<span class="pl-en">FreeNode</span>(b)};<span class="pl-smi">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">MoveProxy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>){<span class="pl-smi">y</span>.<span class="pl-en">b2Assert</span>(<span class="pl-smi">b</span>.<span class="pl-en">IsLeaf</span>());<span class="pl-k">if</span>(<span class="pl-smi">b</span>.<span class="pl-smi">aabb</span>.<span class="pl-en">Contains</span>(e))<span class="pl-k">return</span> <span class="pl-c1">false</span>;<span class="pl-c1">this</span>.<span class="pl-en">RemoveLeaf</span>(b);<span class="pl-k">var</span> m<span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-smi">b2_aabbExtension</span><span class="pl-k">+</span><span class="pl-smi">y</span>.<span class="pl-smi">b2_aabbMultiplier</span><span class="pl-k">*</span>(<span class="pl-smi">f</span>.<span class="pl-c1">x</span><span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">?</span><span class="pl-smi">f</span>.<span class="pl-c1">x</span><span class="pl-k">:</span><span class="pl-k">-</span><span class="pl-smi">f</span>.<span class="pl-c1">x</span>);f<span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-smi">b2_aabbExtension</span><span class="pl-k">+</span><span class="pl-smi">y</span>.<span class="pl-smi">b2_aabbMultiplier</span><span class="pl-k">*</span>(<span class="pl-smi">f</span>.<span class="pl-c1">y</span><span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">?</span><span class="pl-smi">f</span>.<span class="pl-c1">y</span><span class="pl-k">:</span><span class="pl-k">-</span><span class="pl-smi">f</span>.<span class="pl-c1">y</span>);<span class="pl-smi">b</span>.<span class="pl-smi">aabb</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">x</span><span class="pl-k">-</span>m;<span class="pl-smi">b</span>.<span class="pl-smi">aabb</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>f;<span class="pl-smi">b</span>.<span class="pl-smi">aabb</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">x</span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L60" class="blob-num js-line-number" data-line-number="60"></td>
        <td id="LC60" class="blob-code blob-code-inner js-file-line">m;<span class="pl-smi">b</span>.<span class="pl-smi">aabb</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>f;<span class="pl-c1">this</span>.<span class="pl-en">InsertLeaf</span>(b);<span class="pl-k">return</span> <span class="pl-c1">true</span>};<span class="pl-smi">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Rebalance</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">if</span>(b<span class="pl-k">===</span><span class="pl-c1">undefined</span>)b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_root</span><span class="pl-k">!=</span><span class="pl-c1">null</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span>b;e<span class="pl-k">++</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_root</span>,m<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-smi">f</span>.<span class="pl-en">IsLeaf</span>()<span class="pl-k">==</span><span class="pl-c1">false</span>;){f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_path</span><span class="pl-k">&gt;&gt;</span>m<span class="pl-k">&amp;</span><span class="pl-c1">1</span><span class="pl-k">?</span><span class="pl-smi">f</span>.<span class="pl-smi">child2</span><span class="pl-k">:</span><span class="pl-smi">f</span>.<span class="pl-smi">child1</span>;m<span class="pl-k">=</span>m<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">&amp;</span><span class="pl-c1">31</span>}<span class="pl-k">++</span><span class="pl-c1">this</span>.<span class="pl-smi">m_path</span>;<span class="pl-c1">this</span>.<span class="pl-en">RemoveLeaf</span>(f);<span class="pl-c1">this</span>.<span class="pl-en">InsertLeaf</span>(f)}};<span class="pl-smi">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetFatAABB</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-smi">b</span>.<span class="pl-smi">aabb</span>};<span class="pl-smi">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetUserData</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-smi">b</span>.<span class="pl-smi">userData</span>};<span class="pl-smi">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Query</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>){<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_root</span><span class="pl-k">!=</span><span class="pl-c1">null</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>,m<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(f[m<span class="pl-k">++</span>]<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L61" class="blob-num js-line-number" data-line-number="61"></td>
        <td id="LC61" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_root</span>;m<span class="pl-k">&gt;</span><span class="pl-c1">0</span>;){<span class="pl-k">var</span> r<span class="pl-k">=</span>f[<span class="pl-k">--</span>m];<span class="pl-k">if</span>(<span class="pl-smi">r</span>.<span class="pl-smi">aabb</span>.<span class="pl-en">TestOverlap</span>(e))<span class="pl-k">if</span>(<span class="pl-smi">r</span>.<span class="pl-en">IsLeaf</span>()){<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-en">b</span>(r))<span class="pl-k">break</span>}<span class="pl-k">else</span>{f[m<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-smi">child1</span>;f[m<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-smi">child2</span>}}}};<span class="pl-smi">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">RayCast</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>){<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_root</span><span class="pl-k">!=</span><span class="pl-c1">null</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">p1</span>,m<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">p2</span>,r<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">SubtractVV</span>(f,m);<span class="pl-smi">r</span>.<span class="pl-en">Normalize</span>();r<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">CrossFV</span>(<span class="pl-c1">1</span>,r);<span class="pl-k">var</span> s<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">AbsV</span>(r),v<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">maxFraction</span>,t<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">B</span>,x<span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-c1">0</span>;x<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>v<span class="pl-k">*</span>(<span class="pl-smi">m</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">f</span>.<span class="pl-c1">x</span>);<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>v<span class="pl-k">*</span>(<span class="pl-smi">m</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">f</span>.<span class="pl-c1">y</span>);<span class="pl-smi">t</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-smi">f</span>.<span class="pl-c1">x</span>,x);<span class="pl-smi">t</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-smi">f</span>.<span class="pl-c1">y</span>,<span class="pl-c1">C</span>);<span class="pl-smi">t</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-smi">f</span>.<span class="pl-c1">x</span>,x);<span class="pl-smi">t</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-smi">f</span>.<span class="pl-c1">y</span>,<span class="pl-c1">C</span>);<span class="pl-k">var</span> <span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>,<span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">J</span>[<span class="pl-c1">T</span><span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_root</span>;<span class="pl-c1">T</span><span class="pl-k">&gt;</span></td>
      </tr>
      <tr>
        <td id="L62" class="blob-num js-line-number" data-line-number="62"></td>
        <td id="LC62" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>;){v<span class="pl-k">=</span><span class="pl-c1">J</span>[<span class="pl-k">--</span><span class="pl-c1">T</span>];<span class="pl-k">if</span>(<span class="pl-smi">v</span>.<span class="pl-smi">aabb</span>.<span class="pl-en">TestOverlap</span>(t)<span class="pl-k">!=</span><span class="pl-c1">false</span>){x<span class="pl-k">=</span><span class="pl-smi">v</span>.<span class="pl-smi">aabb</span>.<span class="pl-en">GetCenter</span>();<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-smi">v</span>.<span class="pl-smi">aabb</span>.<span class="pl-en">GetExtents</span>();<span class="pl-k">if</span>(<span class="pl-k">!</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-smi">r</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>(<span class="pl-smi">f</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">x</span>.<span class="pl-c1">x</span>)<span class="pl-k">+</span><span class="pl-smi">r</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>(<span class="pl-smi">f</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">x</span>.<span class="pl-c1">y</span>))<span class="pl-k">-</span><span class="pl-smi">s</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">C</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">s</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">C</span>.<span class="pl-c1">y</span><span class="pl-k">&gt;</span><span class="pl-c1">0</span>))<span class="pl-k">if</span>(<span class="pl-smi">v</span>.<span class="pl-en">IsLeaf</span>()){x<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">S</span>;<span class="pl-smi">x</span>.<span class="pl-smi">p1</span><span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">p1</span>;<span class="pl-smi">x</span>.<span class="pl-smi">p2</span><span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">p2</span>;<span class="pl-smi">x</span>.<span class="pl-smi">maxFraction</span><span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">maxFraction</span>;v<span class="pl-k">=</span><span class="pl-en">b</span>(x,v);<span class="pl-k">if</span>(v<span class="pl-k">==</span><span class="pl-c1">0</span>)<span class="pl-k">break</span>;<span class="pl-k">if</span>(v<span class="pl-k">&gt;</span><span class="pl-c1">0</span>){x<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>v<span class="pl-k">*</span>(<span class="pl-smi">m</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">f</span>.<span class="pl-c1">x</span>);<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>v<span class="pl-k">*</span>(<span class="pl-smi">m</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">f</span>.<span class="pl-c1">y</span>);<span class="pl-smi">t</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-smi">f</span>.<span class="pl-c1">x</span>,x);<span class="pl-smi">t</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-smi">f</span>.<span class="pl-c1">y</span>,<span class="pl-c1">C</span>);<span class="pl-smi">t</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-smi">f</span>.<span class="pl-c1">x</span>,x);<span class="pl-smi">t</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-smi">f</span>.<span class="pl-c1">y</span>,<span class="pl-c1">C</span>)}}<span class="pl-k">else</span>{<span class="pl-c1">J</span>[<span class="pl-c1">T</span><span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-smi">v</span>.<span class="pl-smi">child1</span>;<span class="pl-c1">J</span>[<span class="pl-c1">T</span><span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-smi">v</span>.<span class="pl-smi">child2</span>}}}}};<span class="pl-smi">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">AllocateNode</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_freeList</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L63" class="blob-num js-line-number" data-line-number="63"></td>
        <td id="LC63" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_freeList</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_freeList</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">parent</span>;<span class="pl-smi">b</span>.<span class="pl-c1">parent</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-smi">b</span>.<span class="pl-smi">child1</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-smi">b</span>.<span class="pl-smi">child2</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">return</span> b}<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">H</span>};<span class="pl-smi">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">FreeNode</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-smi">b</span>.<span class="pl-c1">parent</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_freeList</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_freeList</span><span class="pl-k">=</span>b};<span class="pl-smi">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">InsertLeaf</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">++</span><span class="pl-c1">this</span>.<span class="pl-smi">m_insertionCount</span>;<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_root</span><span class="pl-k">==</span><span class="pl-c1">null</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_root</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">m_root</span>.<span class="pl-c1">parent</span><span class="pl-k">=</span><span class="pl-c1">null</span>}<span class="pl-k">else</span>{<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">aabb</span>.<span class="pl-en">GetCenter</span>(),f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_root</span>;<span class="pl-k">if</span>(<span class="pl-smi">f</span>.<span class="pl-en">IsLeaf</span>()<span class="pl-k">==</span><span class="pl-c1">false</span>){<span class="pl-k">do</span>{<span class="pl-k">var</span> m<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">child1</span>;f<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">child2</span>;f<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>((<span class="pl-smi">m</span>.<span class="pl-smi">aabb</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">m</span>.<span class="pl-smi">aabb</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">x</span>)<span class="pl-k">/</span><span class="pl-c1">2</span><span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-c1">x</span>)<span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>((<span class="pl-smi">m</span>.<span class="pl-smi">aabb</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-smi">m</span>.<span class="pl-smi">aabb</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">y</span>)<span class="pl-k">/</span></td>
      </tr>
      <tr>
        <td id="L64" class="blob-num js-line-number" data-line-number="64"></td>
        <td id="LC64" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">2</span><span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-c1">y</span>)<span class="pl-k">&lt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>((<span class="pl-smi">f</span>.<span class="pl-smi">aabb</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">f</span>.<span class="pl-smi">aabb</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">x</span>)<span class="pl-k">/</span><span class="pl-c1">2</span><span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-c1">x</span>)<span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>((<span class="pl-smi">f</span>.<span class="pl-smi">aabb</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-smi">f</span>.<span class="pl-smi">aabb</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">y</span>)<span class="pl-k">/</span><span class="pl-c1">2</span><span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-c1">y</span>)<span class="pl-k">?</span>m<span class="pl-k">:</span>f}<span class="pl-k">while</span>(<span class="pl-smi">f</span>.<span class="pl-en">IsLeaf</span>()<span class="pl-k">==</span><span class="pl-c1">false</span>)}e<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">parent</span>;m<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">AllocateNode</span>();<span class="pl-smi">m</span>.<span class="pl-c1">parent</span><span class="pl-k">=</span>e;<span class="pl-smi">m</span>.<span class="pl-smi">userData</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-smi">m</span>.<span class="pl-smi">aabb</span>.<span class="pl-en">Combine</span>(<span class="pl-smi">b</span>.<span class="pl-smi">aabb</span>,<span class="pl-smi">f</span>.<span class="pl-smi">aabb</span>);<span class="pl-k">if</span>(e){<span class="pl-k">if</span>(<span class="pl-smi">f</span>.<span class="pl-c1">parent</span>.<span class="pl-smi">child1</span><span class="pl-k">==</span>f)<span class="pl-smi">e</span>.<span class="pl-smi">child1</span><span class="pl-k">=</span>m;<span class="pl-k">else</span> <span class="pl-smi">e</span>.<span class="pl-smi">child2</span><span class="pl-k">=</span>m;<span class="pl-smi">m</span>.<span class="pl-smi">child1</span><span class="pl-k">=</span>f;<span class="pl-smi">m</span>.<span class="pl-smi">child2</span><span class="pl-k">=</span>b;<span class="pl-smi">f</span>.<span class="pl-c1">parent</span><span class="pl-k">=</span>m;<span class="pl-smi">b</span>.<span class="pl-c1">parent</span><span class="pl-k">=</span>m;<span class="pl-k">do</span>{<span class="pl-k">if</span>(<span class="pl-smi">e</span>.<span class="pl-smi">aabb</span>.<span class="pl-en">Contains</span>(<span class="pl-smi">m</span>.<span class="pl-smi">aabb</span>))<span class="pl-k">break</span>;<span class="pl-smi">e</span>.<span class="pl-smi">aabb</span>.<span class="pl-en">Combine</span>(<span class="pl-smi">e</span>.<span class="pl-smi">child1</span>.<span class="pl-smi">aabb</span>,<span class="pl-smi">e</span>.<span class="pl-smi">child2</span>.<span class="pl-smi">aabb</span>);m<span class="pl-k">=</span>e;e<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">parent</span>}<span class="pl-k">while</span>(e)}<span class="pl-k">else</span>{<span class="pl-smi">m</span>.<span class="pl-smi">child1</span><span class="pl-k">=</span>f;<span class="pl-smi">m</span>.<span class="pl-smi">child2</span><span class="pl-k">=</span>b;<span class="pl-smi">f</span>.<span class="pl-c1">parent</span><span class="pl-k">=</span>m;<span class="pl-c1">this</span>.<span class="pl-smi">m_root</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">parent</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L65" class="blob-num js-line-number" data-line-number="65"></td>
        <td id="LC65" class="blob-code blob-code-inner js-file-line">m}}};<span class="pl-smi">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">RemoveLeaf</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">if</span>(b<span class="pl-k">==</span><span class="pl-c1">this</span>.<span class="pl-smi">m_root</span>)<span class="pl-c1">this</span>.<span class="pl-smi">m_root</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">else</span>{<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">parent</span>,f<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">parent</span>;b<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">child1</span><span class="pl-k">==</span>b<span class="pl-k">?</span><span class="pl-smi">e</span>.<span class="pl-smi">child2</span><span class="pl-k">:</span><span class="pl-smi">e</span>.<span class="pl-smi">child1</span>;<span class="pl-k">if</span>(f){<span class="pl-k">if</span>(<span class="pl-smi">f</span>.<span class="pl-smi">child1</span><span class="pl-k">==</span>e)<span class="pl-smi">f</span>.<span class="pl-smi">child1</span><span class="pl-k">=</span>b;<span class="pl-k">else</span> <span class="pl-smi">f</span>.<span class="pl-smi">child2</span><span class="pl-k">=</span>b;<span class="pl-smi">b</span>.<span class="pl-c1">parent</span><span class="pl-k">=</span>f;<span class="pl-k">for</span>(<span class="pl-c1">this</span>.<span class="pl-en">FreeNode</span>(e);f;){e<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">aabb</span>;<span class="pl-smi">f</span>.<span class="pl-smi">aabb</span><span class="pl-k">=</span><span class="pl-c1">B</span>.<span class="pl-en">Combine</span>(<span class="pl-smi">f</span>.<span class="pl-smi">child1</span>.<span class="pl-smi">aabb</span>,<span class="pl-smi">f</span>.<span class="pl-smi">child2</span>.<span class="pl-smi">aabb</span>);<span class="pl-k">if</span>(<span class="pl-smi">e</span>.<span class="pl-en">Contains</span>(<span class="pl-smi">f</span>.<span class="pl-smi">aabb</span>))<span class="pl-k">break</span>;f<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">parent</span>}}<span class="pl-k">else</span>{<span class="pl-c1">this</span>.<span class="pl-smi">m_root</span><span class="pl-k">=</span>b;<span class="pl-smi">b</span>.<span class="pl-c1">parent</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-en">FreeNode</span>(e)}}};<span class="pl-c1">D</span>.<span class="pl-en">b2DynamicTreeBroadPhase</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">m_tree</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">u</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_moveBuffer</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_pairBuffer</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_pairCount</span><span class="pl-k">=</span><span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L66" class="blob-num js-line-number" data-line-number="66"></td>
        <td id="LC66" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">D</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">CreateProxy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_tree</span>.<span class="pl-en">CreateProxy</span>(b,e);<span class="pl-k">++</span><span class="pl-c1">this</span>.<span class="pl-smi">m_proxyCount</span>;<span class="pl-c1">this</span>.<span class="pl-en">BufferMove</span>(f);<span class="pl-k">return</span> f};<span class="pl-c1">D</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">DestroyProxy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-en">UnBufferMove</span>(b);<span class="pl-k">--</span><span class="pl-c1">this</span>.<span class="pl-smi">m_proxyCount</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_tree</span>.<span class="pl-en">DestroyProxy</span>(b)};<span class="pl-c1">D</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">MoveProxy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_tree</span>.<span class="pl-en">MoveProxy</span>(b,e,f)<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-en">BufferMove</span>(b)};<span class="pl-c1">D</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">TestOverlap</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_tree</span>.<span class="pl-en">GetFatAABB</span>(b),m<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_tree</span>.<span class="pl-en">GetFatAABB</span>(e);<span class="pl-k">return</span> <span class="pl-smi">f</span>.<span class="pl-en">TestOverlap</span>(m)};<span class="pl-c1">D</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetUserData</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_tree</span>.<span class="pl-en">GetUserData</span>(b)};</td>
      </tr>
      <tr>
        <td id="L67" class="blob-num js-line-number" data-line-number="67"></td>
        <td id="LC67" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">D</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetFatAABB</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_tree</span>.<span class="pl-en">GetFatAABB</span>(b)};<span class="pl-c1">D</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetProxyCount</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_proxyCount</span>};<span class="pl-c1">D</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">UpdatePairs</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">this</span>;<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">m_pairCount</span><span class="pl-k">=</span><span class="pl-c1">0</span>,m;<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span><span class="pl-smi">e</span>.<span class="pl-smi">m_moveBuffer</span>.<span class="pl-c1">length</span>;<span class="pl-k">++</span>f){m<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">m_moveBuffer</span>[f];<span class="pl-k">var</span> r<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">m_tree</span>.<span class="pl-en">GetFatAABB</span>(m);<span class="pl-smi">e</span>.<span class="pl-smi">m_tree</span>.<span class="pl-en">Query</span>(<span class="pl-k">function</span>(<span class="pl-smi">t</span>){<span class="pl-k">if</span>(t<span class="pl-k">==</span>m)<span class="pl-k">return</span> <span class="pl-c1">true</span>;<span class="pl-k">if</span>(<span class="pl-smi">e</span>.<span class="pl-smi">m_pairCount</span><span class="pl-k">==</span><span class="pl-smi">e</span>.<span class="pl-smi">m_pairBuffer</span>.<span class="pl-c1">length</span>)<span class="pl-smi">e</span>.<span class="pl-smi">m_pairBuffer</span>[<span class="pl-smi">e</span>.<span class="pl-smi">m_pairCount</span>]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">O</span>;<span class="pl-k">var</span> x<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">m_pairBuffer</span>[<span class="pl-smi">e</span>.<span class="pl-smi">m_pairCount</span>];<span class="pl-smi">x</span>.<span class="pl-smi">proxyA</span><span class="pl-k">=</span>t<span class="pl-k">&lt;</span>m<span class="pl-k">?</span>t<span class="pl-k">:</span>m;<span class="pl-smi">x</span>.<span class="pl-smi">proxyB</span><span class="pl-k">=</span>t<span class="pl-k">&gt;=</span>m<span class="pl-k">?</span>t<span class="pl-k">:</span>m;<span class="pl-k">++</span><span class="pl-smi">e</span>.<span class="pl-smi">m_pairCount</span>;<span class="pl-k">return</span> <span class="pl-c1">true</span>},</td>
      </tr>
      <tr>
        <td id="L68" class="blob-num js-line-number" data-line-number="68"></td>
        <td id="LC68" class="blob-code blob-code-inner js-file-line">r)}<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">m_moveBuffer</span>.<span class="pl-c1">length</span><span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span><span class="pl-smi">e</span>.<span class="pl-smi">m_pairCount</span>;){r<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">m_pairBuffer</span>[f];<span class="pl-k">var</span> s<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">m_tree</span>.<span class="pl-en">GetUserData</span>(<span class="pl-smi">r</span>.<span class="pl-smi">proxyA</span>),v<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">m_tree</span>.<span class="pl-en">GetUserData</span>(<span class="pl-smi">r</span>.<span class="pl-smi">proxyB</span>);<span class="pl-en">b</span>(s,v);<span class="pl-k">for</span>(<span class="pl-k">++</span>f;f<span class="pl-k">&lt;</span><span class="pl-smi">e</span>.<span class="pl-smi">m_pairCount</span>;){s<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">m_pairBuffer</span>[f];<span class="pl-k">if</span>(<span class="pl-smi">s</span>.<span class="pl-smi">proxyA</span><span class="pl-k">!=</span><span class="pl-smi">r</span>.<span class="pl-smi">proxyA</span><span class="pl-k">||</span><span class="pl-smi">s</span>.<span class="pl-smi">proxyB</span><span class="pl-k">!=</span><span class="pl-smi">r</span>.<span class="pl-smi">proxyB</span>)<span class="pl-k">break</span>;<span class="pl-k">++</span>f}}};<span class="pl-c1">D</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Query</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_tree</span>.<span class="pl-en">Query</span>(b,e)};<span class="pl-c1">D</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">RayCast</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_tree</span>.<span class="pl-en">RayCast</span>(b,e)};<span class="pl-c1">D</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Validate</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">D</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Rebalance</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">if</span>(b<span class="pl-k">===</span><span class="pl-c1">undefined</span>)b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_tree</span>.<span class="pl-en">Rebalance</span>(b)};<span class="pl-c1">D</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">BufferMove</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L69" class="blob-num js-line-number" data-line-number="69"></td>
        <td id="LC69" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_moveBuffer</span>[<span class="pl-c1">this</span>.<span class="pl-smi">m_moveBuffer</span>.<span class="pl-c1">length</span>]<span class="pl-k">=</span>b};<span class="pl-c1">D</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">UnBufferMove</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_moveBuffer</span>.<span class="pl-c1">splice</span>(<span class="pl-c1">parseInt</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_moveBuffer</span>.<span class="pl-c1">indexOf</span>(b)),<span class="pl-c1">1</span>)};<span class="pl-c1">D</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ComparePairs</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">0</span>};<span class="pl-c1">D</span>.<span class="pl-smi">__implements</span><span class="pl-k">=</span>{};<span class="pl-c1">D</span>.<span class="pl-smi">__implements</span>[g]<span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-c1">H</span>.<span class="pl-en">b2DynamicTreeNode</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">aabb</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">B</span>};<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">IsLeaf</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">child1</span><span class="pl-k">==</span><span class="pl-c1">null</span>};<span class="pl-c1">O</span>.<span class="pl-en">b2DynamicTreePair</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">E</span>.<span class="pl-en">b2Manifold</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">m_pointCount</span><span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2Manifold</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">m_points</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>(<span class="pl-smi">y</span>.<span class="pl-smi">b2_maxManifoldPoints</span>);</td>
      </tr>
      <tr>
        <td id="L70" class="blob-num js-line-number" data-line-number="70"></td>
        <td id="LC70" class="blob-code blob-code-inner js-file-line"><span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-smi">y</span>.<span class="pl-smi">b2_maxManifoldPoints</span>;b<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-smi">m_points</span>[b]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">R</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_localPlaneNormal</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_localPoint</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Reset</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-smi">y</span>.<span class="pl-smi">b2_maxManifoldPoints</span>;b<span class="pl-k">++</span>)(<span class="pl-c1">this</span>.<span class="pl-smi">m_points</span>[b]<span class="pl-k">instanceof</span> <span class="pl-c1">R</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">m_points</span>[b]<span class="pl-k">:</span><span class="pl-c1">null</span>).<span class="pl-en">Reset</span>();<span class="pl-c1">this</span>.<span class="pl-smi">m_localPlaneNormal</span>.<span class="pl-en">SetZero</span>();<span class="pl-c1">this</span>.<span class="pl-smi">m_localPoint</span>.<span class="pl-en">SetZero</span>();<span class="pl-c1">this</span>.<span class="pl-smi">m_pointCount</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_type</span><span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Set</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_pointCount</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">m_pointCount</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span><span class="pl-smi">y</span>.<span class="pl-smi">b2_maxManifoldPoints</span>;e<span class="pl-k">++</span>)(<span class="pl-c1">this</span>.<span class="pl-smi">m_points</span>[e]<span class="pl-k">instanceof</span> <span class="pl-c1">R</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">m_points</span>[e]<span class="pl-k">:</span><span class="pl-c1">null</span>).<span class="pl-en">Set</span>(<span class="pl-smi">b</span>.<span class="pl-smi">m_points</span>[e]);</td>
      </tr>
      <tr>
        <td id="L71" class="blob-num js-line-number" data-line-number="71"></td>
        <td id="LC71" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_localPlaneNormal</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">b</span>.<span class="pl-smi">m_localPlaneNormal</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_localPoint</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">b</span>.<span class="pl-smi">m_localPoint</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_type</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">m_type</span>};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">E</span>;<span class="pl-smi">b</span>.<span class="pl-en">Set</span>(<span class="pl-c1">this</span>);<span class="pl-k">return</span> b};<span class="pl-smi">Box2D</span>.<span class="pl-smi">postDefs</span>.<span class="pl-c1">push</span>(<span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2Manifold</span>.<span class="pl-smi">e_circles</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2Manifold</span>.<span class="pl-smi">e_faceA</span><span class="pl-k">=</span><span class="pl-c1">2</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2Manifold</span>.<span class="pl-smi">e_faceB</span><span class="pl-k">=</span><span class="pl-c1">4</span>});<span class="pl-c1">R</span>.<span class="pl-en">b2ManifoldPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">m_localPoint</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_id</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">L</span>};<span class="pl-c1">R</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2ManifoldPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-en">Reset</span>()};<span class="pl-c1">R</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Reset</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">m_localPoint</span>.<span class="pl-en">SetZero</span>();<span class="pl-c1">this</span>.<span class="pl-smi">m_tangentImpulse</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L72" class="blob-num js-line-number" data-line-number="72"></td>
        <td id="LC72" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_normalImpulse</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_id</span>.<span class="pl-smi">key</span><span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">R</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Set</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_localPoint</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">b</span>.<span class="pl-smi">m_localPoint</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_normalImpulse</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">m_normalImpulse</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_tangentImpulse</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">m_tangentImpulse</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_id</span>.<span class="pl-en">Set</span>(<span class="pl-smi">b</span>.<span class="pl-smi">m_id</span>)};<span class="pl-c1">N</span>.<span class="pl-en">b2Point</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">p</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>};<span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Support</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">p</span>};<span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetFirstVertex</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">p</span>};<span class="pl-c1">S</span>.<span class="pl-en">b2RayCastInput</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">p1</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>;<span class="pl-c1">this</span>.<span class="pl-smi">p2</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2RayCastInput</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>){<span class="pl-k">if</span>(b<span class="pl-k">===</span><span class="pl-c1">undefined</span>)b<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(e<span class="pl-k">===</span><span class="pl-c1">undefined</span>)e<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(f<span class="pl-k">===</span><span class="pl-c1">undefined</span>)f<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L73" class="blob-num js-line-number" data-line-number="73"></td>
        <td id="LC73" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">1</span>;b<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">p1</span>.<span class="pl-en">SetV</span>(b);e<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">p2</span>.<span class="pl-en">SetV</span>(e);<span class="pl-c1">this</span>.<span class="pl-smi">maxFraction</span><span class="pl-k">=</span>f};<span class="pl-smi">aa</span>.<span class="pl-en">b2RayCastOutput</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">normal</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>};<span class="pl-c1">Z</span>.<span class="pl-en">b2Segment</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">p1</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>;<span class="pl-c1">this</span>.<span class="pl-smi">p2</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>};<span class="pl-c1">Z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">TestSegment</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">m</span>){<span class="pl-k">if</span>(m<span class="pl-k">===</span><span class="pl-c1">undefined</span>)m<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> r<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">p1</span>,s<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">p2</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">r</span>.<span class="pl-c1">x</span>,v<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">p2</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">r</span>.<span class="pl-c1">y</span>;f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">p2</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">p1</span>.<span class="pl-c1">y</span>;<span class="pl-k">var</span> t<span class="pl-k">=</span><span class="pl-k">-</span>(<span class="pl-c1">this</span>.<span class="pl-smi">p2</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">p1</span>.<span class="pl-c1">x</span>),x<span class="pl-k">=</span><span class="pl-c1">100</span><span class="pl-k">*</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>,<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-k">-</span>(s<span class="pl-k">*</span>f<span class="pl-k">+</span>v<span class="pl-k">*</span>t);<span class="pl-k">if</span>(<span class="pl-c1">C</span><span class="pl-k">&gt;</span>x){<span class="pl-k">var</span> <span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">p1</span>.<span class="pl-c1">x</span>,<span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">p1</span>.<span class="pl-c1">y</span>;r<span class="pl-k">=</span><span class="pl-c1">J</span><span class="pl-k">*</span>f<span class="pl-k">+</span><span class="pl-c1">T</span><span class="pl-k">*</span>t;<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;=</span>r<span class="pl-k">&amp;&amp;</span>r<span class="pl-k">&lt;=</span>m<span class="pl-k">*</span><span class="pl-c1">C</span>){m<span class="pl-k">=</span><span class="pl-k">-</span>s<span class="pl-k">*</span><span class="pl-c1">T</span><span class="pl-k">+</span>v<span class="pl-k">*</span><span class="pl-c1">J</span>;<span class="pl-k">if</span>(<span class="pl-k">-</span>x<span class="pl-k">*</span><span class="pl-c1">C</span><span class="pl-k">&lt;=</span>m<span class="pl-k">&amp;&amp;</span>m<span class="pl-k">&lt;=</span><span class="pl-c1">C</span><span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">+</span>x)){r<span class="pl-k">/=</span><span class="pl-c1">C</span>;m<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(f<span class="pl-k">*</span>f<span class="pl-k">+</span>t<span class="pl-k">*</span>t);f<span class="pl-k">/=</span>m;t<span class="pl-k">/=</span>m;b[<span class="pl-c1">0</span>]<span class="pl-k">=</span>r;<span class="pl-smi">e</span>.<span class="pl-en">Set</span>(f,</td>
      </tr>
      <tr>
        <td id="L74" class="blob-num js-line-number" data-line-number="74"></td>
        <td id="LC74" class="blob-code blob-code-inner js-file-line">t);<span class="pl-k">return</span> <span class="pl-c1">true</span>}}}<span class="pl-k">return</span> <span class="pl-c1">false</span>};<span class="pl-c1">Z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Extend</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-en">ExtendForward</span>(b);<span class="pl-c1">this</span>.<span class="pl-en">ExtendBackward</span>(b)};<span class="pl-c1">Z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ExtendForward</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">p2</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">p1</span>.<span class="pl-c1">x</span>,f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">p2</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">p1</span>.<span class="pl-c1">y</span>;b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(e<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">?</span>(<span class="pl-smi">b</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">p1</span>.<span class="pl-c1">x</span>)<span class="pl-k">/</span>e<span class="pl-k">:</span>e<span class="pl-k">&lt;</span><span class="pl-c1">0</span><span class="pl-k">?</span>(<span class="pl-smi">b</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">p1</span>.<span class="pl-c1">x</span>)<span class="pl-k">/</span>e<span class="pl-k">:</span><span class="pl-c1">Number</span>.<span class="pl-c1">POSITIVE_INFINITY</span>,f<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">?</span>(<span class="pl-smi">b</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">p1</span>.<span class="pl-c1">y</span>)<span class="pl-k">/</span>f<span class="pl-k">:</span>f<span class="pl-k">&lt;</span><span class="pl-c1">0</span><span class="pl-k">?</span>(<span class="pl-smi">b</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">p1</span>.<span class="pl-c1">y</span>)<span class="pl-k">/</span>f<span class="pl-k">:</span><span class="pl-c1">Number</span>.<span class="pl-c1">POSITIVE_INFINITY</span>);<span class="pl-c1">this</span>.<span class="pl-smi">p2</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">p1</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>e<span class="pl-k">*</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">p2</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">p1</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>f<span class="pl-k">*</span>b};<span class="pl-c1">Z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ExtendBackward</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">p2</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">p1</span>.<span class="pl-c1">x</span>,</td>
      </tr>
      <tr>
        <td id="L75" class="blob-num js-line-number" data-line-number="75"></td>
        <td id="LC75" class="blob-code blob-code-inner js-file-line">f<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">p2</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">p1</span>.<span class="pl-c1">y</span>;b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(e<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">?</span>(<span class="pl-smi">b</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">p2</span>.<span class="pl-c1">x</span>)<span class="pl-k">/</span>e<span class="pl-k">:</span>e<span class="pl-k">&lt;</span><span class="pl-c1">0</span><span class="pl-k">?</span>(<span class="pl-smi">b</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">p2</span>.<span class="pl-c1">x</span>)<span class="pl-k">/</span>e<span class="pl-k">:</span><span class="pl-c1">Number</span>.<span class="pl-c1">POSITIVE_INFINITY</span>,f<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">?</span>(<span class="pl-smi">b</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">p2</span>.<span class="pl-c1">y</span>)<span class="pl-k">/</span>f<span class="pl-k">:</span>f<span class="pl-k">&lt;</span><span class="pl-c1">0</span><span class="pl-k">?</span>(<span class="pl-smi">b</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">p2</span>.<span class="pl-c1">y</span>)<span class="pl-k">/</span>f<span class="pl-k">:</span><span class="pl-c1">Number</span>.<span class="pl-c1">POSITIVE_INFINITY</span>);<span class="pl-c1">this</span>.<span class="pl-smi">p1</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">p2</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>e<span class="pl-k">*</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">p1</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">p2</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>f<span class="pl-k">*</span>b};<span class="pl-smi">d</span>.<span class="pl-en">b2SeparationFunction</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">m_localPoint</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>};<span class="pl-smi">d</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Initialize</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">m</span>,<span class="pl-smi">r</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_proxyA</span><span class="pl-k">=</span>e;<span class="pl-c1">this</span>.<span class="pl-smi">m_proxyB</span><span class="pl-k">=</span>m;<span class="pl-k">var</span> s<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(<span class="pl-smi">b</span>.<span class="pl-smi">count</span>);<span class="pl-smi">y</span>.<span class="pl-en">b2Assert</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;</span>s<span class="pl-k">&amp;&amp;</span>s<span class="pl-k">&lt;</span><span class="pl-c1">3</span>);<span class="pl-k">var</span> v,t,x,<span class="pl-c1">C</span>,<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-c1">C</span><span class="pl-k">=</span>x<span class="pl-k">=</span>m<span class="pl-k">=</span>e<span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(s<span class="pl-k">==</span></td>
      </tr>
      <tr>
        <td id="L76" class="blob-num js-line-number" data-line-number="76"></td>
        <td id="LC76" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">1</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_type</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">e_points</span>;v<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_proxyA</span>.<span class="pl-en">GetVertex</span>(<span class="pl-smi">b</span>.<span class="pl-smi">indexA</span>[<span class="pl-c1">0</span>]);t<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_proxyB</span>.<span class="pl-en">GetVertex</span>(<span class="pl-smi">b</span>.<span class="pl-smi">indexB</span>[<span class="pl-c1">0</span>]);s<span class="pl-k">=</span>v;b<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">R</span>;e<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-smi">b</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">s</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">b</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">s</span>.<span class="pl-c1">y</span>);m<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-smi">b</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">s</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">b</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">s</span>.<span class="pl-c1">y</span>);s<span class="pl-k">=</span>t;b<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-c1">R</span>;x<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-smi">b</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">s</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">b</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">s</span>.<span class="pl-c1">y</span>);<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-smi">b</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">s</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">b</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">s</span>.<span class="pl-c1">y</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>x<span class="pl-k">-</span>e;<span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">C</span><span class="pl-k">-</span>m;<span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-en">Normalize</span>()}<span class="pl-k">else</span>{<span class="pl-k">if</span>(<span class="pl-smi">b</span>.<span class="pl-smi">indexB</span>[<span class="pl-c1">0</span>]<span class="pl-k">==</span><span class="pl-smi">b</span>.<span class="pl-smi">indexB</span>[<span class="pl-c1">1</span>]){<span class="pl-c1">this</span>.<span class="pl-smi">m_type</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">e_faceA</span>;e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_proxyA</span>.<span class="pl-en">GetVertex</span>(<span class="pl-smi">b</span>.<span class="pl-smi">indexA</span>[<span class="pl-c1">0</span>]);m<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_proxyA</span>.<span class="pl-en">GetVertex</span>(<span class="pl-smi">b</span>.<span class="pl-smi">indexA</span>[<span class="pl-c1">1</span>]);t<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_proxyB</span>.<span class="pl-en">GetVertex</span>(<span class="pl-smi">b</span>.<span class="pl-smi">indexB</span>[<span class="pl-c1">0</span>]);</td>
      </tr>
      <tr>
        <td id="L77" class="blob-num js-line-number" data-line-number="77"></td>
        <td id="LC77" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_localPoint</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(<span class="pl-smi">e</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">m</span>.<span class="pl-c1">x</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_localPoint</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(<span class="pl-smi">e</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-smi">m</span>.<span class="pl-c1">y</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span><span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">CrossVF</span>(<span class="pl-smi">w</span>.<span class="pl-en">SubtractVV</span>(m,e),<span class="pl-c1">1</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-en">Normalize</span>();s<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>;b<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">R</span>;<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">s</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">b</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">s</span>.<span class="pl-c1">y</span>;<span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">s</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">b</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">s</span>.<span class="pl-c1">y</span>;s<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localPoint</span>;b<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">R</span>;e<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-smi">b</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">s</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">b</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">s</span>.<span class="pl-c1">y</span>);m<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-smi">b</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">s</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">b</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">s</span>.<span class="pl-c1">y</span>);s<span class="pl-k">=</span>t;b<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-c1">R</span>;x<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-smi">b</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">s</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">b</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">s</span>.<span class="pl-c1">y</span>);<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-smi">b</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">s</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">b</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">s</span>.<span class="pl-c1">y</span>);<span class="pl-c1">J</span><span class="pl-k">=</span>(x<span class="pl-k">-</span>e)<span class="pl-k">*</span><span class="pl-c1">J</span><span class="pl-k">+</span>(<span class="pl-c1">C</span><span class="pl-k">-</span>m)<span class="pl-k">*</span><span class="pl-c1">T</span>}<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-smi">b</span>.<span class="pl-smi">indexA</span>[<span class="pl-c1">0</span>]<span class="pl-k">==</span><span class="pl-smi">b</span>.<span class="pl-smi">indexA</span>[<span class="pl-c1">0</span>]){<span class="pl-c1">this</span>.<span class="pl-smi">m_type</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">e_faceB</span>;x<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_proxyB</span>.<span class="pl-en">GetVertex</span>(<span class="pl-smi">b</span>.<span class="pl-smi">indexB</span>[<span class="pl-c1">0</span>]);</td>
      </tr>
      <tr>
        <td id="L78" class="blob-num js-line-number" data-line-number="78"></td>
        <td id="LC78" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_proxyB</span>.<span class="pl-en">GetVertex</span>(<span class="pl-smi">b</span>.<span class="pl-smi">indexB</span>[<span class="pl-c1">1</span>]);v<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_proxyA</span>.<span class="pl-en">GetVertex</span>(<span class="pl-smi">b</span>.<span class="pl-smi">indexA</span>[<span class="pl-c1">0</span>]);<span class="pl-c1">this</span>.<span class="pl-smi">m_localPoint</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(<span class="pl-smi">x</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">C</span>.<span class="pl-c1">x</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_localPoint</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(<span class="pl-smi">x</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">C</span>.<span class="pl-c1">y</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span><span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">CrossVF</span>(<span class="pl-smi">w</span>.<span class="pl-en">SubtractVV</span>(<span class="pl-c1">C</span>,x),<span class="pl-c1">1</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-en">Normalize</span>();s<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>;b<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-c1">R</span>;<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">s</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">b</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">s</span>.<span class="pl-c1">y</span>;<span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">s</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">b</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">s</span>.<span class="pl-c1">y</span>;s<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localPoint</span>;b<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-c1">R</span>;x<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-smi">b</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">s</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">b</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">s</span>.<span class="pl-c1">y</span>);<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-smi">b</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">s</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">b</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">s</span>.<span class="pl-c1">y</span>);s<span class="pl-k">=</span>v;b<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">R</span>;e<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-smi">b</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">s</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">b</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">s</span>.<span class="pl-c1">y</span>);m<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-smi">b</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">s</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">b</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">s</span>.<span class="pl-c1">y</span>);<span class="pl-c1">J</span><span class="pl-k">=</span>(e<span class="pl-k">-</span></td>
      </tr>
      <tr>
        <td id="L79" class="blob-num js-line-number" data-line-number="79"></td>
        <td id="LC79" class="blob-code blob-code-inner js-file-line">x)<span class="pl-k">*</span><span class="pl-c1">J</span><span class="pl-k">+</span>(m<span class="pl-k">-</span><span class="pl-c1">C</span>)<span class="pl-k">*</span><span class="pl-c1">T</span>}<span class="pl-k">else</span>{e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_proxyA</span>.<span class="pl-en">GetVertex</span>(<span class="pl-smi">b</span>.<span class="pl-smi">indexA</span>[<span class="pl-c1">0</span>]);m<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_proxyA</span>.<span class="pl-en">GetVertex</span>(<span class="pl-smi">b</span>.<span class="pl-smi">indexA</span>[<span class="pl-c1">1</span>]);x<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_proxyB</span>.<span class="pl-en">GetVertex</span>(<span class="pl-smi">b</span>.<span class="pl-smi">indexB</span>[<span class="pl-c1">0</span>]);<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_proxyB</span>.<span class="pl-en">GetVertex</span>(<span class="pl-smi">b</span>.<span class="pl-smi">indexB</span>[<span class="pl-c1">1</span>]);<span class="pl-smi">w</span>.<span class="pl-en">MulX</span>(f,v);v<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">MulMV</span>(<span class="pl-smi">f</span>.<span class="pl-c1">R</span>,<span class="pl-smi">w</span>.<span class="pl-en">SubtractVV</span>(m,e));<span class="pl-smi">w</span>.<span class="pl-en">MulX</span>(r,t);<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">MulMV</span>(<span class="pl-smi">r</span>.<span class="pl-c1">R</span>,<span class="pl-smi">w</span>.<span class="pl-en">SubtractVV</span>(<span class="pl-c1">C</span>,x));r<span class="pl-k">=</span><span class="pl-smi">v</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">v</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">v</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">v</span>.<span class="pl-c1">y</span>;t<span class="pl-k">=</span><span class="pl-c1">J</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">J</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">J</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">J</span>.<span class="pl-c1">y</span>;b<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">SubtractVV</span>(<span class="pl-c1">J</span>,v);f<span class="pl-k">=</span><span class="pl-smi">v</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">v</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span>;b<span class="pl-k">=</span><span class="pl-c1">J</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">J</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span>;v<span class="pl-k">=</span><span class="pl-smi">v</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">J</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">v</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">J</span>.<span class="pl-c1">y</span>;<span class="pl-c1">T</span><span class="pl-k">=</span>r<span class="pl-k">*</span>t<span class="pl-k">-</span>v<span class="pl-k">*</span>v;<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-c1">T</span><span class="pl-k">!=</span><span class="pl-c1">0</span>)<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">Clamp</span>((v<span class="pl-k">*</span>b<span class="pl-k">-</span>f<span class="pl-k">*</span>t)<span class="pl-k">/</span><span class="pl-c1">T</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-k">if</span>((v<span class="pl-k">*</span><span class="pl-c1">J</span><span class="pl-k">+</span>b)<span class="pl-k">/</span>t<span class="pl-k">&lt;</span><span class="pl-c1">0</span>)<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">Clamp</span>((v<span class="pl-k">-</span>f)<span class="pl-k">/</span>r,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);v<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>;<span class="pl-smi">v</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">J</span><span class="pl-k">*</span>(<span class="pl-smi">m</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-c1">x</span>);<span class="pl-smi">v</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">J</span><span class="pl-k">*</span>(<span class="pl-smi">m</span>.<span class="pl-c1">y</span><span class="pl-k">-</span></td>
      </tr>
      <tr>
        <td id="L80" class="blob-num js-line-number" data-line-number="80"></td>
        <td id="LC80" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">e</span>.<span class="pl-c1">y</span>);t<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>;<span class="pl-smi">t</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">x</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">J</span><span class="pl-k">*</span>(<span class="pl-c1">C</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">x</span>.<span class="pl-c1">x</span>);<span class="pl-smi">t</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">x</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">J</span><span class="pl-k">*</span>(<span class="pl-c1">C</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">x</span>.<span class="pl-c1">y</span>);<span class="pl-k">if</span>(<span class="pl-c1">J</span><span class="pl-k">==</span><span class="pl-c1">0</span><span class="pl-k">||</span><span class="pl-c1">J</span><span class="pl-k">==</span><span class="pl-c1">1</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_type</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">e_faceB</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span><span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">CrossVF</span>(<span class="pl-smi">w</span>.<span class="pl-en">SubtractVV</span>(<span class="pl-c1">C</span>,x),<span class="pl-c1">1</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-en">Normalize</span>();<span class="pl-c1">this</span>.<span class="pl-smi">m_localPoint</span><span class="pl-k">=</span>t}<span class="pl-k">else</span>{<span class="pl-c1">this</span>.<span class="pl-smi">m_type</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">e_faceA</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span><span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">CrossVF</span>(<span class="pl-smi">w</span>.<span class="pl-en">SubtractVV</span>(m,e),<span class="pl-c1">1</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_localPoint</span><span class="pl-k">=</span>v}}<span class="pl-c1">J</span><span class="pl-k">&lt;</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-en">NegativeSelf</span>()}};<span class="pl-smi">d</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Evaluate</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>){<span class="pl-k">var</span> f,m,r<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">switch</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_type</span>){<span class="pl-k">case</span> <span class="pl-smi">d</span>.<span class="pl-smi">e_points</span>:f<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">MulTMV</span>(<span class="pl-smi">b</span>.<span class="pl-c1">R</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>);m<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">MulTMV</span>(<span class="pl-smi">e</span>.<span class="pl-c1">R</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-en">GetNegative</span>());f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_proxyA</span>.<span class="pl-en">GetSupportVertex</span>(f);m<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_proxyB</span>.<span class="pl-en">GetSupportVertex</span>(m);</td>
      </tr>
      <tr>
        <td id="L81" class="blob-num js-line-number" data-line-number="81"></td>
        <td id="LC81" class="blob-code blob-code-inner js-file-line">f<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">MulX</span>(b,f);m<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">MulX</span>(e,m);<span class="pl-k">return</span> r<span class="pl-k">=</span>(<span class="pl-smi">m</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">f</span>.<span class="pl-c1">x</span>)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-smi">m</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">f</span>.<span class="pl-c1">y</span>)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">y</span>;<span class="pl-k">case</span> <span class="pl-smi">d</span>.<span class="pl-smi">e_faceA</span>:r<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">MulMV</span>(<span class="pl-smi">b</span>.<span class="pl-c1">R</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>);f<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">MulX</span>(b,<span class="pl-c1">this</span>.<span class="pl-smi">m_localPoint</span>);m<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">MulTMV</span>(<span class="pl-smi">e</span>.<span class="pl-c1">R</span>,<span class="pl-smi">r</span>.<span class="pl-en">GetNegative</span>());m<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_proxyB</span>.<span class="pl-en">GetSupportVertex</span>(m);m<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">MulX</span>(e,m);<span class="pl-k">return</span> r<span class="pl-k">=</span>(<span class="pl-smi">m</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">f</span>.<span class="pl-c1">x</span>)<span class="pl-k">*</span><span class="pl-smi">r</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-smi">m</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">f</span>.<span class="pl-c1">y</span>)<span class="pl-k">*</span><span class="pl-smi">r</span>.<span class="pl-c1">y</span>;<span class="pl-k">case</span> <span class="pl-smi">d</span>.<span class="pl-smi">e_faceB</span>:r<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">MulMV</span>(<span class="pl-smi">e</span>.<span class="pl-c1">R</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>);m<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">MulX</span>(e,<span class="pl-c1">this</span>.<span class="pl-smi">m_localPoint</span>);f<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">MulTMV</span>(<span class="pl-smi">b</span>.<span class="pl-c1">R</span>,<span class="pl-smi">r</span>.<span class="pl-en">GetNegative</span>());f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_proxyA</span>.<span class="pl-en">GetSupportVertex</span>(f);f<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">MulX</span>(b,f);<span class="pl-k">return</span> r<span class="pl-k">=</span>(<span class="pl-smi">f</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">m</span>.<span class="pl-c1">x</span>)<span class="pl-k">*</span><span class="pl-smi">r</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-smi">f</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">m</span>.<span class="pl-c1">y</span>)<span class="pl-k">*</span><span class="pl-smi">r</span>.<span class="pl-c1">y</span>;<span class="pl-k">default</span>:<span class="pl-smi">y</span>.<span class="pl-en">b2Assert</span>(<span class="pl-c1">false</span>);<span class="pl-k">return</span> <span class="pl-c1">0</span>}};</td>
      </tr>
      <tr>
        <td id="L82" class="blob-num js-line-number" data-line-number="82"></td>
        <td id="LC82" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">Box2D</span>.<span class="pl-smi">postDefs</span>.<span class="pl-c1">push</span>(<span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2SeparationFunction</span>.<span class="pl-smi">e_points</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2SeparationFunction</span>.<span class="pl-smi">e_faceA</span><span class="pl-k">=</span><span class="pl-c1">2</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2SeparationFunction</span>.<span class="pl-smi">e_faceB</span><span class="pl-k">=</span><span class="pl-c1">4</span>});<span class="pl-smi">h</span>.<span class="pl-en">b2Simplex</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">j</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">j</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_v3</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">j</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>(<span class="pl-c1">3</span>)};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2Simplex</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[<span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[<span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v3</span>};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ReadCache</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">m</span>,<span class="pl-smi">r</span>){<span class="pl-smi">y</span>.<span class="pl-en">b2Assert</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;=</span><span class="pl-smi">b</span>.<span class="pl-smi">count</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">b</span>.<span class="pl-smi">count</span><span class="pl-k">&lt;=</span><span class="pl-c1">3</span>);<span class="pl-k">var</span> s,v;<span class="pl-c1">this</span>.<span class="pl-smi">m_count</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">count</span>;</td>
      </tr>
      <tr>
        <td id="L83" class="blob-num js-line-number" data-line-number="83"></td>
        <td id="LC83" class="blob-code blob-code-inner js-file-line"><span class="pl-k">for</span>(<span class="pl-k">var</span> t<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>,x<span class="pl-k">=</span><span class="pl-c1">0</span>;x<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_count</span>;x<span class="pl-k">++</span>){<span class="pl-k">var</span> <span class="pl-c1">C</span><span class="pl-k">=</span>t[x];<span class="pl-c1">C</span>.<span class="pl-smi">indexA</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">indexA</span>[x];<span class="pl-c1">C</span>.<span class="pl-smi">indexB</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">indexB</span>[x];s<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-en">GetVertex</span>(<span class="pl-c1">C</span>.<span class="pl-smi">indexA</span>);v<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-en">GetVertex</span>(<span class="pl-c1">C</span>.<span class="pl-smi">indexB</span>);<span class="pl-c1">C</span>.<span class="pl-smi">wA</span><span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">MulX</span>(f,s);<span class="pl-c1">C</span>.<span class="pl-smi">wB</span><span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">MulX</span>(r,v);<span class="pl-c1">C</span>.<span class="pl-smi">w</span><span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">SubtractVV</span>(<span class="pl-c1">C</span>.<span class="pl-smi">wB</span>,<span class="pl-c1">C</span>.<span class="pl-smi">wA</span>);<span class="pl-c1">C</span>.<span class="pl-smi">a</span><span class="pl-k">=</span><span class="pl-c1">0</span>}<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_count</span><span class="pl-k">&gt;</span><span class="pl-c1">1</span>){b<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">metric</span>;s<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">GetMetric</span>();<span class="pl-k">if</span>(s<span class="pl-k">&lt;</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>b<span class="pl-k">||</span><span class="pl-c1">2</span><span class="pl-k">*</span>b<span class="pl-k">&lt;</span>s<span class="pl-k">||</span>s<span class="pl-k">&lt;</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>)<span class="pl-c1">this</span>.<span class="pl-smi">m_count</span><span class="pl-k">=</span><span class="pl-c1">0</span>}<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_count</span><span class="pl-k">==</span><span class="pl-c1">0</span>){<span class="pl-c1">C</span><span class="pl-k">=</span>t[<span class="pl-c1">0</span>];<span class="pl-c1">C</span>.<span class="pl-smi">indexA</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">C</span>.<span class="pl-smi">indexB</span><span class="pl-k">=</span><span class="pl-c1">0</span>;s<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-en">GetVertex</span>(<span class="pl-c1">0</span>);v<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-en">GetVertex</span>(<span class="pl-c1">0</span>);<span class="pl-c1">C</span>.<span class="pl-smi">wA</span><span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">MulX</span>(f,s);<span class="pl-c1">C</span>.<span class="pl-smi">wB</span><span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">MulX</span>(r,v);<span class="pl-c1">C</span>.<span class="pl-smi">w</span><span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">SubtractVV</span>(<span class="pl-c1">C</span>.<span class="pl-smi">wB</span>,<span class="pl-c1">C</span>.<span class="pl-smi">wA</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_count</span><span class="pl-k">=</span><span class="pl-c1">1</span>}};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">WriteCache</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L84" class="blob-num js-line-number" data-line-number="84"></td>
        <td id="LC84" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-smi">b</span>.<span class="pl-smi">metric</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">GetMetric</span>();<span class="pl-smi">b</span>.<span class="pl-smi">count</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-en">parseUInt</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_count</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>,f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_count</span>;f<span class="pl-k">++</span>){<span class="pl-smi">b</span>.<span class="pl-smi">indexA</span>[f]<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-en">parseUInt</span>(e[f].<span class="pl-smi">indexA</span>);<span class="pl-smi">b</span>.<span class="pl-smi">indexB</span>[f]<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-en">parseUInt</span>(e[f].<span class="pl-smi">indexB</span>)}};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetSearchDirection</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">switch</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_count</span>){<span class="pl-k">case</span> <span class="pl-c1">1</span>:<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-smi">w</span>.<span class="pl-en">GetNegative</span>();<span class="pl-k">case</span> <span class="pl-c1">2</span>:<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">SubtractVV</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span>.<span class="pl-smi">w</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-smi">w</span>);<span class="pl-k">return</span> <span class="pl-smi">w</span>.<span class="pl-en">CrossVV</span>(b,<span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-smi">w</span>.<span class="pl-en">GetNegative</span>())<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">?</span><span class="pl-smi">w</span>.<span class="pl-en">CrossFV</span>(<span class="pl-c1">1</span>,b)<span class="pl-k">:</span><span class="pl-smi">w</span>.<span class="pl-en">CrossVF</span>(b,<span class="pl-c1">1</span>);<span class="pl-k">default</span>:<span class="pl-smi">y</span>.<span class="pl-en">b2Assert</span>(<span class="pl-c1">false</span>);<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">p</span>}};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">GetClosestPoint</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L85" class="blob-num js-line-number" data-line-number="85"></td>
        <td id="LC85" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(){<span class="pl-k">switch</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_count</span>){<span class="pl-k">case</span> <span class="pl-c1">0</span>:<span class="pl-smi">y</span>.<span class="pl-en">b2Assert</span>(<span class="pl-c1">false</span>);<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">p</span>;<span class="pl-k">case</span> <span class="pl-c1">1</span>:<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-smi">w</span>;<span class="pl-k">case</span> <span class="pl-c1">2</span>:<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">p</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-smi">a</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-smi">w</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span>.<span class="pl-smi">a</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span>.<span class="pl-smi">w</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-smi">a</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-smi">w</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span>.<span class="pl-smi">a</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span>.<span class="pl-smi">w</span>.<span class="pl-c1">y</span>);<span class="pl-k">default</span>:<span class="pl-smi">y</span>.<span class="pl-en">b2Assert</span>(<span class="pl-c1">false</span>);<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">p</span>}};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetWitnessPoints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>){<span class="pl-k">switch</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_count</span>){<span class="pl-k">case</span> <span class="pl-c1">0</span>:<span class="pl-smi">y</span>.<span class="pl-en">b2Assert</span>(<span class="pl-c1">false</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">1</span>:<span class="pl-smi">b</span>.<span class="pl-en">SetV</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-smi">wA</span>);<span class="pl-smi">e</span>.<span class="pl-en">SetV</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-smi">wB</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">2</span>:<span class="pl-smi">b</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-smi">a</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-smi">wA</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span>.<span class="pl-smi">a</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span>.<span class="pl-smi">wA</span>.<span class="pl-c1">x</span>;<span class="pl-smi">b</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-smi">a</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-smi">wA</span>.<span class="pl-c1">y</span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L86" class="blob-num js-line-number" data-line-number="86"></td>
        <td id="LC86" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span>.<span class="pl-smi">a</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span>.<span class="pl-smi">wA</span>.<span class="pl-c1">y</span>;<span class="pl-smi">e</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-smi">a</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-smi">wB</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span>.<span class="pl-smi">a</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span>.<span class="pl-smi">wB</span>.<span class="pl-c1">x</span>;<span class="pl-smi">e</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-smi">a</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-smi">wB</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span>.<span class="pl-smi">a</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span>.<span class="pl-smi">wB</span>.<span class="pl-c1">y</span>;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">3</span>:<span class="pl-smi">e</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-smi">a</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-smi">wA</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span>.<span class="pl-smi">a</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span>.<span class="pl-smi">wA</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v3</span>.<span class="pl-smi">a</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v3</span>.<span class="pl-smi">wA</span>.<span class="pl-c1">x</span>;<span class="pl-smi">e</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-smi">a</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-smi">wA</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span>.<span class="pl-smi">a</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span>.<span class="pl-smi">wA</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v3</span>.<span class="pl-smi">a</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v3</span>.<span class="pl-smi">wA</span>.<span class="pl-c1">y</span>;<span class="pl-k">break</span>;<span class="pl-k">default</span>:<span class="pl-smi">y</span>.<span class="pl-en">b2Assert</span>(<span class="pl-c1">false</span>)}};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetMetric</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">switch</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_count</span>){<span class="pl-k">case</span> <span class="pl-c1">0</span>:<span class="pl-smi">y</span>.<span class="pl-en">b2Assert</span>(<span class="pl-c1">false</span>);<span class="pl-k">return</span> <span class="pl-c1">0</span>;<span class="pl-k">case</span> <span class="pl-c1">1</span>:<span class="pl-k">return</span> <span class="pl-c1">0</span>;<span class="pl-k">case</span> <span class="pl-c1">2</span>:<span class="pl-k">return</span> <span class="pl-smi">w</span>.<span class="pl-en">SubtractVV</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-smi">w</span>,</td>
      </tr>
      <tr>
        <td id="L87" class="blob-num js-line-number" data-line-number="87"></td>
        <td id="LC87" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span>.<span class="pl-smi">w</span>).<span class="pl-en">Length</span>();<span class="pl-k">case</span> <span class="pl-c1">3</span>:<span class="pl-k">return</span> <span class="pl-smi">w</span>.<span class="pl-en">CrossVV</span>(<span class="pl-smi">w</span>.<span class="pl-en">SubtractVV</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span>.<span class="pl-smi">w</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-smi">w</span>),<span class="pl-smi">w</span>.<span class="pl-en">SubtractVV</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_v3</span>.<span class="pl-smi">w</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-smi">w</span>));<span class="pl-k">default</span>:<span class="pl-smi">y</span>.<span class="pl-en">b2Assert</span>(<span class="pl-c1">false</span>);<span class="pl-k">return</span> <span class="pl-c1">0</span>}};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Solve2</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-smi">w</span>,e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span>.<span class="pl-smi">w</span>,f<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">SubtractVV</span>(e,b);b<span class="pl-k">=</span><span class="pl-k">-</span>(<span class="pl-smi">b</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">f</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">f</span>.<span class="pl-c1">y</span>);<span class="pl-k">if</span>(b<span class="pl-k">&lt;=</span><span class="pl-c1">0</span>)<span class="pl-c1">this</span>.<span class="pl-smi">m_count</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-smi">a</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-k">else</span>{e<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">f</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">e</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">f</span>.<span class="pl-c1">y</span>;<span class="pl-k">if</span>(e<span class="pl-k">&lt;=</span><span class="pl-c1">0</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_count</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span>.<span class="pl-smi">a</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-en">Set</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span>)}<span class="pl-k">else</span>{f<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>(e<span class="pl-k">+</span>b);<span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-smi">a</span><span class="pl-k">=</span>e<span class="pl-k">*</span>f;<span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span>.<span class="pl-smi">a</span><span class="pl-k">=</span>b<span class="pl-k">*</span>f;<span class="pl-c1">this</span>.<span class="pl-smi">m_count</span><span class="pl-k">=</span><span class="pl-c1">2</span>}}};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Solve3</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-smi">w</span>,e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span>.<span class="pl-smi">w</span>,</td>
      </tr>
      <tr>
        <td id="L88" class="blob-num js-line-number" data-line-number="88"></td>
        <td id="LC88" class="blob-code blob-code-inner js-file-line">f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v3</span>.<span class="pl-smi">w</span>,m<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">SubtractVV</span>(e,b),r<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">Dot</span>(b,m),s<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">Dot</span>(e,m);r<span class="pl-k">=</span><span class="pl-k">-</span>r;<span class="pl-k">var</span> v<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">SubtractVV</span>(f,b),t<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">Dot</span>(b,v),x<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">Dot</span>(f,v);t<span class="pl-k">=</span><span class="pl-k">-</span>t;<span class="pl-k">var</span> <span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">SubtractVV</span>(f,e),<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">Dot</span>(e,<span class="pl-c1">C</span>);<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">Dot</span>(f,<span class="pl-c1">C</span>);<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">J</span>;v<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">CrossVV</span>(m,v);m<span class="pl-k">=</span>v<span class="pl-k">*</span><span class="pl-smi">w</span>.<span class="pl-en">CrossVV</span>(e,f);f<span class="pl-k">=</span>v<span class="pl-k">*</span><span class="pl-smi">w</span>.<span class="pl-en">CrossVV</span>(f,b);b<span class="pl-k">=</span>v<span class="pl-k">*</span><span class="pl-smi">w</span>.<span class="pl-en">CrossVV</span>(b,e);<span class="pl-k">if</span>(r<span class="pl-k">&lt;=</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>t<span class="pl-k">&lt;=</span><span class="pl-c1">0</span>)<span class="pl-c1">this</span>.<span class="pl-smi">m_count</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-smi">a</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-k">else</span> <span class="pl-k">if</span>(s<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>r<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>b<span class="pl-k">&lt;=</span><span class="pl-c1">0</span>){x<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>(s<span class="pl-k">+</span>r);<span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-smi">a</span><span class="pl-k">=</span>s<span class="pl-k">*</span>x;<span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span>.<span class="pl-smi">a</span><span class="pl-k">=</span>r<span class="pl-k">*</span>x;<span class="pl-c1">this</span>.<span class="pl-smi">m_count</span><span class="pl-k">=</span><span class="pl-c1">2</span>}<span class="pl-k">else</span> <span class="pl-k">if</span>(x<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>t<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>f<span class="pl-k">&lt;=</span><span class="pl-c1">0</span>){s<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>(x<span class="pl-k">+</span>t);<span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-smi">a</span><span class="pl-k">=</span>x<span class="pl-k">*</span>s;<span class="pl-c1">this</span>.<span class="pl-smi">m_v3</span>.<span class="pl-smi">a</span><span class="pl-k">=</span>t<span class="pl-k">*</span>s;<span class="pl-c1">this</span>.<span class="pl-smi">m_count</span><span class="pl-k">=</span><span class="pl-c1">2</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span>.<span class="pl-en">Set</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_v3</span>)}<span class="pl-k">else</span> <span class="pl-k">if</span>(s<span class="pl-k">&lt;=</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">J</span><span class="pl-k">&lt;=</span><span class="pl-c1">0</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_count</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L89" class="blob-num js-line-number" data-line-number="89"></td>
        <td id="LC89" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span>.<span class="pl-smi">a</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-en">Set</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span>)}<span class="pl-k">else</span> <span class="pl-k">if</span>(x<span class="pl-k">&lt;=</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">C</span><span class="pl-k">&lt;=</span><span class="pl-c1">0</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_count</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v3</span>.<span class="pl-smi">a</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-en">Set</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_v3</span>)}<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-c1">C</span><span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">J</span><span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>m<span class="pl-k">&lt;=</span><span class="pl-c1">0</span>){s<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>(<span class="pl-c1">C</span><span class="pl-k">+</span><span class="pl-c1">J</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span>.<span class="pl-smi">a</span><span class="pl-k">=</span><span class="pl-c1">C</span><span class="pl-k">*</span>s;<span class="pl-c1">this</span>.<span class="pl-smi">m_v3</span>.<span class="pl-smi">a</span><span class="pl-k">=</span><span class="pl-c1">J</span><span class="pl-k">*</span>s;<span class="pl-c1">this</span>.<span class="pl-smi">m_count</span><span class="pl-k">=</span><span class="pl-c1">2</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-en">Set</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_v3</span>)}<span class="pl-k">else</span>{s<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>(m<span class="pl-k">+</span>f<span class="pl-k">+</span>b);<span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-smi">a</span><span class="pl-k">=</span>m<span class="pl-k">*</span>s;<span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span>.<span class="pl-smi">a</span><span class="pl-k">=</span>f<span class="pl-k">*</span>s;<span class="pl-c1">this</span>.<span class="pl-smi">m_v3</span>.<span class="pl-smi">a</span><span class="pl-k">=</span>b<span class="pl-k">*</span>s;<span class="pl-c1">this</span>.<span class="pl-smi">m_count</span><span class="pl-k">=</span><span class="pl-c1">3</span>}};<span class="pl-smi">l</span>.<span class="pl-en">b2SimplexCache</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">indexA</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector_a2j_Number</span>(<span class="pl-c1">3</span>);<span class="pl-c1">this</span>.<span class="pl-smi">indexB</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector_a2j_Number</span>(<span class="pl-c1">3</span>)};<span class="pl-smi">j</span>.<span class="pl-en">b2SimplexVertex</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-smi">j</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Set</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">wA</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">b</span>.<span class="pl-smi">wA</span>);<span class="pl-c1">this</span>.<span class="pl-smi">wB</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">b</span>.<span class="pl-smi">wB</span>);<span class="pl-c1">this</span>.<span class="pl-smi">w</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">b</span>.<span class="pl-smi">w</span>);</td>
      </tr>
      <tr>
        <td id="L90" class="blob-num js-line-number" data-line-number="90"></td>
        <td id="LC90" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">a</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">a</span>;<span class="pl-c1">this</span>.<span class="pl-smi">indexA</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">indexA</span>;<span class="pl-c1">this</span>.<span class="pl-smi">indexB</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">indexB</span>};<span class="pl-smi">o</span>.<span class="pl-en">b2TimeOfImpact</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-smi">o</span>.<span class="pl-en">TimeOfImpact</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">++</span><span class="pl-smi">o</span>.<span class="pl-smi">b2_toiCalls</span>;<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">proxyA</span>,f<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">proxyB</span>,m<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">sweepA</span>,r<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">sweepB</span>;<span class="pl-smi">y</span>.<span class="pl-en">b2Assert</span>(<span class="pl-smi">m</span>.<span class="pl-smi">t0</span><span class="pl-k">==</span><span class="pl-smi">r</span>.<span class="pl-smi">t0</span>);<span class="pl-smi">y</span>.<span class="pl-en">b2Assert</span>(<span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-smi">m</span>.<span class="pl-smi">t0</span><span class="pl-k">&gt;</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>);<span class="pl-k">var</span> s<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">m_radius</span><span class="pl-k">+</span><span class="pl-smi">f</span>.<span class="pl-smi">m_radius</span>;b<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">tolerance</span>;<span class="pl-k">var</span> v<span class="pl-k">=</span><span class="pl-c1">0</span>,t<span class="pl-k">=</span><span class="pl-c1">0</span>,x<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-smi">o</span>.<span class="pl-smi">s_cache</span>.<span class="pl-smi">count</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-smi">o</span>.<span class="pl-smi">s_distanceInput</span>.<span class="pl-smi">useRadii</span><span class="pl-k">=</span><span class="pl-c1">false</span>;;){<span class="pl-smi">m</span>.<span class="pl-en">GetTransform</span>(<span class="pl-smi">o</span>.<span class="pl-smi">s_xfA</span>,v);<span class="pl-smi">r</span>.<span class="pl-en">GetTransform</span>(<span class="pl-smi">o</span>.<span class="pl-smi">s_xfB</span>,v);<span class="pl-smi">o</span>.<span class="pl-smi">s_distanceInput</span>.<span class="pl-smi">proxyA</span><span class="pl-k">=</span>e;<span class="pl-smi">o</span>.<span class="pl-smi">s_distanceInput</span>.<span class="pl-smi">proxyB</span><span class="pl-k">=</span>f;<span class="pl-smi">o</span>.<span class="pl-smi">s_distanceInput</span>.<span class="pl-smi">transformA</span><span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">s_xfA</span>;<span class="pl-smi">o</span>.<span class="pl-smi">s_distanceInput</span>.<span class="pl-smi">transformB</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L91" class="blob-num js-line-number" data-line-number="91"></td>
        <td id="LC91" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">o</span>.<span class="pl-smi">s_xfB</span>;<span class="pl-c1">W</span>.<span class="pl-en">Distance</span>(<span class="pl-smi">o</span>.<span class="pl-smi">s_distanceOutput</span>,<span class="pl-smi">o</span>.<span class="pl-smi">s_cache</span>,<span class="pl-smi">o</span>.<span class="pl-smi">s_distanceInput</span>);<span class="pl-k">if</span>(<span class="pl-smi">o</span>.<span class="pl-smi">s_distanceOutput</span>.<span class="pl-smi">distance</span><span class="pl-k">&lt;=</span><span class="pl-c1">0</span>){v<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-k">break</span>}<span class="pl-smi">o</span>.<span class="pl-smi">s_fcn</span>.<span class="pl-en">Initialize</span>(<span class="pl-smi">o</span>.<span class="pl-smi">s_cache</span>,e,<span class="pl-smi">o</span>.<span class="pl-smi">s_xfA</span>,f,<span class="pl-smi">o</span>.<span class="pl-smi">s_xfB</span>);<span class="pl-k">var</span> <span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">s_fcn</span>.<span class="pl-en">Evaluate</span>(<span class="pl-smi">o</span>.<span class="pl-smi">s_xfA</span>,<span class="pl-smi">o</span>.<span class="pl-smi">s_xfB</span>);<span class="pl-k">if</span>(<span class="pl-c1">C</span><span class="pl-k">&lt;=</span><span class="pl-c1">0</span>){v<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-k">break</span>}<span class="pl-k">if</span>(t<span class="pl-k">==</span><span class="pl-c1">0</span>)x<span class="pl-k">=</span><span class="pl-c1">C</span><span class="pl-k">&gt;</span>s<span class="pl-k">?</span><span class="pl-smi">w</span>.<span class="pl-en">Max</span>(s<span class="pl-k">-</span>b,<span class="pl-c1">0.75</span><span class="pl-k">*</span>s)<span class="pl-k">:</span><span class="pl-smi">w</span>.<span class="pl-en">Max</span>(<span class="pl-c1">C</span><span class="pl-k">-</span>b,<span class="pl-c1">0.02</span><span class="pl-k">*</span>s);<span class="pl-k">if</span>(<span class="pl-c1">C</span><span class="pl-k">-</span>x<span class="pl-k">&lt;</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>b){<span class="pl-k">if</span>(t<span class="pl-k">==</span><span class="pl-c1">0</span>){v<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-k">break</span>}<span class="pl-k">break</span>}<span class="pl-k">var</span> <span class="pl-c1">J</span><span class="pl-k">=</span>v,<span class="pl-c1">T</span><span class="pl-k">=</span>v,<span class="pl-c1">P</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-c1">C</span>;<span class="pl-smi">m</span>.<span class="pl-en">GetTransform</span>(<span class="pl-smi">o</span>.<span class="pl-smi">s_xfA</span>,<span class="pl-c1">P</span>);<span class="pl-smi">r</span>.<span class="pl-en">GetTransform</span>(<span class="pl-smi">o</span>.<span class="pl-smi">s_xfB</span>,<span class="pl-c1">P</span>);<span class="pl-k">var</span> <span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">s_fcn</span>.<span class="pl-en">Evaluate</span>(<span class="pl-smi">o</span>.<span class="pl-smi">s_xfA</span>,<span class="pl-smi">o</span>.<span class="pl-smi">s_xfB</span>);<span class="pl-k">if</span>(<span class="pl-c1">X</span><span class="pl-k">&gt;=</span>x){v<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-k">break</span>}<span class="pl-k">for</span>(<span class="pl-k">var</span> $<span class="pl-k">=</span><span class="pl-c1">0</span>;;){<span class="pl-k">var</span> ba<span class="pl-k">=</span><span class="pl-c1">0</span>;ba<span class="pl-k">=</span>$<span class="pl-k">&amp;</span><span class="pl-c1">1</span><span class="pl-k">?</span><span class="pl-c1">T</span><span class="pl-k">+</span>(x<span class="pl-k">-</span><span class="pl-c1">C</span>)<span class="pl-k">*</span>(<span class="pl-c1">P</span><span class="pl-k">-</span><span class="pl-c1">T</span>)<span class="pl-k">/</span>(<span class="pl-c1">X</span><span class="pl-k">-</span><span class="pl-c1">C</span>)<span class="pl-k">:</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(<span class="pl-c1">T</span><span class="pl-k">+</span><span class="pl-c1">P</span>);</td>
      </tr>
      <tr>
        <td id="L92" class="blob-num js-line-number" data-line-number="92"></td>
        <td id="LC92" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">m</span>.<span class="pl-en">GetTransform</span>(<span class="pl-smi">o</span>.<span class="pl-smi">s_xfA</span>,ba);<span class="pl-smi">r</span>.<span class="pl-en">GetTransform</span>(<span class="pl-smi">o</span>.<span class="pl-smi">s_xfB</span>,ba);<span class="pl-k">var</span> ca<span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">s_fcn</span>.<span class="pl-en">Evaluate</span>(<span class="pl-smi">o</span>.<span class="pl-smi">s_xfA</span>,<span class="pl-smi">o</span>.<span class="pl-smi">s_xfB</span>);<span class="pl-k">if</span>(<span class="pl-smi">w</span>.<span class="pl-en">Abs</span>(ca<span class="pl-k">-</span>x)<span class="pl-k">&lt;</span><span class="pl-c1">0.025</span><span class="pl-k">*</span>b){<span class="pl-c1">J</span><span class="pl-k">=</span>ba;<span class="pl-k">break</span>}<span class="pl-k">if</span>(ca<span class="pl-k">&gt;</span>x){<span class="pl-c1">T</span><span class="pl-k">=</span>ba;<span class="pl-c1">C</span><span class="pl-k">=</span>ca}<span class="pl-k">else</span>{<span class="pl-c1">P</span><span class="pl-k">=</span>ba;<span class="pl-c1">X</span><span class="pl-k">=</span>ca}<span class="pl-k">++</span>$;<span class="pl-k">++</span><span class="pl-smi">o</span>.<span class="pl-smi">b2_toiRootIters</span>;<span class="pl-k">if</span>($<span class="pl-k">==</span><span class="pl-c1">50</span>)<span class="pl-k">break</span>}<span class="pl-smi">o</span>.<span class="pl-smi">b2_toiMaxRootIters</span><span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">Max</span>(<span class="pl-smi">o</span>.<span class="pl-smi">b2_toiMaxRootIters</span>,$);<span class="pl-k">if</span>(<span class="pl-c1">J</span><span class="pl-k">&lt;</span>(<span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">100</span><span class="pl-k">*</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>)<span class="pl-k">*</span>v)<span class="pl-k">break</span>;v<span class="pl-k">=</span><span class="pl-c1">J</span>;t<span class="pl-k">++</span>;<span class="pl-k">++</span><span class="pl-smi">o</span>.<span class="pl-smi">b2_toiIters</span>;<span class="pl-k">if</span>(t<span class="pl-k">==</span><span class="pl-c1">1E3</span>)<span class="pl-k">break</span>}<span class="pl-smi">o</span>.<span class="pl-smi">b2_toiMaxIters</span><span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-en">Max</span>(<span class="pl-smi">o</span>.<span class="pl-smi">b2_toiMaxIters</span>,t);<span class="pl-k">return</span> v};<span class="pl-smi">Box2D</span>.<span class="pl-smi">postDefs</span>.<span class="pl-c1">push</span>(<span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2TimeOfImpact</span>.<span class="pl-smi">b2_toiCalls</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2TimeOfImpact</span>.<span class="pl-smi">b2_toiIters</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L93" class="blob-num js-line-number" data-line-number="93"></td>
        <td id="LC93" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2TimeOfImpact</span>.<span class="pl-smi">b2_toiMaxIters</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2TimeOfImpact</span>.<span class="pl-smi">b2_toiRootIters</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2TimeOfImpact</span>.<span class="pl-smi">b2_toiMaxRootIters</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2TimeOfImpact</span>.<span class="pl-smi">s_cache</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">l</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2TimeOfImpact</span>.<span class="pl-smi">s_distanceInput</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Y</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2TimeOfImpact</span>.<span class="pl-smi">s_xfA</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">U</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2TimeOfImpact</span>.<span class="pl-smi">s_xfB</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">U</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2TimeOfImpact</span>.<span class="pl-smi">s_fcn</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">d</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2TimeOfImpact</span>.<span class="pl-smi">s_distanceOutput</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">k</span>});<span class="pl-smi">q</span>.<span class="pl-en">b2TOIInput</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">proxyA</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">z</span>;<span class="pl-c1">this</span>.<span class="pl-smi">proxyB</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">z</span>;<span class="pl-c1">this</span>.<span class="pl-smi">sweepA</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L94" class="blob-num js-line-number" data-line-number="94"></td>
        <td id="LC94" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">A</span>;<span class="pl-c1">this</span>.<span class="pl-smi">sweepB</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">A</span>};<span class="pl-smi">n</span>.<span class="pl-en">b2WorldManifold</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">m_normal</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>};<span class="pl-smi">n</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2WorldManifold</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">m_points</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>(<span class="pl-smi">y</span>.<span class="pl-smi">b2_maxManifoldPoints</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-smi">y</span>.<span class="pl-smi">b2_maxManifoldPoints</span>;b<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-smi">m_points</span>[b]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>};<span class="pl-smi">n</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Initialize</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">m</span>,<span class="pl-smi">r</span>){<span class="pl-k">if</span>(f<span class="pl-k">===</span><span class="pl-c1">undefined</span>)f<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(r<span class="pl-k">===</span><span class="pl-c1">undefined</span>)r<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-smi">b</span>.<span class="pl-smi">m_pointCount</span><span class="pl-k">!=</span><span class="pl-c1">0</span>){<span class="pl-k">var</span> s<span class="pl-k">=</span><span class="pl-c1">0</span>,v,t,x<span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">P</span><span class="pl-k">=</span><span class="pl-c1">0</span>;v<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">switch</span>(<span class="pl-smi">b</span>.<span class="pl-smi">m_type</span>){<span class="pl-k">case</span> <span class="pl-c1">E</span>.<span class="pl-smi">e_circles</span>:t<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">R</span>;v<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">m_localPoint</span>;s<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">t</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">v</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">t</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">v</span>.<span class="pl-c1">y</span>;e<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-smi">t</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">v</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">t</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L95" class="blob-num js-line-number" data-line-number="95"></td>
        <td id="LC95" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">v</span>.<span class="pl-c1">y</span>;t<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-c1">R</span>;v<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">m_points</span>[<span class="pl-c1">0</span>].<span class="pl-smi">m_localPoint</span>;b<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">t</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">v</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">t</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">v</span>.<span class="pl-c1">y</span>;m<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-smi">t</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">v</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">t</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">v</span>.<span class="pl-c1">y</span>;v<span class="pl-k">=</span>b<span class="pl-k">-</span>s;t<span class="pl-k">=</span>m<span class="pl-k">-</span>e;x<span class="pl-k">=</span>v<span class="pl-k">*</span>v<span class="pl-k">+</span>t<span class="pl-k">*</span>t;<span class="pl-k">if</span>(x<span class="pl-k">&gt;</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span><span class="pl-k">*</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>){x<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(x);<span class="pl-c1">this</span>.<span class="pl-smi">m_normal</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>v<span class="pl-k">/</span>x;<span class="pl-c1">this</span>.<span class="pl-smi">m_normal</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>t<span class="pl-k">/</span>x}<span class="pl-k">else</span>{<span class="pl-c1">this</span>.<span class="pl-smi">m_normal</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_normal</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>}v<span class="pl-k">=</span>e<span class="pl-k">+</span>f<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_normal</span>.<span class="pl-c1">y</span>;m<span class="pl-k">=</span>m<span class="pl-k">-</span>r<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_normal</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_points</span>[<span class="pl-c1">0</span>].<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(s<span class="pl-k">+</span>f<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_normal</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(b<span class="pl-k">-</span>r<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_normal</span>.<span class="pl-c1">x</span>));<span class="pl-c1">this</span>.<span class="pl-smi">m_points</span>[<span class="pl-c1">0</span>].<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(v<span class="pl-k">+</span>m);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">E</span>.<span class="pl-smi">e_faceA</span>:t<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">R</span>;v<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">m_localPlaneNormal</span>;x<span class="pl-k">=</span><span class="pl-smi">t</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">v</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">t</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">v</span>.<span class="pl-c1">y</span>;<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-smi">t</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L96" class="blob-num js-line-number" data-line-number="96"></td>
        <td id="LC96" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">v</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">t</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">v</span>.<span class="pl-c1">y</span>;t<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">R</span>;v<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">m_localPoint</span>;<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">t</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">v</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">t</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">v</span>.<span class="pl-c1">y</span>;<span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-smi">t</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">v</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">t</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">v</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_normal</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>x;<span class="pl-c1">this</span>.<span class="pl-smi">m_normal</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">C</span>;<span class="pl-k">for</span>(s<span class="pl-k">=</span><span class="pl-c1">0</span>;s<span class="pl-k">&lt;</span><span class="pl-smi">b</span>.<span class="pl-smi">m_pointCount</span>;s<span class="pl-k">++</span>){t<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-c1">R</span>;v<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">m_points</span>[s].<span class="pl-smi">m_localPoint</span>;<span class="pl-c1">P</span><span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">t</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">v</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">t</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">v</span>.<span class="pl-c1">y</span>;v<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-smi">t</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">v</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">t</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">v</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_points</span>[s].<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">P</span><span class="pl-k">+</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(f<span class="pl-k">-</span>(<span class="pl-c1">P</span><span class="pl-k">-</span><span class="pl-c1">J</span>)<span class="pl-k">*</span>x<span class="pl-k">-</span>(v<span class="pl-k">-</span><span class="pl-c1">T</span>)<span class="pl-k">*</span><span class="pl-c1">C</span><span class="pl-k">-</span>r)<span class="pl-k">*</span>x;<span class="pl-c1">this</span>.<span class="pl-smi">m_points</span>[s].<span class="pl-c1">y</span><span class="pl-k">=</span>v<span class="pl-k">+</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(f<span class="pl-k">-</span>(<span class="pl-c1">P</span><span class="pl-k">-</span><span class="pl-c1">J</span>)<span class="pl-k">*</span>x<span class="pl-k">-</span>(v<span class="pl-k">-</span><span class="pl-c1">T</span>)<span class="pl-k">*</span><span class="pl-c1">C</span><span class="pl-k">-</span>r)<span class="pl-k">*</span><span class="pl-c1">C</span>}<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">E</span>.<span class="pl-smi">e_faceB</span>:t<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-c1">R</span>;v<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">m_localPlaneNormal</span>;x<span class="pl-k">=</span><span class="pl-smi">t</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">v</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">t</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">v</span>.<span class="pl-c1">y</span>;<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-smi">t</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">v</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">t</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L97" class="blob-num js-line-number" data-line-number="97"></td>
        <td id="LC97" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">v</span>.<span class="pl-c1">y</span>;t<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-c1">R</span>;v<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">m_localPoint</span>;<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">t</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">v</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">t</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">v</span>.<span class="pl-c1">y</span>;<span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-smi">t</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">v</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">t</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">v</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_normal</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-k">-</span>x;<span class="pl-c1">this</span>.<span class="pl-smi">m_normal</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">C</span>;<span class="pl-k">for</span>(s<span class="pl-k">=</span><span class="pl-c1">0</span>;s<span class="pl-k">&lt;</span><span class="pl-smi">b</span>.<span class="pl-smi">m_pointCount</span>;s<span class="pl-k">++</span>){t<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">R</span>;v<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">m_points</span>[s].<span class="pl-smi">m_localPoint</span>;<span class="pl-c1">P</span><span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">t</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">v</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">t</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">v</span>.<span class="pl-c1">y</span>;v<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-smi">t</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">v</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">t</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">v</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_points</span>[s].<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">P</span><span class="pl-k">+</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(r<span class="pl-k">-</span>(<span class="pl-c1">P</span><span class="pl-k">-</span><span class="pl-c1">J</span>)<span class="pl-k">*</span>x<span class="pl-k">-</span>(v<span class="pl-k">-</span><span class="pl-c1">T</span>)<span class="pl-k">*</span><span class="pl-c1">C</span><span class="pl-k">-</span>f)<span class="pl-k">*</span>x;<span class="pl-c1">this</span>.<span class="pl-smi">m_points</span>[s].<span class="pl-c1">y</span><span class="pl-k">=</span>v<span class="pl-k">+</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(r<span class="pl-k">-</span>(<span class="pl-c1">P</span><span class="pl-k">-</span><span class="pl-c1">J</span>)<span class="pl-k">*</span>x<span class="pl-k">-</span>(v<span class="pl-k">-</span><span class="pl-c1">T</span>)<span class="pl-k">*</span><span class="pl-c1">C</span><span class="pl-k">-</span>f)<span class="pl-k">*</span><span class="pl-c1">C</span>}}}};<span class="pl-smi">a</span>.<span class="pl-en">ClipVertex</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">v</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>;<span class="pl-c1">this</span>.<span class="pl-c1">id</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">L</span>};<span class="pl-smi">a</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Set</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">v</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">b</span>.<span class="pl-smi">v</span>);<span class="pl-c1">this</span>.<span class="pl-c1">id</span>.<span class="pl-en">Set</span>(<span class="pl-smi">b</span>.<span class="pl-c1">id</span>)};</td>
      </tr>
      <tr>
        <td id="L98" class="blob-num js-line-number" data-line-number="98"></td>
        <td id="LC98" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">c</span>.<span class="pl-en">Features</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">Object</span>.<span class="pl-en">defineProperty</span>(<span class="pl-smi">c</span>.<span class="pl-c1">prototype</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>referenceEdge<span class="pl-pds">&quot;</span></span>,{enumerable<span class="pl-k">:</span><span class="pl-c1">false</span>,configurable<span class="pl-k">:</span><span class="pl-c1">true</span>,<span class="pl-en">get</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">_referenceEdge</span>}});<span class="pl-c1">Object</span>.<span class="pl-en">defineProperty</span>(<span class="pl-smi">c</span>.<span class="pl-c1">prototype</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>referenceEdge<span class="pl-pds">&quot;</span></span>,{enumerable<span class="pl-k">:</span><span class="pl-c1">false</span>,configurable<span class="pl-k">:</span><span class="pl-c1">true</span>,<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">if</span>(b<span class="pl-k">===</span><span class="pl-c1">undefined</span>)b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">_referenceEdge</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">_m_id</span>.<span class="pl-smi">_key</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">_m_id</span>.<span class="pl-smi">_key</span><span class="pl-k">&amp;</span><span class="pl-c1">4294967040</span><span class="pl-k">|</span><span class="pl-c1">this</span>.<span class="pl-smi">_referenceEdge</span><span class="pl-k">&amp;</span><span class="pl-c1">255</span>}});<span class="pl-c1">Object</span>.<span class="pl-en">defineProperty</span>(<span class="pl-smi">c</span>.<span class="pl-c1">prototype</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>incidentEdge<span class="pl-pds">&quot;</span></span>,{enumerable<span class="pl-k">:</span><span class="pl-c1">false</span>,configurable<span class="pl-k">:</span><span class="pl-c1">true</span>,<span class="pl-en">get</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">_incidentEdge</span>}});<span class="pl-c1">Object</span>.<span class="pl-en">defineProperty</span>(<span class="pl-smi">c</span>.<span class="pl-c1">prototype</span>,</td>
      </tr>
      <tr>
        <td id="L99" class="blob-num js-line-number" data-line-number="99"></td>
        <td id="LC99" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">&quot;</span>incidentEdge<span class="pl-pds">&quot;</span></span>,{enumerable<span class="pl-k">:</span><span class="pl-c1">false</span>,configurable<span class="pl-k">:</span><span class="pl-c1">true</span>,<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">if</span>(b<span class="pl-k">===</span><span class="pl-c1">undefined</span>)b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">_incidentEdge</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">_m_id</span>.<span class="pl-smi">_key</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">_m_id</span>.<span class="pl-smi">_key</span><span class="pl-k">&amp;</span><span class="pl-c1">4294902015</span><span class="pl-k">|</span><span class="pl-c1">this</span>.<span class="pl-smi">_incidentEdge</span><span class="pl-k">&lt;&lt;</span><span class="pl-c1">8</span><span class="pl-k">&amp;</span><span class="pl-c1">65280</span>}});<span class="pl-c1">Object</span>.<span class="pl-en">defineProperty</span>(<span class="pl-smi">c</span>.<span class="pl-c1">prototype</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>incidentVertex<span class="pl-pds">&quot;</span></span>,{enumerable<span class="pl-k">:</span><span class="pl-c1">false</span>,configurable<span class="pl-k">:</span><span class="pl-c1">true</span>,<span class="pl-en">get</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">_incidentVertex</span>}});<span class="pl-c1">Object</span>.<span class="pl-en">defineProperty</span>(<span class="pl-smi">c</span>.<span class="pl-c1">prototype</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>incidentVertex<span class="pl-pds">&quot;</span></span>,{enumerable<span class="pl-k">:</span><span class="pl-c1">false</span>,configurable<span class="pl-k">:</span><span class="pl-c1">true</span>,<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">if</span>(b<span class="pl-k">===</span><span class="pl-c1">undefined</span>)b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">_incidentVertex</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">_m_id</span>.<span class="pl-smi">_key</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">_m_id</span>.<span class="pl-smi">_key</span><span class="pl-k">&amp;</span><span class="pl-c1">4278255615</span><span class="pl-k">|</span></td>
      </tr>
      <tr>
        <td id="L100" class="blob-num js-line-number" data-line-number="100"></td>
        <td id="LC100" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">_incidentVertex</span><span class="pl-k">&lt;&lt;</span><span class="pl-c1">16</span><span class="pl-k">&amp;</span><span class="pl-c1">16711680</span>}});<span class="pl-c1">Object</span>.<span class="pl-en">defineProperty</span>(<span class="pl-smi">c</span>.<span class="pl-c1">prototype</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>flip<span class="pl-pds">&quot;</span></span>,{enumerable<span class="pl-k">:</span><span class="pl-c1">false</span>,configurable<span class="pl-k">:</span><span class="pl-c1">true</span>,<span class="pl-en">get</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">_flip</span>}});<span class="pl-c1">Object</span>.<span class="pl-en">defineProperty</span>(<span class="pl-smi">c</span>.<span class="pl-c1">prototype</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>flip<span class="pl-pds">&quot;</span></span>,{enumerable<span class="pl-k">:</span><span class="pl-c1">false</span>,configurable<span class="pl-k">:</span><span class="pl-c1">true</span>,<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">if</span>(b<span class="pl-k">===</span><span class="pl-c1">undefined</span>)b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">_flip</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">_m_id</span>.<span class="pl-smi">_key</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">_m_id</span>.<span class="pl-smi">_key</span><span class="pl-k">&amp;</span><span class="pl-c1">16777215</span><span class="pl-k">|</span><span class="pl-c1">this</span>.<span class="pl-smi">_flip</span><span class="pl-k">&lt;&lt;</span><span class="pl-c1">24</span><span class="pl-k">&amp;</span><span class="pl-c1">4278190080</span>}})})();</td>
      </tr>
      <tr>
        <td id="L101" class="blob-num js-line-number" data-line-number="101"></td>
        <td id="LC101" class="blob-code blob-code-inner js-file-line">(<span class="pl-k">function</span>(){<span class="pl-k">var</span> <span class="pl-c1">F</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">b2Settings</span>,<span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">Shapes</span>.<span class="pl-smi">b2CircleShape</span>,<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">Shapes</span>.<span class="pl-smi">b2EdgeChainDef</span>,y<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">Shapes</span>.<span class="pl-smi">b2EdgeShape</span>,w<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">Shapes</span>.<span class="pl-smi">b2MassData</span>,<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">Shapes</span>.<span class="pl-smi">b2PolygonShape</span>,<span class="pl-c1">U</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">Shapes</span>.<span class="pl-smi">b2Shape</span>,p<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">Math</span>.<span class="pl-smi">b2Mat22</span>,<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">Math</span>.<span class="pl-smi">b2Math</span>,<span class="pl-c1">Q</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">Math</span>.<span class="pl-smi">b2Transform</span>,<span class="pl-c1">V</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">Math</span>.<span class="pl-smi">b2Vec2</span>,<span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2Distance</span>,<span class="pl-c1">L</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2DistanceInput</span>,<span class="pl-c1">I</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2DistanceOutput</span>,<span class="pl-c1">W</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2DistanceProxy</span>,</td>
      </tr>
      <tr>
        <td id="L102" class="blob-num js-line-number" data-line-number="102"></td>
        <td id="LC102" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">Y</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2SimplexCache</span>;<span class="pl-smi">Box2D</span>.<span class="pl-en">inherit</span>(<span class="pl-c1">G</span>,<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">Shapes</span>.<span class="pl-smi">b2Shape</span>);<span class="pl-c1">G</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">__super</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">Shapes</span>.<span class="pl-smi">b2Shape</span>.<span class="pl-c1">prototype</span>;<span class="pl-c1">G</span>.<span class="pl-en">b2CircleShape</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">Shapes</span>.<span class="pl-smi">b2Shape</span>.<span class="pl-smi">b2Shape</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_p</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">V</span>};<span class="pl-c1">G</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> k<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">G</span>;<span class="pl-smi">k</span>.<span class="pl-en">Set</span>(<span class="pl-c1">this</span>);<span class="pl-k">return</span> k};<span class="pl-c1">G</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Set</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>){<span class="pl-c1">this</span>.<span class="pl-smi">__super</span>.<span class="pl-smi">Set</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,k);<span class="pl-k">if</span>(<span class="pl-smi">Box2D</span>.<span class="pl-en">is</span>(k,<span class="pl-c1">G</span>))<span class="pl-c1">this</span>.<span class="pl-smi">m_p</span>.<span class="pl-en">SetV</span>((k <span class="pl-k">instanceof</span> <span class="pl-c1">G</span><span class="pl-k">?</span>k<span class="pl-k">:</span><span class="pl-c1">null</span>).<span class="pl-smi">m_p</span>)};<span class="pl-c1">G</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">TestPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>){<span class="pl-k">var</span> u<span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-c1">R</span>,<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-smi">u</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_p</span>.<span class="pl-c1">x</span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L103" class="blob-num js-line-number" data-line-number="103"></td>
        <td id="LC103" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">u</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_p</span>.<span class="pl-c1">y</span>);u<span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-smi">u</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_p</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">u</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_p</span>.<span class="pl-c1">y</span>);<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-smi">z</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">D</span>;u<span class="pl-k">=</span><span class="pl-smi">z</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>u;<span class="pl-k">return</span> <span class="pl-c1">D</span><span class="pl-k">*</span><span class="pl-c1">D</span><span class="pl-k">+</span>u<span class="pl-k">*</span>u<span class="pl-k">&lt;=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_radius</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_radius</span>};<span class="pl-c1">G</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">RayCast</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>,<span class="pl-smi">u</span>){<span class="pl-k">var</span> <span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-smi">u</span>.<span class="pl-c1">R</span>,<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-smi">z</span>.<span class="pl-smi">p1</span>.<span class="pl-c1">x</span><span class="pl-k">-</span>(<span class="pl-smi">u</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-c1">D</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_p</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">D</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_p</span>.<span class="pl-c1">y</span>));u<span class="pl-k">=</span><span class="pl-smi">z</span>.<span class="pl-smi">p1</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>(<span class="pl-smi">u</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-c1">D</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_p</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">D</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_p</span>.<span class="pl-c1">y</span>));<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-smi">z</span>.<span class="pl-smi">p2</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">z</span>.<span class="pl-smi">p1</span>.<span class="pl-c1">x</span>;<span class="pl-k">var</span> <span class="pl-c1">O</span><span class="pl-k">=</span><span class="pl-smi">z</span>.<span class="pl-smi">p2</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">z</span>.<span class="pl-smi">p1</span>.<span class="pl-c1">y</span>,<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-c1">H</span><span class="pl-k">*</span><span class="pl-c1">D</span><span class="pl-k">+</span>u<span class="pl-k">*</span><span class="pl-c1">O</span>,<span class="pl-c1">R</span><span class="pl-k">=</span><span class="pl-c1">D</span><span class="pl-k">*</span><span class="pl-c1">D</span><span class="pl-k">+</span><span class="pl-c1">O</span><span class="pl-k">*</span><span class="pl-c1">O</span>,<span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-c1">E</span><span class="pl-k">*</span><span class="pl-c1">E</span><span class="pl-k">-</span><span class="pl-c1">R</span><span class="pl-k">*</span>(<span class="pl-c1">H</span><span class="pl-k">*</span><span class="pl-c1">H</span><span class="pl-k">+</span>u<span class="pl-k">*</span>u<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_radius</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_radius</span>);<span class="pl-k">if</span>(<span class="pl-c1">N</span><span class="pl-k">&lt;</span><span class="pl-c1">0</span><span class="pl-k">||</span><span class="pl-c1">R</span><span class="pl-k">&lt;</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>)<span class="pl-k">return</span> <span class="pl-c1">false</span>;<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-k">-</span>(<span class="pl-c1">E</span><span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">N</span>));<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;=</span><span class="pl-c1">E</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">E</span><span class="pl-k">&lt;=</span><span class="pl-smi">z</span>.<span class="pl-smi">maxFraction</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L104" class="blob-num js-line-number" data-line-number="104"></td>
        <td id="LC104" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">R</span>){<span class="pl-c1">E</span><span class="pl-k">/=</span><span class="pl-c1">R</span>;<span class="pl-smi">k</span>.<span class="pl-smi">fraction</span><span class="pl-k">=</span><span class="pl-c1">E</span>;<span class="pl-smi">k</span>.<span class="pl-smi">normal</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">H</span><span class="pl-k">+</span><span class="pl-c1">E</span><span class="pl-k">*</span><span class="pl-c1">D</span>;<span class="pl-smi">k</span>.<span class="pl-smi">normal</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>u<span class="pl-k">+</span><span class="pl-c1">E</span><span class="pl-k">*</span><span class="pl-c1">O</span>;<span class="pl-smi">k</span>.<span class="pl-smi">normal</span>.<span class="pl-en">Normalize</span>();<span class="pl-k">return</span> <span class="pl-c1">true</span>}<span class="pl-k">return</span> <span class="pl-c1">false</span>};<span class="pl-c1">G</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ComputeAABB</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>){<span class="pl-k">var</span> u<span class="pl-k">=</span><span class="pl-smi">z</span>.<span class="pl-c1">R</span>,<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-smi">z</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-smi">u</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_p</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">u</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_p</span>.<span class="pl-c1">y</span>);u<span class="pl-k">=</span><span class="pl-smi">z</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-smi">u</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_p</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">u</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_p</span>.<span class="pl-c1">y</span>);<span class="pl-smi">k</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-en">Set</span>(<span class="pl-c1">D</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_radius</span>,u<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_radius</span>);<span class="pl-smi">k</span>.<span class="pl-smi">upperBound</span>.<span class="pl-en">Set</span>(<span class="pl-c1">D</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_radius</span>,u<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_radius</span>)};<span class="pl-c1">G</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ComputeMass</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>){<span class="pl-k">if</span>(z<span class="pl-k">===</span><span class="pl-c1">undefined</span>)z<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-smi">k</span>.<span class="pl-smi">mass</span><span class="pl-k">=</span>z<span class="pl-k">*</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_pi</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_radius</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_radius</span>;<span class="pl-smi">k</span>.<span class="pl-smi">center</span>.<span class="pl-en">SetV</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_p</span>);<span class="pl-smi">k</span>.<span class="pl-c1">I</span><span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-smi">mass</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L105" class="blob-num js-line-number" data-line-number="105"></td>
        <td id="LC105" class="blob-code blob-code-inner js-file-line">(<span class="pl-c1">0.5</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_radius</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_radius</span><span class="pl-k">+</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_p</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_p</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_p</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_p</span>.<span class="pl-c1">y</span>))};<span class="pl-c1">G</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ComputeSubmergedArea</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>,<span class="pl-smi">u</span>,<span class="pl-c1">D</span>){<span class="pl-k">if</span>(z<span class="pl-k">===</span><span class="pl-c1">undefined</span>)z<span class="pl-k">=</span><span class="pl-c1">0</span>;u<span class="pl-k">=</span><span class="pl-c1">B</span>.<span class="pl-en">MulX</span>(u,<span class="pl-c1">this</span>.<span class="pl-smi">m_p</span>);<span class="pl-k">var</span> <span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-k">-</span>(<span class="pl-c1">B</span>.<span class="pl-en">Dot</span>(k,u)<span class="pl-k">-</span>z);<span class="pl-k">if</span>(<span class="pl-c1">H</span><span class="pl-k">&lt;</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_radius</span><span class="pl-k">+</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>)<span class="pl-k">return</span> <span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-c1">H</span><span class="pl-k">&gt;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_radius</span>){<span class="pl-c1">D</span>.<span class="pl-en">SetV</span>(u);<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_radius</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_radius</span>}z<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_radius</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_radius</span>;<span class="pl-k">var</span> <span class="pl-c1">O</span><span class="pl-k">=</span><span class="pl-c1">H</span><span class="pl-k">*</span><span class="pl-c1">H</span>;<span class="pl-c1">H</span><span class="pl-k">=</span>z<span class="pl-k">*</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">asin</span>(<span class="pl-c1">H</span><span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">m_radius</span>)<span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">/</span><span class="pl-c1">2</span>)<span class="pl-k">+</span><span class="pl-c1">H</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(z<span class="pl-k">-</span><span class="pl-c1">O</span>);z<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">/</span><span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">pow</span>(z<span class="pl-k">-</span><span class="pl-c1">O</span>,<span class="pl-c1">1.5</span>)<span class="pl-k">/</span><span class="pl-c1">H</span>;<span class="pl-c1">D</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">u</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">k</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>z;<span class="pl-c1">D</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">u</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-smi">k</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>z;<span class="pl-k">return</span> <span class="pl-c1">H</span>};<span class="pl-c1">G</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">GetLocalPosition</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L106" class="blob-num js-line-number" data-line-number="106"></td>
        <td id="LC106" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_p</span>};<span class="pl-c1">G</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetLocalPosition</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_p</span>.<span class="pl-en">SetV</span>(k)};<span class="pl-c1">G</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetRadius</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_radius</span>};<span class="pl-c1">G</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetRadius</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>){<span class="pl-k">if</span>(k<span class="pl-k">===</span><span class="pl-c1">undefined</span>)k<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_radius</span><span class="pl-k">=</span>k};<span class="pl-c1">G</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2CircleShape</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>){<span class="pl-k">if</span>(k<span class="pl-k">===</span><span class="pl-c1">undefined</span>)k<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">__super</span>.<span class="pl-smi">b2Shape</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_type</span><span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-smi">e_circleShape</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_radius</span><span class="pl-k">=</span>k};<span class="pl-c1">K</span>.<span class="pl-en">b2EdgeChainDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">K</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2EdgeChainDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">vertexCount</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">isALoop</span><span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span><span class="pl-k">=</span>[]};<span class="pl-smi">Box2D</span>.<span class="pl-en">inherit</span>(y,<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">Shapes</span>.<span class="pl-smi">b2Shape</span>);</td>
      </tr>
      <tr>
        <td id="L107" class="blob-num js-line-number" data-line-number="107"></td>
        <td id="LC107" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">__super</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">Shapes</span>.<span class="pl-smi">b2Shape</span>.<span class="pl-c1">prototype</span>;<span class="pl-smi">y</span>.<span class="pl-en">b2EdgeShape</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">Shapes</span>.<span class="pl-smi">b2Shape</span>.<span class="pl-smi">b2Shape</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>);<span class="pl-c1">this</span>.<span class="pl-smi">s_supportVec</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">V</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">V</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">V</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_coreV1</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">V</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_coreV2</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">V</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_normal</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">V</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_direction</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">V</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_cornerDir1</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">V</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_cornerDir2</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">V</span>};<span class="pl-smi">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">TestPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">false</span>};<span class="pl-smi">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">RayCast</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>,<span class="pl-smi">u</span>){<span class="pl-k">var</span> <span class="pl-c1">D</span>,<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-smi">z</span>.<span class="pl-smi">p2</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">z</span>.<span class="pl-smi">p1</span>.<span class="pl-c1">x</span>,<span class="pl-c1">O</span><span class="pl-k">=</span><span class="pl-smi">z</span>.<span class="pl-smi">p2</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">z</span>.<span class="pl-smi">p1</span>.<span class="pl-c1">y</span>;<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-smi">u</span>.<span class="pl-c1">R</span>;<span class="pl-k">var</span> <span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-smi">u</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-c1">D</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-c1">x</span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L108" class="blob-num js-line-number" data-line-number="108"></td>
        <td id="LC108" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">D</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-c1">y</span>),<span class="pl-c1">R</span><span class="pl-k">=</span><span class="pl-smi">u</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-c1">D</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">D</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-c1">y</span>),<span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-smi">u</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-c1">D</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">D</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span>.<span class="pl-c1">y</span>)<span class="pl-k">-</span><span class="pl-c1">R</span>;u<span class="pl-k">=</span><span class="pl-k">-</span>(<span class="pl-smi">u</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-c1">D</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">D</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span>.<span class="pl-c1">y</span>)<span class="pl-k">-</span><span class="pl-c1">E</span>);<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">100</span><span class="pl-k">*</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>;<span class="pl-k">var</span> <span class="pl-c1">S</span><span class="pl-k">=</span><span class="pl-k">-</span>(<span class="pl-c1">H</span><span class="pl-k">*</span><span class="pl-c1">N</span><span class="pl-k">+</span><span class="pl-c1">O</span><span class="pl-k">*</span>u);<span class="pl-k">if</span>(<span class="pl-c1">S</span><span class="pl-k">&gt;</span><span class="pl-c1">D</span>){<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-smi">z</span>.<span class="pl-smi">p1</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">E</span>;<span class="pl-k">var</span> aa<span class="pl-k">=</span><span class="pl-smi">z</span>.<span class="pl-smi">p1</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">R</span>;<span class="pl-c1">R</span><span class="pl-k">=</span><span class="pl-c1">E</span><span class="pl-k">*</span><span class="pl-c1">N</span><span class="pl-k">+</span>aa<span class="pl-k">*</span>u;<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;=</span><span class="pl-c1">R</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">R</span><span class="pl-k">&lt;=</span><span class="pl-smi">z</span>.<span class="pl-smi">maxFraction</span><span class="pl-k">*</span><span class="pl-c1">S</span>){z<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">H</span><span class="pl-k">*</span>aa<span class="pl-k">+</span><span class="pl-c1">O</span><span class="pl-k">*</span><span class="pl-c1">E</span>;<span class="pl-k">if</span>(<span class="pl-k">-</span><span class="pl-c1">D</span><span class="pl-k">*</span><span class="pl-c1">S</span><span class="pl-k">&lt;=</span>z<span class="pl-k">&amp;&amp;</span>z<span class="pl-k">&lt;=</span><span class="pl-c1">S</span><span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">D</span>)){<span class="pl-c1">R</span><span class="pl-k">/=</span><span class="pl-c1">S</span>;<span class="pl-smi">k</span>.<span class="pl-smi">fraction</span><span class="pl-k">=</span><span class="pl-c1">R</span>;z<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">N</span><span class="pl-k">*</span><span class="pl-c1">N</span><span class="pl-k">+</span>u<span class="pl-k">*</span>u);<span class="pl-smi">k</span>.<span class="pl-smi">normal</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">N</span><span class="pl-k">/</span>z;<span class="pl-smi">k</span>.<span class="pl-smi">normal</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>u<span class="pl-k">/</span>z;<span class="pl-k">return</span> <span class="pl-c1">true</span>}}}<span class="pl-k">return</span> <span class="pl-c1">false</span>};<span class="pl-smi">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ComputeAABB</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>){<span class="pl-k">var</span> u<span class="pl-k">=</span><span class="pl-smi">z</span>.<span class="pl-c1">R</span>,</td>
      </tr>
      <tr>
        <td id="L109" class="blob-num js-line-number" data-line-number="109"></td>
        <td id="LC109" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-smi">z</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-smi">u</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">u</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-c1">y</span>),<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-smi">z</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-smi">u</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">u</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-c1">y</span>),<span class="pl-c1">O</span><span class="pl-k">=</span><span class="pl-smi">z</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-smi">u</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">u</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span>.<span class="pl-c1">y</span>);u<span class="pl-k">=</span><span class="pl-smi">z</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-smi">u</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">u</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span>.<span class="pl-c1">y</span>);<span class="pl-k">if</span>(<span class="pl-c1">D</span><span class="pl-k">&lt;</span><span class="pl-c1">O</span>){<span class="pl-smi">k</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">D</span>;<span class="pl-smi">k</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">O</span>}<span class="pl-k">else</span>{<span class="pl-smi">k</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">O</span>;<span class="pl-smi">k</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">D</span>}<span class="pl-k">if</span>(<span class="pl-c1">H</span><span class="pl-k">&lt;</span>u){<span class="pl-smi">k</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">H</span>;<span class="pl-smi">k</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>u}<span class="pl-k">else</span>{<span class="pl-smi">k</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>u;<span class="pl-smi">k</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">H</span>}};<span class="pl-smi">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ComputeMass</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>){<span class="pl-smi">k</span>.<span class="pl-smi">mass</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-smi">k</span>.<span class="pl-smi">center</span>.<span class="pl-en">SetV</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>);<span class="pl-smi">k</span>.<span class="pl-c1">I</span><span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-smi">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">ComputeSubmergedArea</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L110" class="blob-num js-line-number" data-line-number="110"></td>
        <td id="LC110" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>,<span class="pl-smi">u</span>,<span class="pl-c1">D</span>){<span class="pl-k">if</span>(z<span class="pl-k">===</span><span class="pl-c1">undefined</span>)z<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> <span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">V</span>(<span class="pl-smi">k</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>z,<span class="pl-smi">k</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>z),<span class="pl-c1">O</span><span class="pl-k">=</span><span class="pl-c1">B</span>.<span class="pl-en">MulX</span>(u,<span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>);u<span class="pl-k">=</span><span class="pl-c1">B</span>.<span class="pl-en">MulX</span>(u,<span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span>);<span class="pl-k">var</span> <span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-c1">B</span>.<span class="pl-en">Dot</span>(k,<span class="pl-c1">O</span>)<span class="pl-k">-</span>z;k<span class="pl-k">=</span><span class="pl-c1">B</span>.<span class="pl-en">Dot</span>(k,u)<span class="pl-k">-</span>z;<span class="pl-k">if</span>(<span class="pl-c1">E</span><span class="pl-k">&gt;</span><span class="pl-c1">0</span>)<span class="pl-k">if</span>(k<span class="pl-k">&gt;</span><span class="pl-c1">0</span>)<span class="pl-k">return</span> <span class="pl-c1">0</span>;<span class="pl-k">else</span>{<span class="pl-c1">O</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-k">-</span>k<span class="pl-k">/</span>(<span class="pl-c1">E</span><span class="pl-k">-</span>k)<span class="pl-k">*</span><span class="pl-c1">O</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">E</span><span class="pl-k">/</span>(<span class="pl-c1">E</span><span class="pl-k">-</span>k)<span class="pl-k">*</span><span class="pl-smi">u</span>.<span class="pl-c1">x</span>;<span class="pl-c1">O</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-k">-</span>k<span class="pl-k">/</span>(<span class="pl-c1">E</span><span class="pl-k">-</span>k)<span class="pl-k">*</span><span class="pl-c1">O</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">E</span><span class="pl-k">/</span>(<span class="pl-c1">E</span><span class="pl-k">-</span>k)<span class="pl-k">*</span><span class="pl-smi">u</span>.<span class="pl-c1">y</span>}<span class="pl-k">else</span> <span class="pl-k">if</span>(k<span class="pl-k">&gt;</span><span class="pl-c1">0</span>){<span class="pl-smi">u</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-k">-</span>k<span class="pl-k">/</span>(<span class="pl-c1">E</span><span class="pl-k">-</span>k)<span class="pl-k">*</span><span class="pl-c1">O</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">E</span><span class="pl-k">/</span>(<span class="pl-c1">E</span><span class="pl-k">-</span>k)<span class="pl-k">*</span><span class="pl-smi">u</span>.<span class="pl-c1">x</span>;<span class="pl-smi">u</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-k">-</span>k<span class="pl-k">/</span>(<span class="pl-c1">E</span><span class="pl-k">-</span>k)<span class="pl-k">*</span><span class="pl-c1">O</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">E</span><span class="pl-k">/</span>(<span class="pl-c1">E</span><span class="pl-k">-</span>k)<span class="pl-k">*</span><span class="pl-smi">u</span>.<span class="pl-c1">y</span>}<span class="pl-c1">D</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>(<span class="pl-c1">H</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">O</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">u</span>.<span class="pl-c1">x</span>)<span class="pl-k">/</span><span class="pl-c1">3</span>;<span class="pl-c1">D</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>(<span class="pl-c1">H</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">O</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-smi">u</span>.<span class="pl-c1">y</span>)<span class="pl-k">/</span><span class="pl-c1">3</span>;<span class="pl-k">return</span> <span class="pl-c1">0.5</span><span class="pl-k">*</span>((<span class="pl-c1">O</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">H</span>.<span class="pl-c1">x</span>)<span class="pl-k">*</span>(<span class="pl-smi">u</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">H</span>.<span class="pl-c1">y</span>)<span class="pl-k">-</span>(<span class="pl-c1">O</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">H</span>.<span class="pl-c1">y</span>)<span class="pl-k">*</span>(<span class="pl-smi">u</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">H</span>.<span class="pl-c1">x</span>))};<span class="pl-smi">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetLength</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_length</span>};<span class="pl-smi">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetVertex1</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>};<span class="pl-smi">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">GetVertex2</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L111" class="blob-num js-line-number" data-line-number="111"></td>
        <td id="LC111" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span>};<span class="pl-smi">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetCoreVertex1</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_coreV1</span>};<span class="pl-smi">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetCoreVertex2</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_coreV2</span>};<span class="pl-smi">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetNormalVector</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_normal</span>};<span class="pl-smi">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetDirectionVector</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_direction</span>};<span class="pl-smi">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetCorner1Vector</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_cornerDir1</span>};<span class="pl-smi">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetCorner2Vector</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_cornerDir2</span>};<span class="pl-smi">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Corner1IsConvex</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_cornerConvex1</span>};<span class="pl-smi">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">Corner2IsConvex</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L112" class="blob-num js-line-number" data-line-number="112"></td>
        <td id="LC112" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_cornerConvex2</span>};<span class="pl-smi">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetFirstVertex</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>){<span class="pl-k">var</span> z<span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-c1">R</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">V</span>(<span class="pl-smi">k</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-smi">z</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_coreV1</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">z</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_coreV1</span>.<span class="pl-c1">y</span>),<span class="pl-smi">k</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-smi">z</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_coreV1</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">z</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_coreV1</span>.<span class="pl-c1">y</span>))};<span class="pl-smi">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetNextEdge</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_nextEdge</span>};<span class="pl-smi">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetPrevEdge</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_prevEdge</span>};<span class="pl-smi">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Support</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>,<span class="pl-smi">u</span>){<span class="pl-k">if</span>(z<span class="pl-k">===</span><span class="pl-c1">undefined</span>)z<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(u<span class="pl-k">===</span><span class="pl-c1">undefined</span>)u<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> <span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-c1">R</span>,<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-c1">D</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_coreV1</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">D</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_coreV1</span>.<span class="pl-c1">y</span>),</td>
      </tr>
      <tr>
        <td id="L113" class="blob-num js-line-number" data-line-number="113"></td>
        <td id="LC113" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">O</span><span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-c1">D</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_coreV1</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">D</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_coreV1</span>.<span class="pl-c1">y</span>),<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-c1">D</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_coreV2</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">D</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_coreV2</span>.<span class="pl-c1">y</span>);k<span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-c1">D</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_coreV2</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">D</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_coreV2</span>.<span class="pl-c1">y</span>);<span class="pl-k">if</span>(<span class="pl-c1">H</span><span class="pl-k">*</span>z<span class="pl-k">+</span><span class="pl-c1">O</span><span class="pl-k">*</span>u<span class="pl-k">&gt;</span><span class="pl-c1">E</span><span class="pl-k">*</span>z<span class="pl-k">+</span>k<span class="pl-k">*</span>u){<span class="pl-c1">this</span>.<span class="pl-smi">s_supportVec</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">H</span>;<span class="pl-c1">this</span>.<span class="pl-smi">s_supportVec</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">O</span>}<span class="pl-k">else</span>{<span class="pl-c1">this</span>.<span class="pl-smi">s_supportVec</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">E</span>;<span class="pl-c1">this</span>.<span class="pl-smi">s_supportVec</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>k}<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">s_supportVec</span>};<span class="pl-smi">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2EdgeShape</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>){<span class="pl-c1">this</span>.<span class="pl-smi">__super</span>.<span class="pl-smi">b2Shape</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_type</span><span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-smi">e_edgeShape</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_nextEdge</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_prevEdge</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span><span class="pl-k">=</span>k;<span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span><span class="pl-k">=</span>z;<span class="pl-c1">this</span>.<span class="pl-smi">m_direction</span>.<span class="pl-en">Set</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span>.<span class="pl-c1">x</span><span class="pl-k">-</span></td>
      </tr>
      <tr>
        <td id="L114" class="blob-num js-line-number" data-line-number="114"></td>
        <td id="LC114" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-c1">y</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_length</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_direction</span>.<span class="pl-en">Normalize</span>();<span class="pl-c1">this</span>.<span class="pl-smi">m_normal</span>.<span class="pl-en">Set</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_direction</span>.<span class="pl-c1">y</span>,<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_direction</span>.<span class="pl-c1">x</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_coreV1</span>.<span class="pl-en">Set</span>(<span class="pl-k">-</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_toiSlop</span><span class="pl-k">*</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_normal</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_direction</span>.<span class="pl-c1">x</span>)<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-c1">x</span>,<span class="pl-k">-</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_toiSlop</span><span class="pl-k">*</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_normal</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_direction</span>.<span class="pl-c1">y</span>)<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v1</span>.<span class="pl-c1">y</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_coreV2</span>.<span class="pl-en">Set</span>(<span class="pl-k">-</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_toiSlop</span><span class="pl-k">*</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_normal</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_direction</span>.<span class="pl-c1">x</span>)<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span>.<span class="pl-c1">x</span>,<span class="pl-k">-</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_toiSlop</span><span class="pl-k">*</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_normal</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_direction</span>.<span class="pl-c1">y</span>)<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_v2</span>.<span class="pl-c1">y</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_cornerDir1</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_normal</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_cornerDir2</span>.<span class="pl-en">Set</span>(<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_normal</span>.<span class="pl-c1">x</span>,<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_normal</span>.<span class="pl-c1">y</span>)};</td>
      </tr>
      <tr>
        <td id="L115" class="blob-num js-line-number" data-line-number="115"></td>
        <td id="LC115" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetPrevEdge</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>,<span class="pl-smi">u</span>,<span class="pl-c1">D</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_prevEdge</span><span class="pl-k">=</span>k;<span class="pl-c1">this</span>.<span class="pl-smi">m_coreV1</span><span class="pl-k">=</span>z;<span class="pl-c1">this</span>.<span class="pl-smi">m_cornerDir1</span><span class="pl-k">=</span>u;<span class="pl-c1">this</span>.<span class="pl-smi">m_cornerConvex1</span><span class="pl-k">=</span><span class="pl-c1">D</span>};<span class="pl-smi">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetNextEdge</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>,<span class="pl-smi">u</span>,<span class="pl-c1">D</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_nextEdge</span><span class="pl-k">=</span>k;<span class="pl-c1">this</span>.<span class="pl-smi">m_coreV2</span><span class="pl-k">=</span>z;<span class="pl-c1">this</span>.<span class="pl-smi">m_cornerDir2</span><span class="pl-k">=</span>u;<span class="pl-c1">this</span>.<span class="pl-smi">m_cornerConvex2</span><span class="pl-k">=</span><span class="pl-c1">D</span>};<span class="pl-smi">w</span>.<span class="pl-en">b2MassData</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">mass</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">center</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">V</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-c1">I</span><span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-smi">Box2D</span>.<span class="pl-en">inherit</span>(<span class="pl-c1">A</span>,<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">Shapes</span>.<span class="pl-smi">b2Shape</span>);<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">__super</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">Shapes</span>.<span class="pl-smi">b2Shape</span>.<span class="pl-c1">prototype</span>;<span class="pl-c1">A</span>.<span class="pl-en">b2PolygonShape</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">Shapes</span>.<span class="pl-smi">b2Shape</span>.<span class="pl-smi">b2Shape</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>)};</td>
      </tr>
      <tr>
        <td id="L116" class="blob-num js-line-number" data-line-number="116"></td>
        <td id="LC116" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> k<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">A</span>;<span class="pl-smi">k</span>.<span class="pl-en">Set</span>(<span class="pl-c1">this</span>);<span class="pl-k">return</span> k};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Set</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>){<span class="pl-c1">this</span>.<span class="pl-smi">__super</span>.<span class="pl-smi">Set</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,k);<span class="pl-k">if</span>(<span class="pl-smi">Box2D</span>.<span class="pl-en">is</span>(k,<span class="pl-c1">A</span>)){k<span class="pl-k">=</span>k <span class="pl-k">instanceof</span> <span class="pl-c1">A</span><span class="pl-k">?</span>k<span class="pl-k">:</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_centroid</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">k</span>.<span class="pl-smi">m_centroid</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_vertexCount</span><span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-smi">m_vertexCount</span>;<span class="pl-c1">this</span>.<span class="pl-en">Reserve</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_vertexCount</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> z<span class="pl-k">=</span><span class="pl-c1">0</span>;z<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertexCount</span>;z<span class="pl-k">++</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[z].<span class="pl-en">SetV</span>(<span class="pl-smi">k</span>.<span class="pl-smi">m_vertices</span>[z]);<span class="pl-c1">this</span>.<span class="pl-smi">m_normals</span>[z].<span class="pl-en">SetV</span>(<span class="pl-smi">k</span>.<span class="pl-smi">m_normals</span>[z])}}};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetAsArray</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>){<span class="pl-k">if</span>(z<span class="pl-k">===</span><span class="pl-c1">undefined</span>)z<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> u<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>,<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">H</span>;<span class="pl-k">for</span>(<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">D</span><span class="pl-k">&lt;</span><span class="pl-smi">k</span>.<span class="pl-c1">length</span>;<span class="pl-k">++</span><span class="pl-c1">D</span>){<span class="pl-c1">H</span><span class="pl-k">=</span>k[<span class="pl-c1">D</span>];<span class="pl-smi">u</span>.<span class="pl-c1">push</span>(<span class="pl-c1">H</span>)}<span class="pl-c1">this</span>.<span class="pl-en">SetAsVector</span>(u,</td>
      </tr>
      <tr>
        <td id="L117" class="blob-num js-line-number" data-line-number="117"></td>
        <td id="LC117" class="blob-code blob-code-inner js-file-line">z)};<span class="pl-c1">A</span>.<span class="pl-en">AsArray</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>){<span class="pl-k">if</span>(z<span class="pl-k">===</span><span class="pl-c1">undefined</span>)z<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> u<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">A</span>;<span class="pl-smi">u</span>.<span class="pl-en">SetAsArray</span>(k,z);<span class="pl-k">return</span> u};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetAsVector</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>){<span class="pl-k">if</span>(z<span class="pl-k">===</span><span class="pl-c1">undefined</span>)z<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(z<span class="pl-k">==</span><span class="pl-c1">0</span>)z<span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-c1">length</span>;<span class="pl-c1">F</span>.<span class="pl-en">b2Assert</span>(<span class="pl-c1">2</span><span class="pl-k">&lt;=</span>z);<span class="pl-c1">this</span>.<span class="pl-smi">m_vertexCount</span><span class="pl-k">=</span>z;<span class="pl-c1">this</span>.<span class="pl-en">Reserve</span>(z);<span class="pl-k">var</span> u<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(u<span class="pl-k">=</span><span class="pl-c1">0</span>;u<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertexCount</span>;u<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[u].<span class="pl-en">SetV</span>(k[u]);<span class="pl-k">for</span>(u<span class="pl-k">=</span><span class="pl-c1">0</span>;u<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertexCount</span>;<span class="pl-k">++</span>u){<span class="pl-k">var</span> <span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">parseInt</span>(u),<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-c1">parseInt</span>(u<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertexCount</span><span class="pl-k">?</span>u<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">0</span>);<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">B</span>.<span class="pl-en">SubtractVV</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[<span class="pl-c1">H</span>],<span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[<span class="pl-c1">D</span>]);<span class="pl-c1">F</span>.<span class="pl-en">b2Assert</span>(<span class="pl-c1">D</span>.<span class="pl-en">LengthSquared</span>()<span class="pl-k">&gt;</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_normals</span>[u].<span class="pl-en">SetV</span>(<span class="pl-c1">B</span>.<span class="pl-en">CrossVF</span>(<span class="pl-c1">D</span>,</td>
      </tr>
      <tr>
        <td id="L118" class="blob-num js-line-number" data-line-number="118"></td>
        <td id="LC118" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">1</span>));<span class="pl-c1">this</span>.<span class="pl-smi">m_normals</span>[u].<span class="pl-en">Normalize</span>()}<span class="pl-c1">this</span>.<span class="pl-smi">m_centroid</span><span class="pl-k">=</span><span class="pl-c1">A</span>.<span class="pl-en">ComputeCentroid</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_vertexCount</span>)};<span class="pl-c1">A</span>.<span class="pl-en">AsVector</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>){<span class="pl-k">if</span>(z<span class="pl-k">===</span><span class="pl-c1">undefined</span>)z<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> u<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">A</span>;<span class="pl-smi">u</span>.<span class="pl-en">SetAsVector</span>(k,z);<span class="pl-k">return</span> u};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetAsBox</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>){<span class="pl-k">if</span>(k<span class="pl-k">===</span><span class="pl-c1">undefined</span>)k<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(z<span class="pl-k">===</span><span class="pl-c1">undefined</span>)z<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_vertexCount</span><span class="pl-k">=</span><span class="pl-c1">4</span>;<span class="pl-c1">this</span>.<span class="pl-en">Reserve</span>(<span class="pl-c1">4</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[<span class="pl-c1">0</span>].<span class="pl-en">Set</span>(<span class="pl-k">-</span>k,<span class="pl-k">-</span>z);<span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[<span class="pl-c1">1</span>].<span class="pl-en">Set</span>(k,<span class="pl-k">-</span>z);<span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[<span class="pl-c1">2</span>].<span class="pl-en">Set</span>(k,z);<span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[<span class="pl-c1">3</span>].<span class="pl-en">Set</span>(<span class="pl-k">-</span>k,z);<span class="pl-c1">this</span>.<span class="pl-smi">m_normals</span>[<span class="pl-c1">0</span>].<span class="pl-en">Set</span>(<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_normals</span>[<span class="pl-c1">1</span>].<span class="pl-en">Set</span>(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_normals</span>[<span class="pl-c1">2</span>].<span class="pl-en">Set</span>(<span class="pl-c1">0</span>,</td>
      </tr>
      <tr>
        <td id="L119" class="blob-num js-line-number" data-line-number="119"></td>
        <td id="LC119" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">1</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_normals</span>[<span class="pl-c1">3</span>].<span class="pl-en">Set</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_centroid</span>.<span class="pl-en">SetZero</span>()};<span class="pl-c1">A</span>.<span class="pl-en">AsBox</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>){<span class="pl-k">if</span>(k<span class="pl-k">===</span><span class="pl-c1">undefined</span>)k<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(z<span class="pl-k">===</span><span class="pl-c1">undefined</span>)z<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> u<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">A</span>;<span class="pl-smi">u</span>.<span class="pl-en">SetAsBox</span>(k,z);<span class="pl-k">return</span> u};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetAsOrientedBox</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>,<span class="pl-smi">u</span>,<span class="pl-c1">D</span>){<span class="pl-k">if</span>(k<span class="pl-k">===</span><span class="pl-c1">undefined</span>)k<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(z<span class="pl-k">===</span><span class="pl-c1">undefined</span>)z<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(u<span class="pl-k">===</span><span class="pl-c1">undefined</span>)u<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(<span class="pl-c1">D</span><span class="pl-k">===</span><span class="pl-c1">undefined</span>)<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_vertexCount</span><span class="pl-k">=</span><span class="pl-c1">4</span>;<span class="pl-c1">this</span>.<span class="pl-en">Reserve</span>(<span class="pl-c1">4</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[<span class="pl-c1">0</span>].<span class="pl-en">Set</span>(<span class="pl-k">-</span>k,<span class="pl-k">-</span>z);<span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[<span class="pl-c1">1</span>].<span class="pl-en">Set</span>(k,<span class="pl-k">-</span>z);<span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[<span class="pl-c1">2</span>].<span class="pl-en">Set</span>(k,z);<span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[<span class="pl-c1">3</span>].<span class="pl-en">Set</span>(<span class="pl-k">-</span>k,z);<span class="pl-c1">this</span>.<span class="pl-smi">m_normals</span>[<span class="pl-c1">0</span>].<span class="pl-en">Set</span>(<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_normals</span>[<span class="pl-c1">1</span>].<span class="pl-en">Set</span>(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L120" class="blob-num js-line-number" data-line-number="120"></td>
        <td id="LC120" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_normals</span>[<span class="pl-c1">2</span>].<span class="pl-en">Set</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_normals</span>[<span class="pl-c1">3</span>].<span class="pl-en">Set</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_centroid</span><span class="pl-k">=</span>u;k<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Q</span>;<span class="pl-smi">k</span>.<span class="pl-smi">position</span><span class="pl-k">=</span>u;<span class="pl-smi">k</span>.<span class="pl-c1">R</span>.<span class="pl-en">Set</span>(<span class="pl-c1">D</span>);<span class="pl-k">for</span>(u<span class="pl-k">=</span><span class="pl-c1">0</span>;u<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertexCount</span>;<span class="pl-k">++</span>u){<span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[u]<span class="pl-k">=</span><span class="pl-c1">B</span>.<span class="pl-en">MulX</span>(k,<span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[u]);<span class="pl-c1">this</span>.<span class="pl-smi">m_normals</span>[u]<span class="pl-k">=</span><span class="pl-c1">B</span>.<span class="pl-en">MulMV</span>(<span class="pl-smi">k</span>.<span class="pl-c1">R</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_normals</span>[u])}};<span class="pl-c1">A</span>.<span class="pl-en">AsOrientedBox</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>,<span class="pl-smi">u</span>,<span class="pl-c1">D</span>){<span class="pl-k">if</span>(k<span class="pl-k">===</span><span class="pl-c1">undefined</span>)k<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(z<span class="pl-k">===</span><span class="pl-c1">undefined</span>)z<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(u<span class="pl-k">===</span><span class="pl-c1">undefined</span>)u<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(<span class="pl-c1">D</span><span class="pl-k">===</span><span class="pl-c1">undefined</span>)<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> <span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">A</span>;<span class="pl-c1">H</span>.<span class="pl-en">SetAsOrientedBox</span>(k,z,u,<span class="pl-c1">D</span>);<span class="pl-k">return</span> <span class="pl-c1">H</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetAsEdge</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_vertexCount</span><span class="pl-k">=</span><span class="pl-c1">2</span>;<span class="pl-c1">this</span>.<span class="pl-en">Reserve</span>(<span class="pl-c1">2</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[<span class="pl-c1">0</span>].<span class="pl-en">SetV</span>(k);</td>
      </tr>
      <tr>
        <td id="L121" class="blob-num js-line-number" data-line-number="121"></td>
        <td id="LC121" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[<span class="pl-c1">1</span>].<span class="pl-en">SetV</span>(z);<span class="pl-c1">this</span>.<span class="pl-smi">m_centroid</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(<span class="pl-smi">k</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">z</span>.<span class="pl-c1">x</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_centroid</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(<span class="pl-smi">k</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-smi">z</span>.<span class="pl-c1">y</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_normals</span>[<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-c1">B</span>.<span class="pl-en">CrossVF</span>(<span class="pl-c1">B</span>.<span class="pl-en">SubtractVV</span>(z,k),<span class="pl-c1">1</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_normals</span>[<span class="pl-c1">0</span>].<span class="pl-en">Normalize</span>();<span class="pl-c1">this</span>.<span class="pl-smi">m_normals</span>[<span class="pl-c1">1</span>].<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_normals</span>[<span class="pl-c1">0</span>].<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_normals</span>[<span class="pl-c1">1</span>].<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_normals</span>[<span class="pl-c1">0</span>].<span class="pl-c1">y</span>};<span class="pl-c1">A</span>.<span class="pl-en">AsEdge</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>){<span class="pl-k">var</span> u<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">A</span>;<span class="pl-smi">u</span>.<span class="pl-en">SetAsEdge</span>(k,z);<span class="pl-k">return</span> u};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">TestPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>){<span class="pl-k">var</span> u;u<span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-c1">R</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> <span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-smi">z</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">k</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span>,<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-smi">z</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">k</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span>,<span class="pl-c1">O</span><span class="pl-k">=</span><span class="pl-c1">D</span><span class="pl-k">*</span><span class="pl-smi">u</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">H</span><span class="pl-k">*</span><span class="pl-smi">u</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span>,<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-c1">D</span><span class="pl-k">*</span><span class="pl-smi">u</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">H</span><span class="pl-k">*</span><span class="pl-smi">u</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span>,<span class="pl-c1">R</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">R</span><span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertexCount</span>;<span class="pl-k">++</span><span class="pl-c1">R</span>){u<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[<span class="pl-c1">R</span>];</td>
      </tr>
      <tr>
        <td id="L122" class="blob-num js-line-number" data-line-number="122"></td>
        <td id="LC122" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">O</span><span class="pl-k">-</span><span class="pl-smi">u</span>.<span class="pl-c1">x</span>;<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-c1">E</span><span class="pl-k">-</span><span class="pl-smi">u</span>.<span class="pl-c1">y</span>;u<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_normals</span>[<span class="pl-c1">R</span>];<span class="pl-k">if</span>(<span class="pl-smi">u</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">D</span><span class="pl-k">+</span><span class="pl-smi">u</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">H</span><span class="pl-k">&gt;</span><span class="pl-c1">0</span>)<span class="pl-k">return</span> <span class="pl-c1">false</span>}<span class="pl-k">return</span> <span class="pl-c1">true</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">RayCast</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>,<span class="pl-smi">u</span>){<span class="pl-k">var</span> <span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-smi">z</span>.<span class="pl-smi">maxFraction</span>,<span class="pl-c1">O</span><span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">R</span>,<span class="pl-c1">N</span>;<span class="pl-c1">O</span><span class="pl-k">=</span><span class="pl-smi">z</span>.<span class="pl-smi">p1</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">u</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span>;<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-smi">z</span>.<span class="pl-smi">p1</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">u</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span>;<span class="pl-c1">R</span><span class="pl-k">=</span><span class="pl-smi">u</span>.<span class="pl-c1">R</span>;<span class="pl-k">var</span> <span class="pl-c1">S</span><span class="pl-k">=</span><span class="pl-c1">O</span><span class="pl-k">*</span><span class="pl-c1">R</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">E</span><span class="pl-k">*</span><span class="pl-c1">R</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span>,aa<span class="pl-k">=</span><span class="pl-c1">O</span><span class="pl-k">*</span><span class="pl-c1">R</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">E</span><span class="pl-k">*</span><span class="pl-c1">R</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span>;<span class="pl-c1">O</span><span class="pl-k">=</span><span class="pl-smi">z</span>.<span class="pl-smi">p2</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">u</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span>;<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-smi">z</span>.<span class="pl-smi">p2</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">u</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span>;<span class="pl-c1">R</span><span class="pl-k">=</span><span class="pl-smi">u</span>.<span class="pl-c1">R</span>;z<span class="pl-k">=</span><span class="pl-c1">O</span><span class="pl-k">*</span><span class="pl-c1">R</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">E</span><span class="pl-k">*</span><span class="pl-c1">R</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">S</span>;<span class="pl-c1">R</span><span class="pl-k">=</span><span class="pl-c1">O</span><span class="pl-k">*</span><span class="pl-c1">R</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">E</span><span class="pl-k">*</span><span class="pl-c1">R</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>aa;<span class="pl-k">for</span>(<span class="pl-k">var</span> <span class="pl-c1">Z</span><span class="pl-k">=</span><span class="pl-c1">parseInt</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>),d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertexCount</span>;<span class="pl-k">++</span>d){<span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[d];<span class="pl-c1">O</span><span class="pl-k">=</span><span class="pl-c1">N</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">S</span>;<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-c1">N</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>aa;<span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_normals</span>[d];<span class="pl-c1">O</span><span class="pl-k">=</span><span class="pl-c1">N</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">O</span><span class="pl-k">+</span><span class="pl-c1">N</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">E</span>;<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-c1">N</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>z<span class="pl-k">+</span><span class="pl-c1">N</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">R</span>;<span class="pl-k">if</span>(<span class="pl-c1">E</span><span class="pl-k">==</span></td>
      </tr>
      <tr>
        <td id="L123" class="blob-num js-line-number" data-line-number="123"></td>
        <td id="LC123" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>){<span class="pl-k">if</span>(<span class="pl-c1">O</span><span class="pl-k">&lt;</span><span class="pl-c1">0</span>)<span class="pl-k">return</span> <span class="pl-c1">false</span>}<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-c1">E</span><span class="pl-k">&lt;</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">O</span><span class="pl-k">&lt;</span><span class="pl-c1">D</span><span class="pl-k">*</span><span class="pl-c1">E</span>){<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">O</span><span class="pl-k">/</span><span class="pl-c1">E</span>;<span class="pl-c1">Z</span><span class="pl-k">=</span>d}<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-c1">E</span><span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">O</span><span class="pl-k">&lt;</span><span class="pl-c1">H</span><span class="pl-k">*</span><span class="pl-c1">E</span>)<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-c1">O</span><span class="pl-k">/</span><span class="pl-c1">E</span>;<span class="pl-k">if</span>(<span class="pl-c1">H</span><span class="pl-k">&lt;</span><span class="pl-c1">D</span><span class="pl-k">-</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>)<span class="pl-k">return</span> <span class="pl-c1">false</span>}<span class="pl-k">if</span>(<span class="pl-c1">Z</span><span class="pl-k">&gt;=</span><span class="pl-c1">0</span>){<span class="pl-smi">k</span>.<span class="pl-smi">fraction</span><span class="pl-k">=</span><span class="pl-c1">D</span>;<span class="pl-c1">R</span><span class="pl-k">=</span><span class="pl-smi">u</span>.<span class="pl-c1">R</span>;<span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_normals</span>[<span class="pl-c1">Z</span>];<span class="pl-smi">k</span>.<span class="pl-smi">normal</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">R</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">N</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">R</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">N</span>.<span class="pl-c1">y</span>;<span class="pl-smi">k</span>.<span class="pl-smi">normal</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">R</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">N</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">R</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">N</span>.<span class="pl-c1">y</span>;<span class="pl-k">return</span> <span class="pl-c1">true</span>}<span class="pl-k">return</span> <span class="pl-c1">false</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ComputeAABB</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> u<span class="pl-k">=</span><span class="pl-smi">z</span>.<span class="pl-c1">R</span>,<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[<span class="pl-c1">0</span>],<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-smi">z</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-smi">u</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">D</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">u</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">D</span>.<span class="pl-c1">y</span>),<span class="pl-c1">O</span><span class="pl-k">=</span><span class="pl-smi">z</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-smi">u</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">D</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">u</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">D</span>.<span class="pl-c1">y</span>),<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-c1">H</span>,<span class="pl-c1">R</span><span class="pl-k">=</span><span class="pl-c1">O</span>,<span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">N</span><span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertexCount</span>;<span class="pl-k">++</span><span class="pl-c1">N</span>){<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[<span class="pl-c1">N</span>];<span class="pl-k">var</span> <span class="pl-c1">S</span><span class="pl-k">=</span><span class="pl-smi">z</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-smi">u</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L124" class="blob-num js-line-number" data-line-number="124"></td>
        <td id="LC124" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">D</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">u</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">D</span>.<span class="pl-c1">y</span>);<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-smi">z</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-smi">u</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">D</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">u</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">D</span>.<span class="pl-c1">y</span>);<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-c1">H</span><span class="pl-k">&lt;</span><span class="pl-c1">S</span><span class="pl-k">?</span><span class="pl-c1">H</span><span class="pl-k">:</span><span class="pl-c1">S</span>;<span class="pl-c1">O</span><span class="pl-k">=</span><span class="pl-c1">O</span><span class="pl-k">&lt;</span><span class="pl-c1">D</span><span class="pl-k">?</span><span class="pl-c1">O</span><span class="pl-k">:</span><span class="pl-c1">D</span>;<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-c1">E</span><span class="pl-k">&gt;</span><span class="pl-c1">S</span><span class="pl-k">?</span><span class="pl-c1">E</span><span class="pl-k">:</span><span class="pl-c1">S</span>;<span class="pl-c1">R</span><span class="pl-k">=</span><span class="pl-c1">R</span><span class="pl-k">&gt;</span><span class="pl-c1">D</span><span class="pl-k">?</span><span class="pl-c1">R</span><span class="pl-k">:</span><span class="pl-c1">D</span>}<span class="pl-smi">k</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">H</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_radius</span>;<span class="pl-smi">k</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">O</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_radius</span>;<span class="pl-smi">k</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">E</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_radius</span>;<span class="pl-smi">k</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">R</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_radius</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ComputeMass</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>){<span class="pl-k">if</span>(z<span class="pl-k">===</span><span class="pl-c1">undefined</span>)z<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_vertexCount</span><span class="pl-k">==</span><span class="pl-c1">2</span>){<span class="pl-smi">k</span>.<span class="pl-smi">center</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[<span class="pl-c1">0</span>].<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[<span class="pl-c1">1</span>].<span class="pl-c1">x</span>);<span class="pl-smi">k</span>.<span class="pl-smi">center</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[<span class="pl-c1">0</span>].<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[<span class="pl-c1">1</span>].<span class="pl-c1">y</span>);<span class="pl-smi">k</span>.<span class="pl-smi">mass</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-smi">k</span>.<span class="pl-c1">I</span><span class="pl-k">=</span><span class="pl-c1">0</span>}<span class="pl-k">else</span>{<span class="pl-k">for</span>(<span class="pl-k">var</span> u<span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">O</span><span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">3</span>,<span class="pl-c1">R</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">R</span><span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertexCount</span>;<span class="pl-k">++</span><span class="pl-c1">R</span>){<span class="pl-k">var</span> <span class="pl-c1">N</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L125" class="blob-num js-line-number" data-line-number="125"></td>
        <td id="LC125" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[<span class="pl-c1">R</span>],<span class="pl-c1">S</span><span class="pl-k">=</span><span class="pl-c1">R</span><span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertexCount</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[<span class="pl-c1">parseInt</span>(<span class="pl-c1">R</span><span class="pl-k">+</span><span class="pl-c1">1</span>)]<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[<span class="pl-c1">0</span>],aa<span class="pl-k">=</span><span class="pl-c1">N</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">0</span>,<span class="pl-c1">Z</span><span class="pl-k">=</span><span class="pl-c1">N</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">0</span>,h<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">0</span>,l<span class="pl-k">=</span>aa<span class="pl-k">*</span>h<span class="pl-k">-</span><span class="pl-c1">Z</span><span class="pl-k">*</span>d,j<span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>l;<span class="pl-c1">H</span><span class="pl-k">+=</span>j;u<span class="pl-k">+=</span>j<span class="pl-k">*</span><span class="pl-c1">E</span><span class="pl-k">*</span>(<span class="pl-c1">0</span><span class="pl-k">+</span><span class="pl-c1">N</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">S</span>.<span class="pl-c1">x</span>);<span class="pl-c1">D</span><span class="pl-k">+=</span>j<span class="pl-k">*</span><span class="pl-c1">E</span><span class="pl-k">*</span>(<span class="pl-c1">0</span><span class="pl-k">+</span><span class="pl-c1">N</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">S</span>.<span class="pl-c1">y</span>);<span class="pl-c1">N</span><span class="pl-k">=</span>aa;<span class="pl-c1">Z</span><span class="pl-k">=</span><span class="pl-c1">Z</span>;d<span class="pl-k">=</span>d;h<span class="pl-k">=</span>h;<span class="pl-c1">O</span><span class="pl-k">+=</span>l<span class="pl-k">*</span>(<span class="pl-c1">E</span><span class="pl-k">*</span>(<span class="pl-c1">0.25</span><span class="pl-k">*</span>(<span class="pl-c1">N</span><span class="pl-k">*</span><span class="pl-c1">N</span><span class="pl-k">+</span>d<span class="pl-k">*</span><span class="pl-c1">N</span><span class="pl-k">+</span>d<span class="pl-k">*</span>d)<span class="pl-k">+</span>(<span class="pl-c1">0</span><span class="pl-k">*</span><span class="pl-c1">N</span><span class="pl-k">+</span><span class="pl-c1">0</span><span class="pl-k">*</span>d))<span class="pl-k">+</span><span class="pl-c1">0</span><span class="pl-k">+</span>(<span class="pl-c1">E</span><span class="pl-k">*</span>(<span class="pl-c1">0.25</span><span class="pl-k">*</span>(<span class="pl-c1">Z</span><span class="pl-k">*</span><span class="pl-c1">Z</span><span class="pl-k">+</span>h<span class="pl-k">*</span><span class="pl-c1">Z</span><span class="pl-k">+</span>h<span class="pl-k">*</span>h)<span class="pl-k">+</span>(<span class="pl-c1">0</span><span class="pl-k">*</span><span class="pl-c1">Z</span><span class="pl-k">+</span><span class="pl-c1">0</span><span class="pl-k">*</span>h))<span class="pl-k">+</span><span class="pl-c1">0</span>))}<span class="pl-smi">k</span>.<span class="pl-smi">mass</span><span class="pl-k">=</span>z<span class="pl-k">*</span><span class="pl-c1">H</span>;u<span class="pl-k">*=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">H</span>;<span class="pl-c1">D</span><span class="pl-k">*=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">H</span>;<span class="pl-smi">k</span>.<span class="pl-smi">center</span>.<span class="pl-en">Set</span>(u,<span class="pl-c1">D</span>);<span class="pl-smi">k</span>.<span class="pl-c1">I</span><span class="pl-k">=</span>z<span class="pl-k">*</span><span class="pl-c1">O</span>}};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ComputeSubmergedArea</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>,<span class="pl-smi">u</span>,<span class="pl-c1">D</span>){<span class="pl-k">if</span>(z<span class="pl-k">===</span><span class="pl-c1">undefined</span>)z<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> <span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-c1">B</span>.<span class="pl-en">MulTMV</span>(<span class="pl-smi">u</span>.<span class="pl-c1">R</span>,k),<span class="pl-c1">O</span><span class="pl-k">=</span>z<span class="pl-k">-</span><span class="pl-c1">B</span>.<span class="pl-en">Dot</span>(k,<span class="pl-smi">u</span>.<span class="pl-smi">position</span>),<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector_a2j_Number</span>,<span class="pl-c1">R</span><span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-c1">parseInt</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>);z<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L126" class="blob-num js-line-number" data-line-number="126"></td>
        <td id="LC126" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">parseInt</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-k">var</span> <span class="pl-c1">S</span><span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-k">for</span>(k<span class="pl-k">=</span>k<span class="pl-k">=</span><span class="pl-c1">0</span>;k<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertexCount</span>;<span class="pl-k">++</span>k){<span class="pl-c1">E</span>[k]<span class="pl-k">=</span><span class="pl-c1">B</span>.<span class="pl-en">Dot</span>(<span class="pl-c1">H</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[k])<span class="pl-k">-</span><span class="pl-c1">O</span>;<span class="pl-k">var</span> aa<span class="pl-k">=</span><span class="pl-c1">E</span>[k]<span class="pl-k">&lt;</span><span class="pl-k">-</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>;<span class="pl-k">if</span>(k<span class="pl-k">&gt;</span><span class="pl-c1">0</span>)<span class="pl-k">if</span>(aa){<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">S</span>){<span class="pl-c1">N</span><span class="pl-k">=</span>k<span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-c1">R</span><span class="pl-k">++</span>}}<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-c1">S</span>){z<span class="pl-k">=</span>k<span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-c1">R</span><span class="pl-k">++</span>}<span class="pl-c1">S</span><span class="pl-k">=</span>aa}<span class="pl-k">switch</span>(<span class="pl-c1">R</span>){<span class="pl-k">case</span> <span class="pl-c1">0</span>:<span class="pl-k">if</span>(<span class="pl-c1">S</span>){k<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-c1">this</span>.<span class="pl-en">ComputeMass</span>(k,<span class="pl-c1">1</span>);<span class="pl-c1">D</span>.<span class="pl-en">SetV</span>(<span class="pl-c1">B</span>.<span class="pl-en">MulX</span>(u,<span class="pl-smi">k</span>.<span class="pl-smi">center</span>));<span class="pl-k">return</span> <span class="pl-smi">k</span>.<span class="pl-smi">mass</span>}<span class="pl-k">else</span> <span class="pl-k">return</span> <span class="pl-c1">0</span>;<span class="pl-k">case</span> <span class="pl-c1">1</span>:<span class="pl-k">if</span>(<span class="pl-c1">N</span><span class="pl-k">==</span><span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertexCount</span><span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-k">else</span> z<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertexCount</span><span class="pl-k">-</span><span class="pl-c1">1</span>}k<span class="pl-k">=</span><span class="pl-c1">parseInt</span>((<span class="pl-c1">N</span><span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">%</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertexCount</span>);<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-c1">parseInt</span>((z<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">%</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertexCount</span>);<span class="pl-c1">O</span><span class="pl-k">=</span>(<span class="pl-c1">0</span><span class="pl-k">-</span><span class="pl-c1">E</span>[<span class="pl-c1">N</span>])<span class="pl-k">/</span>(<span class="pl-c1">E</span>[k]<span class="pl-k">-</span><span class="pl-c1">E</span>[<span class="pl-c1">N</span>]);<span class="pl-c1">E</span><span class="pl-k">=</span>(<span class="pl-c1">0</span><span class="pl-k">-</span><span class="pl-c1">E</span>[z])<span class="pl-k">/</span>(<span class="pl-c1">E</span>[<span class="pl-c1">H</span>]<span class="pl-k">-</span><span class="pl-c1">E</span>[z]);<span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">V</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[<span class="pl-c1">N</span>].<span class="pl-c1">x</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L127" class="blob-num js-line-number" data-line-number="127"></td>
        <td id="LC127" class="blob-code blob-code-inner js-file-line">(<span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-c1">O</span>)<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[k].<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">O</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[<span class="pl-c1">N</span>].<span class="pl-c1">y</span><span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-c1">O</span>)<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[k].<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">O</span>);z<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">V</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[z].<span class="pl-c1">x</span><span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-c1">E</span>)<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[<span class="pl-c1">H</span>].<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">E</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[z].<span class="pl-c1">y</span><span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-c1">E</span>)<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[<span class="pl-c1">H</span>].<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">E</span>);<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">O</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">V</span>;<span class="pl-c1">R</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[k];<span class="pl-k">for</span>(k<span class="pl-k">=</span>k;k<span class="pl-k">!=</span><span class="pl-c1">H</span>;){k<span class="pl-k">=</span>(k<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">%</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertexCount</span>;<span class="pl-c1">S</span><span class="pl-k">=</span>k<span class="pl-k">==</span><span class="pl-c1">H</span><span class="pl-k">?</span>z<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[k];aa<span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>((<span class="pl-c1">R</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">N</span>.<span class="pl-c1">x</span>)<span class="pl-k">*</span>(<span class="pl-c1">S</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">N</span>.<span class="pl-c1">y</span>)<span class="pl-k">-</span>(<span class="pl-c1">R</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">N</span>.<span class="pl-c1">y</span>)<span class="pl-k">*</span>(<span class="pl-c1">S</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">N</span>.<span class="pl-c1">x</span>));<span class="pl-c1">E</span><span class="pl-k">+=</span>aa;<span class="pl-c1">O</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span>aa<span class="pl-k">*</span>(<span class="pl-c1">N</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">R</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">S</span>.<span class="pl-c1">x</span>)<span class="pl-k">/</span><span class="pl-c1">3</span>;<span class="pl-c1">O</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span>aa<span class="pl-k">*</span>(<span class="pl-c1">N</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">R</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">S</span>.<span class="pl-c1">y</span>)<span class="pl-k">/</span><span class="pl-c1">3</span>;<span class="pl-c1">R</span><span class="pl-k">=</span><span class="pl-c1">S</span>}<span class="pl-c1">O</span>.<span class="pl-en">Multiply</span>(<span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">E</span>);<span class="pl-c1">D</span>.<span class="pl-en">SetV</span>(<span class="pl-c1">B</span>.<span class="pl-en">MulX</span>(u,<span class="pl-c1">O</span>));<span class="pl-k">return</span> <span class="pl-c1">E</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetVertexCount</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_vertexCount</span>};</td>
      </tr>
      <tr>
        <td id="L128" class="blob-num js-line-number" data-line-number="128"></td>
        <td id="LC128" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetVertices</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetNormals</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_normals</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetSupport</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> z<span class="pl-k">=</span><span class="pl-c1">0</span>,u<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[<span class="pl-c1">0</span>].<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">k</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[<span class="pl-c1">0</span>].<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">k</span>.<span class="pl-c1">y</span>,<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">D</span><span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertexCount</span>;<span class="pl-k">++</span><span class="pl-c1">D</span>){<span class="pl-k">var</span> <span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[<span class="pl-c1">D</span>].<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">k</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[<span class="pl-c1">D</span>].<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">k</span>.<span class="pl-c1">y</span>;<span class="pl-k">if</span>(<span class="pl-c1">H</span><span class="pl-k">&gt;</span>u){z<span class="pl-k">=</span><span class="pl-c1">D</span>;u<span class="pl-k">=</span><span class="pl-c1">H</span>}}<span class="pl-k">return</span> z};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetSupportVertex</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> z<span class="pl-k">=</span><span class="pl-c1">0</span>,u<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[<span class="pl-c1">0</span>].<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">k</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[<span class="pl-c1">0</span>].<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">k</span>.<span class="pl-c1">y</span>,<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">D</span><span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertexCount</span>;<span class="pl-k">++</span><span class="pl-c1">D</span>){<span class="pl-k">var</span> <span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[<span class="pl-c1">D</span>].<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">k</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[<span class="pl-c1">D</span>].<span class="pl-c1">y</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L129" class="blob-num js-line-number" data-line-number="129"></td>
        <td id="LC129" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">k</span>.<span class="pl-c1">y</span>;<span class="pl-k">if</span>(<span class="pl-c1">H</span><span class="pl-k">&gt;</span>u){z<span class="pl-k">=</span><span class="pl-c1">D</span>;u<span class="pl-k">=</span><span class="pl-c1">H</span>}}<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[z]};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Validate</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">false</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2PolygonShape</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">__super</span>.<span class="pl-smi">b2Shape</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_type</span><span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-smi">e_polygonShape</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_centroid</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">V</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_normals</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Reserve</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>){<span class="pl-k">if</span>(k<span class="pl-k">===</span><span class="pl-c1">undefined</span>)k<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> z<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>.<span class="pl-c1">length</span>);z<span class="pl-k">&lt;</span>k;z<span class="pl-k">++</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_vertices</span>[z]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">V</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_normals</span>[z]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">V</span>}};<span class="pl-c1">A</span>.<span class="pl-en">ComputeCentroid</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>){<span class="pl-k">if</span>(z<span class="pl-k">===</span><span class="pl-c1">undefined</span>)z<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> u<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">V</span>,<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span></td>
      </tr>
      <tr>
        <td id="L130" class="blob-num js-line-number" data-line-number="130"></td>
        <td id="LC130" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">3</span>,<span class="pl-c1">O</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">O</span><span class="pl-k">&lt;</span>z;<span class="pl-k">++</span><span class="pl-c1">O</span>){<span class="pl-k">var</span> <span class="pl-c1">E</span><span class="pl-k">=</span>k[<span class="pl-c1">O</span>],<span class="pl-c1">R</span><span class="pl-k">=</span><span class="pl-c1">O</span><span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">&lt;</span>z<span class="pl-k">?</span>k[<span class="pl-c1">parseInt</span>(<span class="pl-c1">O</span><span class="pl-k">+</span><span class="pl-c1">1</span>)]<span class="pl-k">:</span>k[<span class="pl-c1">0</span>],<span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>((<span class="pl-c1">E</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">0</span>)<span class="pl-k">*</span>(<span class="pl-c1">R</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">0</span>)<span class="pl-k">-</span>(<span class="pl-c1">E</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">0</span>)<span class="pl-k">*</span>(<span class="pl-c1">R</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">0</span>));<span class="pl-c1">D</span><span class="pl-k">+=</span><span class="pl-c1">N</span>;<span class="pl-smi">u</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-c1">N</span><span class="pl-k">*</span><span class="pl-c1">H</span><span class="pl-k">*</span>(<span class="pl-c1">0</span><span class="pl-k">+</span><span class="pl-c1">E</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">R</span>.<span class="pl-c1">x</span>);<span class="pl-smi">u</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-c1">N</span><span class="pl-k">*</span><span class="pl-c1">H</span><span class="pl-k">*</span>(<span class="pl-c1">0</span><span class="pl-k">+</span><span class="pl-c1">E</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">R</span>.<span class="pl-c1">y</span>)}<span class="pl-smi">u</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">D</span>;<span class="pl-smi">u</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">D</span>;<span class="pl-k">return</span> u};<span class="pl-c1">A</span>.<span class="pl-en">ComputeOBB</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>,<span class="pl-smi">u</span>){<span class="pl-k">if</span>(u<span class="pl-k">===</span><span class="pl-c1">undefined</span>)u<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> <span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>(u<span class="pl-k">+</span><span class="pl-c1">1</span>);<span class="pl-k">for</span>(<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">D</span><span class="pl-k">&lt;</span>u;<span class="pl-k">++</span><span class="pl-c1">D</span>)<span class="pl-c1">H</span>[<span class="pl-c1">D</span>]<span class="pl-k">=</span>z[<span class="pl-c1">D</span>];<span class="pl-c1">H</span>[u]<span class="pl-k">=</span><span class="pl-c1">H</span>[<span class="pl-c1">0</span>];z<span class="pl-k">=</span><span class="pl-c1">Number</span>.<span class="pl-c1">MAX_VALUE</span>;<span class="pl-k">for</span>(<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">D</span><span class="pl-k">&lt;=</span>u;<span class="pl-k">++</span><span class="pl-c1">D</span>){<span class="pl-k">var</span> <span class="pl-c1">O</span><span class="pl-k">=</span><span class="pl-c1">H</span>[<span class="pl-c1">parseInt</span>(<span class="pl-c1">D</span><span class="pl-k">-</span><span class="pl-c1">1</span>)],<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-c1">H</span>[<span class="pl-c1">D</span>].<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">O</span>.<span class="pl-c1">x</span>,<span class="pl-c1">R</span><span class="pl-k">=</span><span class="pl-c1">H</span>[<span class="pl-c1">D</span>].<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">O</span>.<span class="pl-c1">y</span>,<span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">E</span><span class="pl-k">*</span><span class="pl-c1">E</span><span class="pl-k">+</span><span class="pl-c1">R</span><span class="pl-k">*</span><span class="pl-c1">R</span>);<span class="pl-c1">E</span><span class="pl-k">/=</span><span class="pl-c1">N</span>;<span class="pl-c1">R</span><span class="pl-k">/=</span><span class="pl-c1">N</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> <span class="pl-c1">S</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">R</span>,aa<span class="pl-k">=</span><span class="pl-c1">E</span>,<span class="pl-c1">Z</span><span class="pl-k">=</span><span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-c1">Number</span>.<span class="pl-c1">MAX_VALUE</span>,d<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">Number</span>.<span class="pl-c1">MAX_VALUE</span>,h<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">Number</span>.<span class="pl-c1">MAX_VALUE</span>,l<span class="pl-k">=</span><span class="pl-c1">0</span>;l<span class="pl-k">&lt;</span>u;<span class="pl-k">++</span>l){<span class="pl-k">var</span> j<span class="pl-k">=</span><span class="pl-c1">H</span>[l].<span class="pl-c1">x</span><span class="pl-k">-</span></td>
      </tr>
      <tr>
        <td id="L131" class="blob-num js-line-number" data-line-number="131"></td>
        <td id="LC131" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">O</span>.<span class="pl-c1">x</span>,o<span class="pl-k">=</span><span class="pl-c1">H</span>[l].<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">O</span>.<span class="pl-c1">y</span>,q<span class="pl-k">=</span><span class="pl-c1">E</span><span class="pl-k">*</span>j<span class="pl-k">+</span><span class="pl-c1">R</span><span class="pl-k">*</span>o;j<span class="pl-k">=</span><span class="pl-c1">S</span><span class="pl-k">*</span>j<span class="pl-k">+</span>aa<span class="pl-k">*</span>o;<span class="pl-k">if</span>(q<span class="pl-k">&lt;</span><span class="pl-c1">N</span>)<span class="pl-c1">N</span><span class="pl-k">=</span>q;<span class="pl-k">if</span>(j<span class="pl-k">&lt;</span><span class="pl-c1">Z</span>)<span class="pl-c1">Z</span><span class="pl-k">=</span>j;<span class="pl-k">if</span>(q<span class="pl-k">&gt;</span>d)d<span class="pl-k">=</span>q;<span class="pl-k">if</span>(j<span class="pl-k">&gt;</span>h)h<span class="pl-k">=</span>j}l<span class="pl-k">=</span>(d<span class="pl-k">-</span><span class="pl-c1">N</span>)<span class="pl-k">*</span>(h<span class="pl-k">-</span><span class="pl-c1">Z</span>);<span class="pl-k">if</span>(l<span class="pl-k">&lt;</span><span class="pl-c1">0.95</span><span class="pl-k">*</span>z){z<span class="pl-k">=</span>l;<span class="pl-smi">k</span>.<span class="pl-c1">R</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">E</span>;<span class="pl-smi">k</span>.<span class="pl-c1">R</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">R</span>;<span class="pl-smi">k</span>.<span class="pl-c1">R</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">S</span>;<span class="pl-smi">k</span>.<span class="pl-c1">R</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>aa;<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(<span class="pl-c1">N</span><span class="pl-k">+</span>d);<span class="pl-c1">R</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(<span class="pl-c1">Z</span><span class="pl-k">+</span>h);<span class="pl-c1">S</span><span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-c1">R</span>;<span class="pl-smi">k</span>.<span class="pl-smi">center</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">O</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-c1">S</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">E</span><span class="pl-k">+</span><span class="pl-c1">S</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">R</span>);<span class="pl-smi">k</span>.<span class="pl-smi">center</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">O</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-c1">S</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">E</span><span class="pl-k">+</span><span class="pl-c1">S</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">R</span>);<span class="pl-smi">k</span>.<span class="pl-smi">extents</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(d<span class="pl-k">-</span><span class="pl-c1">N</span>);<span class="pl-smi">k</span>.<span class="pl-smi">extents</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(h<span class="pl-k">-</span><span class="pl-c1">Z</span>)}}};<span class="pl-smi">Box2D</span>.<span class="pl-smi">postDefs</span>.<span class="pl-c1">push</span>(<span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">Shapes</span>.<span class="pl-smi">b2PolygonShape</span>.<span class="pl-smi">s_mat</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>});<span class="pl-c1">U</span>.<span class="pl-en">b2Shape</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">null</span>};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Set</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_radius</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L132" class="blob-num js-line-number" data-line-number="132"></td>
        <td id="LC132" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">k</span>.<span class="pl-smi">m_radius</span>};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetType</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_type</span>};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">TestPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">false</span>};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">RayCast</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">false</span>};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ComputeAABB</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ComputeMass</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ComputeSubmergedArea</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">0</span>};<span class="pl-c1">U</span>.<span class="pl-en">TestOverlap</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>,<span class="pl-smi">u</span>,<span class="pl-c1">D</span>){<span class="pl-k">var</span> <span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">L</span>;<span class="pl-c1">H</span>.<span class="pl-smi">proxyA</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">W</span>;<span class="pl-c1">H</span>.<span class="pl-smi">proxyA</span>.<span class="pl-en">Set</span>(k);<span class="pl-c1">H</span>.<span class="pl-smi">proxyB</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">W</span>;<span class="pl-c1">H</span>.<span class="pl-smi">proxyB</span>.<span class="pl-en">Set</span>(u);<span class="pl-c1">H</span>.<span class="pl-smi">transformA</span><span class="pl-k">=</span>z;<span class="pl-c1">H</span>.<span class="pl-smi">transformB</span><span class="pl-k">=</span><span class="pl-c1">D</span>;<span class="pl-c1">H</span>.<span class="pl-smi">useRadii</span><span class="pl-k">=</span><span class="pl-c1">true</span>;k<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Y</span>;<span class="pl-smi">k</span>.<span class="pl-smi">count</span><span class="pl-k">=</span><span class="pl-c1">0</span>;z<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">I</span>;<span class="pl-c1">M</span>.<span class="pl-en">Distance</span>(z,k,<span class="pl-c1">H</span>);<span class="pl-k">return</span> <span class="pl-smi">z</span>.<span class="pl-smi">distance</span><span class="pl-k">&lt;</span><span class="pl-c1">10</span><span class="pl-k">*</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>};</td>
      </tr>
      <tr>
        <td id="L133" class="blob-num js-line-number" data-line-number="133"></td>
        <td id="LC133" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2Shape</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">m_type</span><span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-smi">e_unknownShape</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_radius</span><span class="pl-k">=</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_linearSlop</span>};<span class="pl-smi">Box2D</span>.<span class="pl-smi">postDefs</span>.<span class="pl-c1">push</span>(<span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">Shapes</span>.<span class="pl-smi">b2Shape</span>.<span class="pl-smi">e_unknownShape</span><span class="pl-k">=</span><span class="pl-c1">parseInt</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">Shapes</span>.<span class="pl-smi">b2Shape</span>.<span class="pl-smi">e_circleShape</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">Shapes</span>.<span class="pl-smi">b2Shape</span>.<span class="pl-smi">e_polygonShape</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">Shapes</span>.<span class="pl-smi">b2Shape</span>.<span class="pl-smi">e_edgeShape</span><span class="pl-k">=</span><span class="pl-c1">2</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">Shapes</span>.<span class="pl-smi">b2Shape</span>.<span class="pl-smi">e_shapeTypeCount</span><span class="pl-k">=</span><span class="pl-c1">3</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">Shapes</span>.<span class="pl-smi">b2Shape</span>.<span class="pl-smi">e_hitCollide</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">Shapes</span>.<span class="pl-smi">b2Shape</span>.<span class="pl-smi">e_missCollide</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">Shapes</span>.<span class="pl-smi">b2Shape</span>.<span class="pl-smi">e_startsInsideCollide</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L134" class="blob-num js-line-number" data-line-number="134"></td>
        <td id="LC134" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">parseInt</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>)})})();</td>
      </tr>
      <tr>
        <td id="L135" class="blob-num js-line-number" data-line-number="135"></td>
        <td id="LC135" class="blob-code blob-code-inner js-file-line">(<span class="pl-k">function</span>(){<span class="pl-k">var</span> <span class="pl-c1">F</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">b2Color</span>,<span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">b2Settings</span>,<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">Math</span>.<span class="pl-smi">b2Math</span>;<span class="pl-c1">F</span>.<span class="pl-en">b2Color</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">_b</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">_g</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">_r</span><span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2Color</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">y</span>,<span class="pl-smi">w</span>,<span class="pl-c1">A</span>){<span class="pl-k">if</span>(y<span class="pl-k">===</span><span class="pl-c1">undefined</span>)y<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(w<span class="pl-k">===</span><span class="pl-c1">undefined</span>)w<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-c1">A</span><span class="pl-k">===</span><span class="pl-c1">undefined</span>)<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">_r</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-en">parseUInt</span>(<span class="pl-c1">255</span><span class="pl-k">*</span><span class="pl-c1">K</span>.<span class="pl-en">Clamp</span>(y,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>));<span class="pl-c1">this</span>.<span class="pl-smi">_g</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-en">parseUInt</span>(<span class="pl-c1">255</span><span class="pl-k">*</span><span class="pl-c1">K</span>.<span class="pl-en">Clamp</span>(w,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>));<span class="pl-c1">this</span>.<span class="pl-smi">_b</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-en">parseUInt</span>(<span class="pl-c1">255</span><span class="pl-k">*</span><span class="pl-c1">K</span>.<span class="pl-en">Clamp</span>(<span class="pl-c1">A</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>))};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Set</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">y</span>,<span class="pl-smi">w</span>,<span class="pl-c1">A</span>){<span class="pl-k">if</span>(y<span class="pl-k">===</span><span class="pl-c1">undefined</span>)y<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(w<span class="pl-k">===</span><span class="pl-c1">undefined</span>)w<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-c1">A</span><span class="pl-k">===</span><span class="pl-c1">undefined</span>)<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">_r</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-en">parseUInt</span>(<span class="pl-c1">255</span><span class="pl-k">*</span><span class="pl-c1">K</span>.<span class="pl-en">Clamp</span>(y,</td>
      </tr>
      <tr>
        <td id="L136" class="blob-num js-line-number" data-line-number="136"></td>
        <td id="LC136" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>,<span class="pl-c1">1</span>));<span class="pl-c1">this</span>.<span class="pl-smi">_g</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-en">parseUInt</span>(<span class="pl-c1">255</span><span class="pl-k">*</span><span class="pl-c1">K</span>.<span class="pl-en">Clamp</span>(w,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>));<span class="pl-c1">this</span>.<span class="pl-smi">_b</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-en">parseUInt</span>(<span class="pl-c1">255</span><span class="pl-k">*</span><span class="pl-c1">K</span>.<span class="pl-en">Clamp</span>(<span class="pl-c1">A</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>))};<span class="pl-c1">Object</span>.<span class="pl-en">defineProperty</span>(<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>r<span class="pl-pds">&quot;</span></span>,{enumerable<span class="pl-k">:</span><span class="pl-c1">false</span>,configurable<span class="pl-k">:</span><span class="pl-c1">true</span>,<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">y</span>){<span class="pl-k">if</span>(y<span class="pl-k">===</span><span class="pl-c1">undefined</span>)y<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">_r</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-en">parseUInt</span>(<span class="pl-c1">255</span><span class="pl-k">*</span><span class="pl-c1">K</span>.<span class="pl-en">Clamp</span>(y,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>))}});<span class="pl-c1">Object</span>.<span class="pl-en">defineProperty</span>(<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>g<span class="pl-pds">&quot;</span></span>,{enumerable<span class="pl-k">:</span><span class="pl-c1">false</span>,configurable<span class="pl-k">:</span><span class="pl-c1">true</span>,<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">y</span>){<span class="pl-k">if</span>(y<span class="pl-k">===</span><span class="pl-c1">undefined</span>)y<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">_g</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-en">parseUInt</span>(<span class="pl-c1">255</span><span class="pl-k">*</span><span class="pl-c1">K</span>.<span class="pl-en">Clamp</span>(y,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>))}});<span class="pl-c1">Object</span>.<span class="pl-en">defineProperty</span>(<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>b<span class="pl-pds">&quot;</span></span>,{enumerable<span class="pl-k">:</span><span class="pl-c1">false</span>,configurable<span class="pl-k">:</span><span class="pl-c1">true</span>,<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">y</span>){<span class="pl-k">if</span>(y<span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L137" class="blob-num js-line-number" data-line-number="137"></td>
        <td id="LC137" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">undefined</span>)y<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">_b</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-en">parseUInt</span>(<span class="pl-c1">255</span><span class="pl-k">*</span><span class="pl-c1">K</span>.<span class="pl-en">Clamp</span>(y,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>))}});<span class="pl-c1">Object</span>.<span class="pl-en">defineProperty</span>(<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>color<span class="pl-pds">&quot;</span></span>,{enumerable<span class="pl-k">:</span><span class="pl-c1">false</span>,configurable<span class="pl-k">:</span><span class="pl-c1">true</span>,<span class="pl-en">get</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">_r</span><span class="pl-k">&lt;&lt;</span><span class="pl-c1">16</span><span class="pl-k">|</span><span class="pl-c1">this</span>.<span class="pl-smi">_g</span><span class="pl-k">&lt;&lt;</span><span class="pl-c1">8</span><span class="pl-k">|</span><span class="pl-c1">this</span>.<span class="pl-smi">_b</span>}});<span class="pl-c1">G</span>.<span class="pl-en">b2Settings</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">G</span>.<span class="pl-en">b2MixFriction</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">y</span>,<span class="pl-smi">w</span>){<span class="pl-k">if</span>(y<span class="pl-k">===</span><span class="pl-c1">undefined</span>)y<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(w<span class="pl-k">===</span><span class="pl-c1">undefined</span>)w<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(y<span class="pl-k">*</span>w)};<span class="pl-c1">G</span>.<span class="pl-en">b2MixRestitution</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">y</span>,<span class="pl-smi">w</span>){<span class="pl-k">if</span>(y<span class="pl-k">===</span><span class="pl-c1">undefined</span>)y<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(w<span class="pl-k">===</span><span class="pl-c1">undefined</span>)w<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> y<span class="pl-k">&gt;</span>w<span class="pl-k">?</span>y<span class="pl-k">:</span>w};<span class="pl-c1">G</span>.<span class="pl-en">b2Assert</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">y</span>){<span class="pl-k">if</span>(<span class="pl-k">!</span>y)<span class="pl-k">throw</span><span class="pl-s"><span class="pl-pds">&quot;</span>Assertion Failed<span class="pl-pds">&quot;</span></span>;};<span class="pl-smi">Box2D</span>.<span class="pl-smi">postDefs</span>.<span class="pl-c1">push</span>(<span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">b2Settings</span>.<span class="pl-c1">VERSION</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L138" class="blob-num js-line-number" data-line-number="138"></td>
        <td id="LC138" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">&quot;</span>2.1alpha<span class="pl-pds">&quot;</span></span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">b2Settings</span>.<span class="pl-c1">USHRT_MAX</span><span class="pl-k">=</span><span class="pl-c1">65535</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">b2Settings</span>.<span class="pl-smi">b2_pi</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">b2Settings</span>.<span class="pl-smi">b2_maxManifoldPoints</span><span class="pl-k">=</span><span class="pl-c1">2</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">b2Settings</span>.<span class="pl-smi">b2_aabbExtension</span><span class="pl-k">=</span><span class="pl-c1">0.1</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">b2Settings</span>.<span class="pl-smi">b2_aabbMultiplier</span><span class="pl-k">=</span><span class="pl-c1">2</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">b2Settings</span>.<span class="pl-smi">b2_polygonRadius</span><span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">G</span>.<span class="pl-smi">b2_linearSlop</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">b2Settings</span>.<span class="pl-smi">b2_linearSlop</span><span class="pl-k">=</span><span class="pl-c1">0.0050</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">b2Settings</span>.<span class="pl-smi">b2_angularSlop</span><span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">/</span><span class="pl-c1">180</span><span class="pl-k">*</span><span class="pl-c1">G</span>.<span class="pl-smi">b2_pi</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">b2Settings</span>.<span class="pl-smi">b2_toiSlop</span><span class="pl-k">=</span><span class="pl-c1">8</span><span class="pl-k">*</span><span class="pl-c1">G</span>.<span class="pl-smi">b2_linearSlop</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">b2Settings</span>.<span class="pl-smi">b2_maxTOIContactsPerIsland</span><span class="pl-k">=</span><span class="pl-c1">32</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">b2Settings</span>.<span class="pl-smi">b2_maxTOIJointsPerIsland</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L139" class="blob-num js-line-number" data-line-number="139"></td>
        <td id="LC139" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">32</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">b2Settings</span>.<span class="pl-smi">b2_velocityThreshold</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">b2Settings</span>.<span class="pl-smi">b2_maxLinearCorrection</span><span class="pl-k">=</span><span class="pl-c1">0.2</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">b2Settings</span>.<span class="pl-smi">b2_maxAngularCorrection</span><span class="pl-k">=</span><span class="pl-c1">8</span><span class="pl-k">/</span><span class="pl-c1">180</span><span class="pl-k">*</span><span class="pl-c1">G</span>.<span class="pl-smi">b2_pi</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">b2Settings</span>.<span class="pl-smi">b2_maxTranslation</span><span class="pl-k">=</span><span class="pl-c1">2</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">b2Settings</span>.<span class="pl-smi">b2_maxTranslationSquared</span><span class="pl-k">=</span><span class="pl-c1">G</span>.<span class="pl-smi">b2_maxTranslation</span><span class="pl-k">*</span><span class="pl-c1">G</span>.<span class="pl-smi">b2_maxTranslation</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">b2Settings</span>.<span class="pl-smi">b2_maxRotation</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span><span class="pl-c1">G</span>.<span class="pl-smi">b2_pi</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">b2Settings</span>.<span class="pl-smi">b2_maxRotationSquared</span><span class="pl-k">=</span><span class="pl-c1">G</span>.<span class="pl-smi">b2_maxRotation</span><span class="pl-k">*</span><span class="pl-c1">G</span>.<span class="pl-smi">b2_maxRotation</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">b2Settings</span>.<span class="pl-smi">b2_contactBaumgarte</span><span class="pl-k">=</span><span class="pl-c1">0.2</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">b2Settings</span>.<span class="pl-smi">b2_timeToSleep</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L140" class="blob-num js-line-number" data-line-number="140"></td>
        <td id="LC140" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0.5</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">b2Settings</span>.<span class="pl-smi">b2_linearSleepTolerance</span><span class="pl-k">=</span><span class="pl-c1">0.01</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">b2Settings</span>.<span class="pl-smi">b2_angularSleepTolerance</span><span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">/</span><span class="pl-c1">180</span><span class="pl-k">*</span><span class="pl-c1">G</span>.<span class="pl-smi">b2_pi</span>})})();</td>
      </tr>
      <tr>
        <td id="L141" class="blob-num js-line-number" data-line-number="141"></td>
        <td id="LC141" class="blob-code blob-code-inner js-file-line">(<span class="pl-k">function</span>(){<span class="pl-k">var</span> <span class="pl-c1">F</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">Math</span>.<span class="pl-smi">b2Mat22</span>,<span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">Math</span>.<span class="pl-smi">b2Mat33</span>,<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">Math</span>.<span class="pl-smi">b2Math</span>,y<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">Math</span>.<span class="pl-smi">b2Sweep</span>,w<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">Math</span>.<span class="pl-smi">b2Transform</span>,<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">Math</span>.<span class="pl-smi">b2Vec2</span>,<span class="pl-c1">U</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">Math</span>.<span class="pl-smi">b2Vec3</span>;<span class="pl-c1">F</span>.<span class="pl-en">b2Mat22</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">col1</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">A</span>;<span class="pl-c1">this</span>.<span class="pl-smi">col2</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">A</span>};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2Mat22</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-en">SetIdentity</span>()};<span class="pl-c1">F</span>.<span class="pl-en">FromAngle</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> <span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">F</span>;<span class="pl-c1">B</span>.<span class="pl-en">Set</span>(p);<span class="pl-k">return</span> <span class="pl-c1">B</span>};<span class="pl-c1">F</span>.<span class="pl-en">FromVV</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-c1">B</span>){<span class="pl-k">var</span> <span class="pl-c1">Q</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">F</span>;<span class="pl-c1">Q</span>.<span class="pl-en">SetVV</span>(p,<span class="pl-c1">B</span>);<span class="pl-k">return</span> <span class="pl-c1">Q</span>};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Set</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span><span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L142" class="blob-num js-line-number" data-line-number="142"></td>
        <td id="LC142" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> <span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(p);p<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(p);<span class="pl-c1">this</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">B</span>;<span class="pl-c1">this</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-k">-</span>p;<span class="pl-c1">this</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>p;<span class="pl-c1">this</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">B</span>};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetVV</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-c1">B</span>){<span class="pl-c1">this</span>.<span class="pl-smi">col1</span>.<span class="pl-en">SetV</span>(p);<span class="pl-c1">this</span>.<span class="pl-smi">col2</span>.<span class="pl-en">SetV</span>(<span class="pl-c1">B</span>)};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> p<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">F</span>;<span class="pl-smi">p</span>.<span class="pl-en">SetM</span>(<span class="pl-c1">this</span>);<span class="pl-k">return</span> p};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetM</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-c1">this</span>.<span class="pl-smi">col1</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">p</span>.<span class="pl-smi">col1</span>);<span class="pl-c1">this</span>.<span class="pl-smi">col2</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">p</span>.<span class="pl-smi">col2</span>)};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">AddM</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-c1">this</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-smi">p</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-smi">p</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-smi">p</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-smi">p</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span>};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetIdentity</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L143" class="blob-num js-line-number" data-line-number="143"></td>
        <td id="LC143" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">1</span>};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetZero</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAngle</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-c1">this</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span>)};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetInverse</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-k">var</span> <span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span>,<span class="pl-c1">Q</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span>,<span class="pl-c1">V</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span>,<span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span>,<span class="pl-c1">L</span><span class="pl-k">=</span><span class="pl-c1">B</span><span class="pl-k">*</span><span class="pl-c1">M</span><span class="pl-k">-</span><span class="pl-c1">Q</span><span class="pl-k">*</span><span class="pl-c1">V</span>;<span class="pl-k">if</span>(<span class="pl-c1">L</span><span class="pl-k">!=</span><span class="pl-c1">0</span>)<span class="pl-c1">L</span><span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">L</span>;<span class="pl-smi">p</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">L</span><span class="pl-k">*</span><span class="pl-c1">M</span>;<span class="pl-smi">p</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">L</span><span class="pl-k">*</span><span class="pl-c1">Q</span>;<span class="pl-smi">p</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">L</span><span class="pl-k">*</span><span class="pl-c1">V</span>;<span class="pl-smi">p</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">L</span><span class="pl-k">*</span><span class="pl-c1">B</span>;<span class="pl-k">return</span> p};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Solve</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-c1">B</span>,<span class="pl-c1">Q</span>){<span class="pl-k">if</span>(<span class="pl-c1">B</span><span class="pl-k">===</span><span class="pl-c1">undefined</span>)<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-c1">Q</span><span class="pl-k">===</span><span class="pl-c1">undefined</span>)<span class="pl-c1">Q</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> <span class="pl-c1">V</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span>,<span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span>,<span class="pl-c1">L</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span>,<span class="pl-c1">I</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span>,<span class="pl-c1">W</span><span class="pl-k">=</span><span class="pl-c1">V</span><span class="pl-k">*</span><span class="pl-c1">I</span><span class="pl-k">-</span><span class="pl-c1">M</span><span class="pl-k">*</span><span class="pl-c1">L</span>;<span class="pl-k">if</span>(<span class="pl-c1">W</span><span class="pl-k">!=</span></td>
      </tr>
      <tr>
        <td id="L144" class="blob-num js-line-number" data-line-number="144"></td>
        <td id="LC144" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>)<span class="pl-c1">W</span><span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">W</span>;<span class="pl-smi">p</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">W</span><span class="pl-k">*</span>(<span class="pl-c1">I</span><span class="pl-k">*</span><span class="pl-c1">B</span><span class="pl-k">-</span><span class="pl-c1">M</span><span class="pl-k">*</span><span class="pl-c1">Q</span>);<span class="pl-smi">p</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">W</span><span class="pl-k">*</span>(<span class="pl-c1">V</span><span class="pl-k">*</span><span class="pl-c1">Q</span><span class="pl-k">-</span><span class="pl-c1">L</span><span class="pl-k">*</span><span class="pl-c1">B</span>);<span class="pl-k">return</span> p};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Abs</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">col1</span>.<span class="pl-en">Abs</span>();<span class="pl-c1">this</span>.<span class="pl-smi">col2</span>.<span class="pl-en">Abs</span>()};<span class="pl-c1">G</span>.<span class="pl-en">b2Mat33</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">col1</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">U</span>;<span class="pl-c1">this</span>.<span class="pl-smi">col2</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">U</span>;<span class="pl-c1">this</span>.<span class="pl-smi">col3</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">U</span>};<span class="pl-c1">G</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2Mat33</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-c1">B</span>,<span class="pl-c1">Q</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(<span class="pl-c1">B</span><span class="pl-k">===</span><span class="pl-c1">undefined</span>)<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(<span class="pl-c1">Q</span><span class="pl-k">===</span><span class="pl-c1">undefined</span>)<span class="pl-c1">Q</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(<span class="pl-k">!</span>p<span class="pl-k">&amp;&amp;!</span><span class="pl-c1">B</span><span class="pl-k">&amp;&amp;!</span><span class="pl-c1">Q</span>){<span class="pl-c1">this</span>.<span class="pl-smi">col1</span>.<span class="pl-en">SetZero</span>();<span class="pl-c1">this</span>.<span class="pl-smi">col2</span>.<span class="pl-en">SetZero</span>();<span class="pl-c1">this</span>.<span class="pl-smi">col3</span>.<span class="pl-en">SetZero</span>()}<span class="pl-k">else</span>{<span class="pl-c1">this</span>.<span class="pl-smi">col1</span>.<span class="pl-en">SetV</span>(p);<span class="pl-c1">this</span>.<span class="pl-smi">col2</span>.<span class="pl-en">SetV</span>(<span class="pl-c1">B</span>);<span class="pl-c1">this</span>.<span class="pl-smi">col3</span>.<span class="pl-en">SetV</span>(<span class="pl-c1">Q</span>)}};<span class="pl-c1">G</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetVVV</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-c1">B</span>,<span class="pl-c1">Q</span>){<span class="pl-c1">this</span>.<span class="pl-smi">col1</span>.<span class="pl-en">SetV</span>(p);<span class="pl-c1">this</span>.<span class="pl-smi">col2</span>.<span class="pl-en">SetV</span>(<span class="pl-c1">B</span>);<span class="pl-c1">this</span>.<span class="pl-smi">col3</span>.<span class="pl-en">SetV</span>(<span class="pl-c1">Q</span>)};</td>
      </tr>
      <tr>
        <td id="L145" class="blob-num js-line-number" data-line-number="145"></td>
        <td id="LC145" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">G</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">G</span>(<span class="pl-c1">this</span>.<span class="pl-smi">col1</span>,<span class="pl-c1">this</span>.<span class="pl-smi">col2</span>,<span class="pl-c1">this</span>.<span class="pl-smi">col3</span>)};<span class="pl-c1">G</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetM</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-c1">this</span>.<span class="pl-smi">col1</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">p</span>.<span class="pl-smi">col1</span>);<span class="pl-c1">this</span>.<span class="pl-smi">col2</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">p</span>.<span class="pl-smi">col2</span>);<span class="pl-c1">this</span>.<span class="pl-smi">col3</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">p</span>.<span class="pl-smi">col3</span>)};<span class="pl-c1">G</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">AddM</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-c1">this</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-smi">p</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-smi">p</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">z</span><span class="pl-k">+=</span><span class="pl-smi">p</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">z</span>;<span class="pl-c1">this</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-smi">p</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-smi">p</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">z</span><span class="pl-k">+=</span><span class="pl-smi">p</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">z</span>;<span class="pl-c1">this</span>.<span class="pl-smi">col3</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-smi">p</span>.<span class="pl-smi">col3</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-smi">col3</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-smi">p</span>.<span class="pl-smi">col3</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">col3</span>.<span class="pl-c1">z</span><span class="pl-k">+=</span><span class="pl-smi">p</span>.<span class="pl-smi">col3</span>.<span class="pl-c1">z</span>};<span class="pl-c1">G</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetIdentity</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">col3</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L146" class="blob-num js-line-number" data-line-number="146"></td>
        <td id="LC146" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">col3</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">col3</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">1</span>};<span class="pl-c1">G</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetZero</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">col3</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">col3</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">col3</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">G</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Solve22</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-c1">B</span>,<span class="pl-c1">Q</span>){<span class="pl-k">if</span>(<span class="pl-c1">B</span><span class="pl-k">===</span><span class="pl-c1">undefined</span>)<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-c1">Q</span><span class="pl-k">===</span><span class="pl-c1">undefined</span>)<span class="pl-c1">Q</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> <span class="pl-c1">V</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span>,<span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span>,<span class="pl-c1">L</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span>,<span class="pl-c1">I</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span>,<span class="pl-c1">W</span><span class="pl-k">=</span><span class="pl-c1">V</span><span class="pl-k">*</span><span class="pl-c1">I</span><span class="pl-k">-</span><span class="pl-c1">M</span><span class="pl-k">*</span><span class="pl-c1">L</span>;<span class="pl-k">if</span>(<span class="pl-c1">W</span><span class="pl-k">!=</span><span class="pl-c1">0</span>)<span class="pl-c1">W</span><span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">W</span>;<span class="pl-smi">p</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">W</span><span class="pl-k">*</span>(<span class="pl-c1">I</span><span class="pl-k">*</span><span class="pl-c1">B</span><span class="pl-k">-</span><span class="pl-c1">M</span><span class="pl-k">*</span><span class="pl-c1">Q</span>);<span class="pl-smi">p</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">W</span><span class="pl-k">*</span>(<span class="pl-c1">V</span><span class="pl-k">*</span><span class="pl-c1">Q</span><span class="pl-k">-</span><span class="pl-c1">L</span><span class="pl-k">*</span><span class="pl-c1">B</span>);<span class="pl-k">return</span> p};<span class="pl-c1">G</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Solve33</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-c1">B</span>,<span class="pl-c1">Q</span>,<span class="pl-c1">V</span>){<span class="pl-k">if</span>(<span class="pl-c1">B</span><span class="pl-k">===</span><span class="pl-c1">undefined</span>)<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-c1">Q</span><span class="pl-k">===</span><span class="pl-c1">undefined</span>)<span class="pl-c1">Q</span><span class="pl-k">=</span><span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L147" class="blob-num js-line-number" data-line-number="147"></td>
        <td id="LC147" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>(<span class="pl-c1">V</span><span class="pl-k">===</span><span class="pl-c1">undefined</span>)<span class="pl-c1">V</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> <span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span>,<span class="pl-c1">L</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span>,<span class="pl-c1">I</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">z</span>,<span class="pl-c1">W</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span>,<span class="pl-c1">Y</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span>,k<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">z</span>,z<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">col3</span>.<span class="pl-c1">x</span>,u<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">col3</span>.<span class="pl-c1">y</span>,<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">col3</span>.<span class="pl-c1">z</span>,<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-c1">M</span><span class="pl-k">*</span>(<span class="pl-c1">Y</span><span class="pl-k">*</span><span class="pl-c1">D</span><span class="pl-k">-</span>k<span class="pl-k">*</span>u)<span class="pl-k">+</span><span class="pl-c1">L</span><span class="pl-k">*</span>(k<span class="pl-k">*</span>z<span class="pl-k">-</span><span class="pl-c1">W</span><span class="pl-k">*</span><span class="pl-c1">D</span>)<span class="pl-k">+</span><span class="pl-c1">I</span><span class="pl-k">*</span>(<span class="pl-c1">W</span><span class="pl-k">*</span>u<span class="pl-k">-</span><span class="pl-c1">Y</span><span class="pl-k">*</span>z);<span class="pl-k">if</span>(<span class="pl-c1">H</span><span class="pl-k">!=</span><span class="pl-c1">0</span>)<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">H</span>;<span class="pl-smi">p</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">H</span><span class="pl-k">*</span>(<span class="pl-c1">B</span><span class="pl-k">*</span>(<span class="pl-c1">Y</span><span class="pl-k">*</span><span class="pl-c1">D</span><span class="pl-k">-</span>k<span class="pl-k">*</span>u)<span class="pl-k">+</span><span class="pl-c1">Q</span><span class="pl-k">*</span>(k<span class="pl-k">*</span>z<span class="pl-k">-</span><span class="pl-c1">W</span><span class="pl-k">*</span><span class="pl-c1">D</span>)<span class="pl-k">+</span><span class="pl-c1">V</span><span class="pl-k">*</span>(<span class="pl-c1">W</span><span class="pl-k">*</span>u<span class="pl-k">-</span><span class="pl-c1">Y</span><span class="pl-k">*</span>z));<span class="pl-smi">p</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">H</span><span class="pl-k">*</span>(<span class="pl-c1">M</span><span class="pl-k">*</span>(<span class="pl-c1">Q</span><span class="pl-k">*</span><span class="pl-c1">D</span><span class="pl-k">-</span><span class="pl-c1">V</span><span class="pl-k">*</span>u)<span class="pl-k">+</span><span class="pl-c1">L</span><span class="pl-k">*</span>(<span class="pl-c1">V</span><span class="pl-k">*</span>z<span class="pl-k">-</span><span class="pl-c1">B</span><span class="pl-k">*</span><span class="pl-c1">D</span>)<span class="pl-k">+</span><span class="pl-c1">I</span><span class="pl-k">*</span>(<span class="pl-c1">B</span><span class="pl-k">*</span>u<span class="pl-k">-</span><span class="pl-c1">Q</span><span class="pl-k">*</span>z));<span class="pl-smi">p</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">H</span><span class="pl-k">*</span>(<span class="pl-c1">M</span><span class="pl-k">*</span>(<span class="pl-c1">Y</span><span class="pl-k">*</span><span class="pl-c1">V</span><span class="pl-k">-</span>k<span class="pl-k">*</span><span class="pl-c1">Q</span>)<span class="pl-k">+</span><span class="pl-c1">L</span><span class="pl-k">*</span>(k<span class="pl-k">*</span><span class="pl-c1">B</span><span class="pl-k">-</span><span class="pl-c1">W</span><span class="pl-k">*</span><span class="pl-c1">V</span>)<span class="pl-k">+</span><span class="pl-c1">I</span><span class="pl-k">*</span>(<span class="pl-c1">W</span><span class="pl-k">*</span><span class="pl-c1">Q</span><span class="pl-k">-</span><span class="pl-c1">Y</span><span class="pl-k">*</span><span class="pl-c1">B</span>));<span class="pl-k">return</span> p};<span class="pl-c1">K</span>.<span class="pl-en">b2Math</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">K</span>.<span class="pl-en">IsValid</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-c1">isFinite</span>(p)};<span class="pl-c1">K</span>.<span class="pl-en">Dot</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-c1">B</span>){<span class="pl-k">return</span> <span class="pl-smi">p</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">B</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">p</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">B</span>.<span class="pl-c1">y</span>};<span class="pl-c1">K</span>.<span class="pl-en">CrossVV</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-c1">B</span>){<span class="pl-k">return</span> <span class="pl-smi">p</span>.<span class="pl-c1">x</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L148" class="blob-num js-line-number" data-line-number="148"></td>
        <td id="LC148" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">B</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">p</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">B</span>.<span class="pl-c1">x</span>};<span class="pl-c1">K</span>.<span class="pl-en">CrossVF</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-c1">B</span>){<span class="pl-k">if</span>(<span class="pl-c1">B</span><span class="pl-k">===</span><span class="pl-c1">undefined</span>)<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">A</span>(<span class="pl-c1">B</span><span class="pl-k">*</span><span class="pl-smi">p</span>.<span class="pl-c1">y</span>,<span class="pl-k">-</span><span class="pl-c1">B</span><span class="pl-k">*</span><span class="pl-smi">p</span>.<span class="pl-c1">x</span>)};<span class="pl-c1">K</span>.<span class="pl-en">CrossFV</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-c1">B</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">A</span>(<span class="pl-k">-</span>p<span class="pl-k">*</span><span class="pl-c1">B</span>.<span class="pl-c1">y</span>,p<span class="pl-k">*</span><span class="pl-c1">B</span>.<span class="pl-c1">x</span>)};<span class="pl-c1">K</span>.<span class="pl-en">MulMV</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-c1">B</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">A</span>(<span class="pl-smi">p</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">B</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">p</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">B</span>.<span class="pl-c1">y</span>,<span class="pl-smi">p</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">B</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">p</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">B</span>.<span class="pl-c1">y</span>)};<span class="pl-c1">K</span>.<span class="pl-en">MulTMV</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-c1">B</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">A</span>(<span class="pl-c1">K</span>.<span class="pl-en">Dot</span>(<span class="pl-c1">B</span>,<span class="pl-smi">p</span>.<span class="pl-smi">col1</span>),<span class="pl-c1">K</span>.<span class="pl-en">Dot</span>(<span class="pl-c1">B</span>,<span class="pl-smi">p</span>.<span class="pl-smi">col2</span>))};<span class="pl-c1">K</span>.<span class="pl-en">MulX</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-c1">B</span>){<span class="pl-k">var</span> <span class="pl-c1">Q</span><span class="pl-k">=</span><span class="pl-c1">K</span>.<span class="pl-en">MulMV</span>(<span class="pl-smi">p</span>.<span class="pl-c1">R</span>,<span class="pl-c1">B</span>);<span class="pl-c1">Q</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-smi">p</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span>;<span class="pl-c1">Q</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-smi">p</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span>;<span class="pl-k">return</span> <span class="pl-c1">Q</span>};<span class="pl-c1">K</span>.<span class="pl-en">MulXT</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-c1">B</span>){<span class="pl-k">var</span> <span class="pl-c1">Q</span><span class="pl-k">=</span><span class="pl-c1">K</span>.<span class="pl-en">SubtractVV</span>(<span class="pl-c1">B</span>,<span class="pl-smi">p</span>.<span class="pl-smi">position</span>),<span class="pl-c1">V</span><span class="pl-k">=</span><span class="pl-c1">Q</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">p</span>.<span class="pl-c1">R</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">Q</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">p</span>.<span class="pl-c1">R</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span>;<span class="pl-c1">Q</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Q</span>.<span class="pl-c1">x</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L149" class="blob-num js-line-number" data-line-number="149"></td>
        <td id="LC149" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">p</span>.<span class="pl-c1">R</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">Q</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">p</span>.<span class="pl-c1">R</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span>;<span class="pl-c1">Q</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">V</span>;<span class="pl-k">return</span> <span class="pl-c1">Q</span>};<span class="pl-c1">K</span>.<span class="pl-en">AddVV</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-c1">B</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">A</span>(<span class="pl-smi">p</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">B</span>.<span class="pl-c1">x</span>,<span class="pl-smi">p</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">B</span>.<span class="pl-c1">y</span>)};<span class="pl-c1">K</span>.<span class="pl-en">SubtractVV</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-c1">B</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">A</span>(<span class="pl-smi">p</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">B</span>.<span class="pl-c1">x</span>,<span class="pl-smi">p</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">B</span>.<span class="pl-c1">y</span>)};<span class="pl-c1">K</span>.<span class="pl-en">Distance</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-c1">B</span>){<span class="pl-k">var</span> <span class="pl-c1">Q</span><span class="pl-k">=</span><span class="pl-smi">p</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">B</span>.<span class="pl-c1">x</span>,<span class="pl-c1">V</span><span class="pl-k">=</span><span class="pl-smi">p</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">B</span>.<span class="pl-c1">y</span>;<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">Q</span><span class="pl-k">*</span><span class="pl-c1">Q</span><span class="pl-k">+</span><span class="pl-c1">V</span><span class="pl-k">*</span><span class="pl-c1">V</span>)};<span class="pl-c1">K</span>.<span class="pl-en">DistanceSquared</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-c1">B</span>){<span class="pl-k">var</span> <span class="pl-c1">Q</span><span class="pl-k">=</span><span class="pl-smi">p</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">B</span>.<span class="pl-c1">x</span>,<span class="pl-c1">V</span><span class="pl-k">=</span><span class="pl-smi">p</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">B</span>.<span class="pl-c1">y</span>;<span class="pl-k">return</span> <span class="pl-c1">Q</span><span class="pl-k">*</span><span class="pl-c1">Q</span><span class="pl-k">+</span><span class="pl-c1">V</span><span class="pl-k">*</span><span class="pl-c1">V</span>};<span class="pl-c1">K</span>.<span class="pl-en">MulFV</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-c1">B</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">A</span>(p<span class="pl-k">*</span><span class="pl-c1">B</span>.<span class="pl-c1">x</span>,p<span class="pl-k">*</span><span class="pl-c1">B</span>.<span class="pl-c1">y</span>)};<span class="pl-c1">K</span>.<span class="pl-en">AddMM</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-c1">B</span>){<span class="pl-k">return</span> <span class="pl-c1">F</span>.<span class="pl-en">FromVV</span>(<span class="pl-c1">K</span>.<span class="pl-en">AddVV</span>(<span class="pl-smi">p</span>.<span class="pl-smi">col1</span>,<span class="pl-c1">B</span>.<span class="pl-smi">col1</span>),<span class="pl-c1">K</span>.<span class="pl-en">AddVV</span>(<span class="pl-smi">p</span>.<span class="pl-smi">col2</span>,<span class="pl-c1">B</span>.<span class="pl-smi">col2</span>))};<span class="pl-c1">K</span>.<span class="pl-en">MulMM</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-c1">B</span>){<span class="pl-k">return</span> <span class="pl-c1">F</span>.<span class="pl-en">FromVV</span>(<span class="pl-c1">K</span>.<span class="pl-en">MulMV</span>(p,</td>
      </tr>
      <tr>
        <td id="L150" class="blob-num js-line-number" data-line-number="150"></td>
        <td id="LC150" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">B</span>.<span class="pl-smi">col1</span>),<span class="pl-c1">K</span>.<span class="pl-en">MulMV</span>(p,<span class="pl-c1">B</span>.<span class="pl-smi">col2</span>))};<span class="pl-c1">K</span>.<span class="pl-en">MulTMM</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-c1">B</span>){<span class="pl-k">var</span> <span class="pl-c1">Q</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">A</span>(<span class="pl-c1">K</span>.<span class="pl-en">Dot</span>(<span class="pl-smi">p</span>.<span class="pl-smi">col1</span>,<span class="pl-c1">B</span>.<span class="pl-smi">col1</span>),<span class="pl-c1">K</span>.<span class="pl-en">Dot</span>(<span class="pl-smi">p</span>.<span class="pl-smi">col2</span>,<span class="pl-c1">B</span>.<span class="pl-smi">col1</span>)),<span class="pl-c1">V</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">A</span>(<span class="pl-c1">K</span>.<span class="pl-en">Dot</span>(<span class="pl-smi">p</span>.<span class="pl-smi">col1</span>,<span class="pl-c1">B</span>.<span class="pl-smi">col2</span>),<span class="pl-c1">K</span>.<span class="pl-en">Dot</span>(<span class="pl-smi">p</span>.<span class="pl-smi">col2</span>,<span class="pl-c1">B</span>.<span class="pl-smi">col2</span>));<span class="pl-k">return</span> <span class="pl-c1">F</span>.<span class="pl-en">FromVV</span>(<span class="pl-c1">Q</span>,<span class="pl-c1">V</span>)};<span class="pl-c1">K</span>.<span class="pl-en">Abs</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> p<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">?</span>p<span class="pl-k">:</span><span class="pl-k">-</span>p};<span class="pl-c1">K</span>.<span class="pl-en">AbsV</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">A</span>(<span class="pl-c1">K</span>.<span class="pl-en">Abs</span>(<span class="pl-smi">p</span>.<span class="pl-c1">x</span>),<span class="pl-c1">K</span>.<span class="pl-en">Abs</span>(<span class="pl-smi">p</span>.<span class="pl-c1">y</span>))};<span class="pl-c1">K</span>.<span class="pl-en">AbsM</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-k">return</span> <span class="pl-c1">F</span>.<span class="pl-en">FromVV</span>(<span class="pl-c1">K</span>.<span class="pl-en">AbsV</span>(<span class="pl-smi">p</span>.<span class="pl-smi">col1</span>),<span class="pl-c1">K</span>.<span class="pl-en">AbsV</span>(<span class="pl-smi">p</span>.<span class="pl-smi">col2</span>))};<span class="pl-c1">K</span>.<span class="pl-en">Min</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-c1">B</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-c1">B</span><span class="pl-k">===</span><span class="pl-c1">undefined</span>)<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> p<span class="pl-k">&lt;</span><span class="pl-c1">B</span><span class="pl-k">?</span>p<span class="pl-k">:</span><span class="pl-c1">B</span>};<span class="pl-c1">K</span>.<span class="pl-en">MinV</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-c1">B</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">A</span>(<span class="pl-c1">K</span>.<span class="pl-en">Min</span>(<span class="pl-smi">p</span>.<span class="pl-c1">x</span>,<span class="pl-c1">B</span>.<span class="pl-c1">x</span>),<span class="pl-c1">K</span>.<span class="pl-en">Min</span>(<span class="pl-smi">p</span>.<span class="pl-c1">y</span>,<span class="pl-c1">B</span>.<span class="pl-c1">y</span>))};</td>
      </tr>
      <tr>
        <td id="L151" class="blob-num js-line-number" data-line-number="151"></td>
        <td id="LC151" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">K</span>.<span class="pl-en">Max</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-c1">B</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-c1">B</span><span class="pl-k">===</span><span class="pl-c1">undefined</span>)<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> p<span class="pl-k">&gt;</span><span class="pl-c1">B</span><span class="pl-k">?</span>p<span class="pl-k">:</span><span class="pl-c1">B</span>};<span class="pl-c1">K</span>.<span class="pl-en">MaxV</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-c1">B</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">A</span>(<span class="pl-c1">K</span>.<span class="pl-en">Max</span>(<span class="pl-smi">p</span>.<span class="pl-c1">x</span>,<span class="pl-c1">B</span>.<span class="pl-c1">x</span>),<span class="pl-c1">K</span>.<span class="pl-en">Max</span>(<span class="pl-smi">p</span>.<span class="pl-c1">y</span>,<span class="pl-c1">B</span>.<span class="pl-c1">y</span>))};<span class="pl-c1">K</span>.<span class="pl-en">Clamp</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-c1">B</span>,<span class="pl-c1">Q</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-c1">B</span><span class="pl-k">===</span><span class="pl-c1">undefined</span>)<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-c1">Q</span><span class="pl-k">===</span><span class="pl-c1">undefined</span>)<span class="pl-c1">Q</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> p<span class="pl-k">&lt;</span><span class="pl-c1">B</span><span class="pl-k">?</span><span class="pl-c1">B</span><span class="pl-k">:</span>p<span class="pl-k">&gt;</span><span class="pl-c1">Q</span><span class="pl-k">?</span><span class="pl-c1">Q</span><span class="pl-k">:</span>p};<span class="pl-c1">K</span>.<span class="pl-en">ClampV</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-c1">B</span>,<span class="pl-c1">Q</span>){<span class="pl-k">return</span> <span class="pl-c1">K</span>.<span class="pl-en">MaxV</span>(<span class="pl-c1">B</span>,<span class="pl-c1">K</span>.<span class="pl-en">MinV</span>(p,<span class="pl-c1">Q</span>))};<span class="pl-c1">K</span>.<span class="pl-en">Swap</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-c1">B</span>){<span class="pl-k">var</span> <span class="pl-c1">Q</span><span class="pl-k">=</span>p[<span class="pl-c1">0</span>];p[<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-c1">B</span>[<span class="pl-c1">0</span>];<span class="pl-c1">B</span>[<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-c1">Q</span>};<span class="pl-c1">K</span>.<span class="pl-en">Random</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">random</span>()<span class="pl-k">*</span><span class="pl-c1">2</span><span class="pl-k">-</span><span class="pl-c1">1</span>};<span class="pl-c1">K</span>.<span class="pl-en">RandomRange</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-c1">B</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-c1">B</span><span class="pl-k">===</span><span class="pl-c1">undefined</span>)<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> <span class="pl-c1">Q</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">random</span>();<span class="pl-k">return</span> <span class="pl-c1">Q</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L152" class="blob-num js-line-number" data-line-number="152"></td>
        <td id="LC152" class="blob-code blob-code-inner js-file-line">(<span class="pl-c1">B</span><span class="pl-k">-</span>p)<span class="pl-k">*</span><span class="pl-c1">Q</span><span class="pl-k">+</span>p};<span class="pl-c1">K</span>.<span class="pl-en">NextPowerOfTwo</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span><span class="pl-c1">0</span>;p<span class="pl-k">|=</span>p<span class="pl-k">&gt;&gt;</span><span class="pl-c1">1</span><span class="pl-k">&amp;</span><span class="pl-c1">2147483647</span>;p<span class="pl-k">|=</span>p<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span><span class="pl-k">&amp;</span><span class="pl-c1">1073741823</span>;p<span class="pl-k">|=</span>p<span class="pl-k">&gt;&gt;</span><span class="pl-c1">4</span><span class="pl-k">&amp;</span><span class="pl-c1">268435455</span>;p<span class="pl-k">|=</span>p<span class="pl-k">&gt;&gt;</span><span class="pl-c1">8</span><span class="pl-k">&amp;</span><span class="pl-c1">16777215</span>;p<span class="pl-k">|=</span>p<span class="pl-k">&gt;&gt;</span><span class="pl-c1">16</span><span class="pl-k">&amp;</span><span class="pl-c1">65535</span>;<span class="pl-k">return</span> p<span class="pl-k">+</span><span class="pl-c1">1</span>};<span class="pl-c1">K</span>.<span class="pl-en">IsPowerOfTwo</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> p<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>(p<span class="pl-k">&amp;</span>p<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">==</span><span class="pl-c1">0</span>};<span class="pl-smi">Box2D</span>.<span class="pl-smi">postDefs</span>.<span class="pl-c1">push</span>(<span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">Math</span>.<span class="pl-smi">b2Math</span>.<span class="pl-smi">b2Vec2_zero</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">A</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">Math</span>.<span class="pl-smi">b2Math</span>.<span class="pl-smi">b2Mat22_identity</span><span class="pl-k">=</span><span class="pl-c1">F</span>.<span class="pl-en">FromVV</span>(<span class="pl-k">new</span> <span class="pl-en">A</span>(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>),<span class="pl-k">new</span> <span class="pl-en">A</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>));<span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">Math</span>.<span class="pl-smi">b2Math</span>.<span class="pl-smi">b2Transform_identity</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>(<span class="pl-c1">K</span>.<span class="pl-smi">b2Vec2_zero</span>,<span class="pl-c1">K</span>.<span class="pl-smi">b2Mat22_identity</span>)});<span class="pl-smi">y</span>.<span class="pl-en">b2Sweep</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">localCenter</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L153" class="blob-num js-line-number" data-line-number="153"></td>
        <td id="LC153" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">A</span>;<span class="pl-c1">this</span>.<span class="pl-smi">c0</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">A</span>;<span class="pl-c1">this</span>.<span class="pl-smi">c</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">A</span>};<span class="pl-smi">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Set</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-c1">this</span>.<span class="pl-smi">localCenter</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">p</span>.<span class="pl-smi">localCenter</span>);<span class="pl-c1">this</span>.<span class="pl-smi">c0</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">p</span>.<span class="pl-smi">c0</span>);<span class="pl-c1">this</span>.<span class="pl-smi">c</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">p</span>.<span class="pl-smi">c</span>);<span class="pl-c1">this</span>.<span class="pl-smi">a0</span><span class="pl-k">=</span><span class="pl-smi">p</span>.<span class="pl-smi">a0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">a</span><span class="pl-k">=</span><span class="pl-smi">p</span>.<span class="pl-smi">a</span>;<span class="pl-c1">this</span>.<span class="pl-smi">t0</span><span class="pl-k">=</span><span class="pl-smi">p</span>.<span class="pl-smi">t0</span>};<span class="pl-smi">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> p<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">y</span>;<span class="pl-smi">p</span>.<span class="pl-smi">localCenter</span>.<span class="pl-en">SetV</span>(<span class="pl-c1">this</span>.<span class="pl-smi">localCenter</span>);<span class="pl-smi">p</span>.<span class="pl-smi">c0</span>.<span class="pl-en">SetV</span>(<span class="pl-c1">this</span>.<span class="pl-smi">c0</span>);<span class="pl-smi">p</span>.<span class="pl-smi">c</span>.<span class="pl-en">SetV</span>(<span class="pl-c1">this</span>.<span class="pl-smi">c</span>);<span class="pl-smi">p</span>.<span class="pl-smi">a0</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">a0</span>;<span class="pl-smi">p</span>.<span class="pl-smi">a</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">a</span>;<span class="pl-smi">p</span>.<span class="pl-smi">t0</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">t0</span>;<span class="pl-k">return</span> p};<span class="pl-smi">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetTransform</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-c1">B</span>){<span class="pl-k">if</span>(<span class="pl-c1">B</span><span class="pl-k">===</span><span class="pl-c1">undefined</span>)<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-smi">p</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>(<span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-c1">B</span>)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">c0</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">B</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span>;<span class="pl-smi">p</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>(<span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-c1">B</span>)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">c0</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">B</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span>;<span class="pl-smi">p</span>.<span class="pl-c1">R</span>.<span class="pl-en">Set</span>((<span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-c1">B</span>)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">a0</span><span class="pl-k">+</span><span class="pl-c1">B</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">a</span>);</td>
      </tr>
      <tr>
        <td id="L154" class="blob-num js-line-number" data-line-number="154"></td>
        <td id="LC154" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> <span class="pl-c1">Q</span><span class="pl-k">=</span><span class="pl-smi">p</span>.<span class="pl-c1">R</span>;<span class="pl-smi">p</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span><span class="pl-c1">Q</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">Q</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">y</span>;<span class="pl-smi">p</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span><span class="pl-c1">Q</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">Q</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">y</span>};<span class="pl-smi">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Advance</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">t0</span><span class="pl-k">&lt;</span>p<span class="pl-k">&amp;&amp;</span><span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">t0</span><span class="pl-k">&gt;</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>){<span class="pl-k">var</span> <span class="pl-c1">B</span><span class="pl-k">=</span>(p<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">t0</span>)<span class="pl-k">/</span>(<span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">t0</span>);<span class="pl-c1">this</span>.<span class="pl-smi">c0</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>(<span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-c1">B</span>)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">c0</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">B</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-smi">c0</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>(<span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-c1">B</span>)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">c0</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">B</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">a0</span><span class="pl-k">=</span>(<span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-c1">B</span>)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">a0</span><span class="pl-k">+</span><span class="pl-c1">B</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">a</span>;<span class="pl-c1">this</span>.<span class="pl-smi">t0</span><span class="pl-k">=</span>p}};<span class="pl-smi">w</span>.<span class="pl-en">b2Transform</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">position</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">A</span>;<span class="pl-c1">this</span>.<span class="pl-c1">R</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">F</span>};<span class="pl-smi">w</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2Transform</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-c1">B</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L155" class="blob-num js-line-number" data-line-number="155"></td>
        <td id="LC155" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">null</span>;<span class="pl-k">if</span>(<span class="pl-c1">B</span><span class="pl-k">===</span><span class="pl-c1">undefined</span>)<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(p){<span class="pl-c1">this</span>.<span class="pl-smi">position</span>.<span class="pl-en">SetV</span>(p);<span class="pl-c1">this</span>.<span class="pl-c1">R</span>.<span class="pl-en">SetM</span>(<span class="pl-c1">B</span>)}};<span class="pl-smi">w</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Initialize</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-c1">B</span>){<span class="pl-c1">this</span>.<span class="pl-smi">position</span>.<span class="pl-en">SetV</span>(p);<span class="pl-c1">this</span>.<span class="pl-c1">R</span>.<span class="pl-en">SetM</span>(<span class="pl-c1">B</span>)};<span class="pl-smi">w</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetIdentity</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">position</span>.<span class="pl-en">SetZero</span>();<span class="pl-c1">this</span>.<span class="pl-c1">R</span>.<span class="pl-en">SetIdentity</span>()};<span class="pl-smi">w</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Set</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-c1">this</span>.<span class="pl-smi">position</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">p</span>.<span class="pl-smi">position</span>);<span class="pl-c1">this</span>.<span class="pl-c1">R</span>.<span class="pl-en">SetM</span>(<span class="pl-smi">p</span>.<span class="pl-c1">R</span>)};<span class="pl-smi">w</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAngle</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-c1">this</span>.<span class="pl-c1">R</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-c1">R</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span>)};<span class="pl-c1">A</span>.<span class="pl-en">b2Vec2</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2Vec2</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-c1">B</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-c1">B</span><span class="pl-k">===</span><span class="pl-c1">undefined</span>)<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>p;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">B</span>};</td>
      </tr>
      <tr>
        <td id="L156" class="blob-num js-line-number" data-line-number="156"></td>
        <td id="LC156" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetZero</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Set</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-c1">B</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-c1">B</span><span class="pl-k">===</span><span class="pl-c1">undefined</span>)<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>p;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">B</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetV</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">p</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">p</span>.<span class="pl-c1">y</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetNegative</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">A</span>(<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span>,<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span>)};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">NegativeSelf</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span>};<span class="pl-c1">A</span>.<span class="pl-en">Make</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-c1">B</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-c1">B</span><span class="pl-k">===</span><span class="pl-c1">undefined</span>)<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">A</span>(p,<span class="pl-c1">B</span>)};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">A</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-c1">y</span>)};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Add</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-smi">p</span>.<span class="pl-c1">x</span>;</td>
      </tr>
      <tr>
        <td id="L157" class="blob-num js-line-number" data-line-number="157"></td>
        <td id="LC157" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-smi">p</span>.<span class="pl-c1">y</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Subtract</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span><span class="pl-smi">p</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span><span class="pl-smi">p</span>.<span class="pl-c1">y</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Multiply</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span>p;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span>p};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">MulM</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-k">var</span> <span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">p</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">B</span><span class="pl-k">+</span><span class="pl-smi">p</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">p</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">B</span><span class="pl-k">+</span><span class="pl-smi">p</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">MulTM</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-k">var</span> <span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-c1">K</span>.<span class="pl-en">Dot</span>(<span class="pl-c1">this</span>,<span class="pl-smi">p</span>.<span class="pl-smi">col1</span>);<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">K</span>.<span class="pl-en">Dot</span>(<span class="pl-c1">this</span>,<span class="pl-smi">p</span>.<span class="pl-smi">col2</span>);<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">B</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">CrossVF</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> <span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>p<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-k">-</span>p<span class="pl-k">*</span><span class="pl-c1">B</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">CrossFV</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> <span class="pl-c1">B</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L158" class="blob-num js-line-number" data-line-number="158"></td>
        <td id="LC158" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-k">-</span>p<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>p<span class="pl-k">*</span><span class="pl-c1">B</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">MinV</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">&lt;</span><span class="pl-smi">p</span>.<span class="pl-c1">x</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">:</span><span class="pl-smi">p</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">&lt;</span><span class="pl-smi">p</span>.<span class="pl-c1">y</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">:</span><span class="pl-smi">p</span>.<span class="pl-c1">y</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">MaxV</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">&gt;</span><span class="pl-smi">p</span>.<span class="pl-c1">x</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">:</span><span class="pl-smi">p</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">&gt;</span><span class="pl-smi">p</span>.<span class="pl-c1">y</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">:</span><span class="pl-smi">p</span>.<span class="pl-c1">y</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Abs</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">&lt;</span><span class="pl-c1">0</span>)<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span>;<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">&lt;</span><span class="pl-c1">0</span>)<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Length</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span>)};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">LengthSquared</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Normalize</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> p<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L159" class="blob-num js-line-number" data-line-number="159"></td>
        <td id="LC159" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span>);<span class="pl-k">if</span>(p<span class="pl-k">&lt;</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>)<span class="pl-k">return</span> <span class="pl-c1">0</span>;<span class="pl-k">var</span> <span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>p;<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span><span class="pl-c1">B</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span><span class="pl-c1">B</span>;<span class="pl-k">return</span> p};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">IsValid</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">K</span>.<span class="pl-en">IsValid</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-c1">K</span>.<span class="pl-en">IsValid</span>(<span class="pl-c1">this</span>.<span class="pl-c1">y</span>)};<span class="pl-c1">U</span>.<span class="pl-en">b2Vec3</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2Vec3</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-c1">B</span>,<span class="pl-c1">Q</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-c1">B</span><span class="pl-k">===</span><span class="pl-c1">undefined</span>)<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-c1">Q</span><span class="pl-k">===</span><span class="pl-c1">undefined</span>)<span class="pl-c1">Q</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>p;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">B</span>;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">Q</span>};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetZero</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Set</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-c1">B</span>,<span class="pl-c1">Q</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-c1">B</span><span class="pl-k">===</span><span class="pl-c1">undefined</span>)<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-c1">Q</span><span class="pl-k">===</span><span class="pl-c1">undefined</span>)<span class="pl-c1">Q</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>p;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">B</span>;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">Q</span>};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">SetV</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L160" class="blob-num js-line-number" data-line-number="160"></td>
        <td id="LC160" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">p</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">p</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-smi">p</span>.<span class="pl-c1">z</span>};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetNegative</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">U</span>(<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span>,<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span>,<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span>)};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">NegativeSelf</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span>};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">U</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-c1">z</span>)};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Add</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-smi">p</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-smi">p</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">+=</span><span class="pl-smi">p</span>.<span class="pl-c1">z</span>};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Subtract</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span><span class="pl-smi">p</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span><span class="pl-smi">p</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">-=</span><span class="pl-smi">p</span>.<span class="pl-c1">z</span>};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Multiply</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span>p;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span>p;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">*=</span>p}})();</td>
      </tr>
      <tr>
        <td id="L161" class="blob-num js-line-number" data-line-number="161"></td>
        <td id="LC161" class="blob-code blob-code-inner js-file-line">(<span class="pl-k">function</span>(){<span class="pl-k">var</span> <span class="pl-c1">F</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">Math</span>.<span class="pl-smi">b2Math</span>,<span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">Math</span>.<span class="pl-smi">b2Sweep</span>,<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">Math</span>.<span class="pl-smi">b2Transform</span>,y<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">Math</span>.<span class="pl-smi">b2Vec2</span>,w<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">b2Color</span>,<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">b2Settings</span>,<span class="pl-c1">U</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2AABB</span>,p<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2ContactPoint</span>,<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2DynamicTreeBroadPhase</span>,<span class="pl-c1">Q</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2RayCastInput</span>,<span class="pl-c1">V</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2RayCastOutput</span>,<span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">Shapes</span>.<span class="pl-smi">b2CircleShape</span>,<span class="pl-c1">L</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">Shapes</span>.<span class="pl-smi">b2EdgeShape</span>,<span class="pl-c1">I</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">Shapes</span>.<span class="pl-smi">b2MassData</span>,<span class="pl-c1">W</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">Shapes</span>.<span class="pl-smi">b2PolygonShape</span>,<span class="pl-c1">Y</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">Shapes</span>.<span class="pl-smi">b2Shape</span>,</td>
      </tr>
      <tr>
        <td id="L162" class="blob-num js-line-number" data-line-number="162"></td>
        <td id="LC162" class="blob-code blob-code-inner js-file-line">k<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2Body</span>,z<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2BodyDef</span>,u<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2ContactFilter</span>,<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2ContactImpulse</span>,<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2ContactListener</span>,<span class="pl-c1">O</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2ContactManager</span>,<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2DebugDraw</span>,<span class="pl-c1">R</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2DestructionListener</span>,<span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2FilterData</span>,<span class="pl-c1">S</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2Fixture</span>,aa<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2FixtureDef</span>,<span class="pl-c1">Z</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2Island</span>,d<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2TimeStep</span>,h<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2World</span>,l<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2Contact</span>,j<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2ContactFactory</span>,</td>
      </tr>
      <tr>
        <td id="L163" class="blob-num js-line-number" data-line-number="163"></td>
        <td id="LC163" class="blob-code blob-code-inner js-file-line">o<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2ContactSolver</span>,q<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2Joint</span>,n<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2PulleyJoint</span>;<span class="pl-smi">k</span>.<span class="pl-en">b2Body</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">m_xf</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">K</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">G</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_linearVelocity</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_force</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">y</span>};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">connectEdges</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>,<span class="pl-smi">g</span>){<span class="pl-k">if</span>(g<span class="pl-k">===</span><span class="pl-c1">undefined</span>)g<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-smi">c</span>.<span class="pl-en">GetDirectionVector</span>().<span class="pl-c1">y</span>,<span class="pl-smi">c</span>.<span class="pl-en">GetDirectionVector</span>().<span class="pl-c1">x</span>);g<span class="pl-k">=</span><span class="pl-c1">F</span>.<span class="pl-en">MulFV</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">tan</span>((b<span class="pl-k">-</span>g)<span class="pl-k">*</span><span class="pl-c1">0.5</span>),<span class="pl-smi">c</span>.<span class="pl-en">GetDirectionVector</span>());g<span class="pl-k">=</span><span class="pl-c1">F</span>.<span class="pl-en">SubtractVV</span>(g,<span class="pl-smi">c</span>.<span class="pl-en">GetNormalVector</span>());g<span class="pl-k">=</span><span class="pl-c1">F</span>.<span class="pl-en">MulFV</span>(<span class="pl-c1">A</span>.<span class="pl-smi">b2_toiSlop</span>,g);g<span class="pl-k">=</span><span class="pl-c1">F</span>.<span class="pl-en">AddVV</span>(g,<span class="pl-smi">c</span>.<span class="pl-en">GetVertex1</span>());<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">F</span>.<span class="pl-en">AddVV</span>(<span class="pl-smi">a</span>.<span class="pl-en">GetDirectionVector</span>(),</td>
      </tr>
      <tr>
        <td id="L164" class="blob-num js-line-number" data-line-number="164"></td>
        <td id="LC164" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">c</span>.<span class="pl-en">GetDirectionVector</span>());<span class="pl-smi">e</span>.<span class="pl-en">Normalize</span>();<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-c1">F</span>.<span class="pl-en">Dot</span>(<span class="pl-smi">a</span>.<span class="pl-en">GetDirectionVector</span>(),<span class="pl-smi">c</span>.<span class="pl-en">GetNormalVector</span>())<span class="pl-k">&gt;</span><span class="pl-c1">0</span>;<span class="pl-smi">a</span>.<span class="pl-en">SetNextEdge</span>(c,g,e,f);<span class="pl-smi">c</span>.<span class="pl-en">SetPrevEdge</span>(a,g,e,f);<span class="pl-k">return</span> b};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">CreateFixture</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_world</span>.<span class="pl-en">IsLocked</span>()<span class="pl-k">==</span><span class="pl-c1">true</span>)<span class="pl-k">return</span> <span class="pl-c1">null</span>;<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">S</span>;<span class="pl-smi">c</span>.<span class="pl-en">Create</span>(<span class="pl-c1">this</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_xf</span>,a);<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;</span><span class="pl-smi">k</span>.<span class="pl-smi">e_activeFlag</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">c</span>.<span class="pl-en">CreateProxy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_world</span>.<span class="pl-smi">m_contactManager</span>.<span class="pl-smi">m_broadPhase</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_xf</span>);<span class="pl-smi">c</span>.<span class="pl-smi">m_next</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureList</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureList</span><span class="pl-k">=</span>c;<span class="pl-k">++</span><span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureCount</span>;<span class="pl-smi">c</span>.<span class="pl-smi">m_body</span><span class="pl-k">=</span><span class="pl-c1">this</span>;<span class="pl-smi">c</span>.<span class="pl-smi">m_density</span><span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-en">ResetMassData</span>();<span class="pl-c1">this</span>.<span class="pl-smi">m_world</span>.<span class="pl-smi">m_flags</span><span class="pl-k">|=</span></td>
      </tr>
      <tr>
        <td id="L165" class="blob-num js-line-number" data-line-number="165"></td>
        <td id="LC165" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">h</span>.<span class="pl-smi">e_newFixture</span>;<span class="pl-k">return</span> c};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">CreateFixture2</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>){<span class="pl-k">if</span>(c<span class="pl-k">===</span><span class="pl-c1">undefined</span>)c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">aa</span>;<span class="pl-smi">g</span>.<span class="pl-c1">shape</span><span class="pl-k">=</span>a;<span class="pl-smi">g</span>.<span class="pl-smi">density</span><span class="pl-k">=</span>c;<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">CreateFixture</span>(g)};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">DestroyFixture</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_world</span>.<span class="pl-en">IsLocked</span>()<span class="pl-k">!=</span><span class="pl-c1">true</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureList</span>,g<span class="pl-k">=</span><span class="pl-c1">null</span>;c<span class="pl-k">!=</span><span class="pl-c1">null</span>;){<span class="pl-k">if</span>(c<span class="pl-k">==</span>a){<span class="pl-k">if</span>(g)<span class="pl-smi">g</span>.<span class="pl-smi">m_next</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">m_next</span>;<span class="pl-k">else</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureList</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">m_next</span>;<span class="pl-k">break</span>}g<span class="pl-k">=</span>c;c<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">m_next</span>}<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_contactList</span>;c;){g<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">contact</span>;c<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">next</span>;<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-en">GetFixtureA</span>(),e<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-en">GetFixtureB</span>();<span class="pl-k">if</span>(a<span class="pl-k">==</span>b<span class="pl-k">||</span>a<span class="pl-k">==</span>e)<span class="pl-c1">this</span>.<span class="pl-smi">m_world</span>.<span class="pl-smi">m_contactManager</span>.<span class="pl-en">Destroy</span>(g)}<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;</span></td>
      </tr>
      <tr>
        <td id="L166" class="blob-num js-line-number" data-line-number="166"></td>
        <td id="LC166" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">k</span>.<span class="pl-smi">e_activeFlag</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-en">DestroyProxy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_world</span>.<span class="pl-smi">m_contactManager</span>.<span class="pl-smi">m_broadPhase</span>);<span class="pl-smi">a</span>.<span class="pl-en">Destroy</span>();<span class="pl-smi">a</span>.<span class="pl-smi">m_body</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-smi">a</span>.<span class="pl-smi">m_next</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">--</span><span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureCount</span>;<span class="pl-c1">this</span>.<span class="pl-en">ResetMassData</span>()}};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetPositionAndAngle</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>){<span class="pl-k">if</span>(c<span class="pl-k">===</span><span class="pl-c1">undefined</span>)c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> g;<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_world</span>.<span class="pl-en">IsLocked</span>()<span class="pl-k">!=</span><span class="pl-c1">true</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>.<span class="pl-en">Set</span>(c);<span class="pl-c1">this</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>.<span class="pl-en">SetV</span>(a);g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">g</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">g</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span></td>
      </tr>
      <tr>
        <td id="L167" class="blob-num js-line-number" data-line-number="167"></td>
        <td id="LC167" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c0</span>.<span class="pl-en">SetV</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a0</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a</span><span class="pl-k">=</span>c;b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_world</span>.<span class="pl-smi">m_contactManager</span>.<span class="pl-smi">m_broadPhase</span>;<span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureList</span>;g;g<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">m_next</span>)<span class="pl-smi">g</span>.<span class="pl-en">Synchronize</span>(b,<span class="pl-c1">this</span>.<span class="pl-smi">m_xf</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_xf</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_world</span>.<span class="pl-smi">m_contactManager</span>.<span class="pl-en">FindNewContacts</span>()}};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetTransform</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-en">SetPositionAndAngle</span>(<span class="pl-smi">a</span>.<span class="pl-smi">position</span>,<span class="pl-smi">a</span>.<span class="pl-en">GetAngle</span>())};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetTransform</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_xf</span>};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetPosition</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetPosition</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-en">SetPositionAndAngle</span>(a,</td>
      </tr>
      <tr>
        <td id="L168" class="blob-num js-line-number" data-line-number="168"></td>
        <td id="LC168" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-en">GetAngle</span>())};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAngle</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a</span>};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetAngle</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">undefined</span>)a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-en">SetPositionAndAngle</span>(<span class="pl-c1">this</span>.<span class="pl-en">GetPosition</span>(),a)};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetWorldCenter</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetLocalCenter</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetLinearVelocity</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_type</span><span class="pl-k">!=</span><span class="pl-smi">k</span>.<span class="pl-smi">b2_staticBody</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-en">SetV</span>(a)};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetLinearVelocity</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_linearVelocity</span>};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">SetAngularVelocity</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L169" class="blob-num js-line-number" data-line-number="169"></td>
        <td id="LC169" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">undefined</span>)a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_type</span><span class="pl-k">!=</span><span class="pl-smi">k</span>.<span class="pl-smi">b2_staticBody</span>)<span class="pl-c1">this</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">=</span>a};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAngularVelocity</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_angularVelocity</span>};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetDefinition</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">z</span>;<span class="pl-smi">a</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">GetType</span>();<span class="pl-smi">a</span>.<span class="pl-smi">allowSleep</span><span class="pl-k">=</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;</span><span class="pl-smi">k</span>.<span class="pl-smi">e_allowSleepFlag</span>)<span class="pl-k">==</span><span class="pl-smi">k</span>.<span class="pl-smi">e_allowSleepFlag</span>;<span class="pl-smi">a</span>.<span class="pl-smi">angle</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">GetAngle</span>();<span class="pl-smi">a</span>.<span class="pl-smi">angularDamping</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_angularDamping</span>;<span class="pl-smi">a</span>.<span class="pl-smi">angularVelocity</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_angularVelocity</span>;<span class="pl-smi">a</span>.<span class="pl-smi">fixedRotation</span><span class="pl-k">=</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;</span><span class="pl-smi">k</span>.<span class="pl-smi">e_fixedRotationFlag</span>)<span class="pl-k">==</span><span class="pl-smi">k</span>.<span class="pl-smi">e_fixedRotationFlag</span>;<span class="pl-smi">a</span>.<span class="pl-smi">bullet</span><span class="pl-k">=</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;</span></td>
      </tr>
      <tr>
        <td id="L170" class="blob-num js-line-number" data-line-number="170"></td>
        <td id="LC170" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">k</span>.<span class="pl-smi">e_bulletFlag</span>)<span class="pl-k">==</span><span class="pl-smi">k</span>.<span class="pl-smi">e_bulletFlag</span>;<span class="pl-smi">a</span>.<span class="pl-smi">awake</span><span class="pl-k">=</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;</span><span class="pl-smi">k</span>.<span class="pl-smi">e_awakeFlag</span>)<span class="pl-k">==</span><span class="pl-smi">k</span>.<span class="pl-smi">e_awakeFlag</span>;<span class="pl-smi">a</span>.<span class="pl-smi">linearDamping</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_linearDamping</span>;<span class="pl-smi">a</span>.<span class="pl-smi">linearVelocity</span>.<span class="pl-en">SetV</span>(<span class="pl-c1">this</span>.<span class="pl-en">GetLinearVelocity</span>());<span class="pl-smi">a</span>.<span class="pl-smi">position</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">GetPosition</span>();<span class="pl-smi">a</span>.<span class="pl-smi">userData</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">GetUserData</span>();<span class="pl-k">return</span> a};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ApplyForce</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>){<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_type</span><span class="pl-k">==</span><span class="pl-smi">k</span>.<span class="pl-smi">b2_dynamicBody</span>){<span class="pl-c1">this</span>.<span class="pl-en">IsAwake</span>()<span class="pl-k">==</span><span class="pl-c1">false</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-en">SetAwake</span>(<span class="pl-c1">true</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_force</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_force</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_torque</span><span class="pl-k">+=</span>(<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span>)<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>(<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span>)<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>}};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ApplyTorque</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a<span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L171" class="blob-num js-line-number" data-line-number="171"></td>
        <td id="LC171" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">undefined</span>)a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_type</span><span class="pl-k">==</span><span class="pl-smi">k</span>.<span class="pl-smi">b2_dynamicBody</span>){<span class="pl-c1">this</span>.<span class="pl-en">IsAwake</span>()<span class="pl-k">==</span><span class="pl-c1">false</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-en">SetAwake</span>(<span class="pl-c1">true</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_torque</span><span class="pl-k">+=</span>a}};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ApplyImpulse</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>){<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_type</span><span class="pl-k">==</span><span class="pl-smi">k</span>.<span class="pl-smi">b2_dynamicBody</span>){<span class="pl-c1">this</span>.<span class="pl-en">IsAwake</span>()<span class="pl-k">==</span><span class="pl-c1">false</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-en">SetAwake</span>(<span class="pl-c1">true</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invI</span><span class="pl-k">*</span>((<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span>)<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>(<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span>)<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>)}};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Split</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">GetLinearVelocity</span>().<span class="pl-en">Copy</span>(),g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">GetAngularVelocity</span>(),</td>
      </tr>
      <tr>
        <td id="L172" class="blob-num js-line-number" data-line-number="172"></td>
        <td id="LC172" class="blob-code blob-code-inner js-file-line">b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">GetWorldCenter</span>(),e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_world</span>.<span class="pl-en">CreateBody</span>(<span class="pl-c1">this</span>.<span class="pl-en">GetDefinition</span>()),f,m<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureList</span>;m;)<span class="pl-k">if</span>(<span class="pl-en">a</span>(m)){<span class="pl-k">var</span> r<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-smi">m_next</span>;<span class="pl-k">if</span>(f)<span class="pl-smi">f</span>.<span class="pl-smi">m_next</span><span class="pl-k">=</span>r;<span class="pl-k">else</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureList</span><span class="pl-k">=</span>r;<span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureCount</span><span class="pl-k">--</span>;<span class="pl-smi">m</span>.<span class="pl-smi">m_next</span><span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">m_fixtureList</span>;<span class="pl-smi">e</span>.<span class="pl-smi">m_fixtureList</span><span class="pl-k">=</span>m;<span class="pl-smi">e</span>.<span class="pl-smi">m_fixtureCount</span><span class="pl-k">++</span>;<span class="pl-smi">m</span>.<span class="pl-smi">m_body</span><span class="pl-k">=</span>e;m<span class="pl-k">=</span>r}<span class="pl-k">else</span>{f<span class="pl-k">=</span>m;m<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-smi">m_next</span>}<span class="pl-c1">this</span>.<span class="pl-en">ResetMassData</span>();<span class="pl-smi">e</span>.<span class="pl-en">ResetMassData</span>();f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">GetWorldCenter</span>();a<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-en">GetWorldCenter</span>();f<span class="pl-k">=</span><span class="pl-c1">F</span>.<span class="pl-en">AddVV</span>(c,<span class="pl-c1">F</span>.<span class="pl-en">CrossFV</span>(g,<span class="pl-c1">F</span>.<span class="pl-en">SubtractVV</span>(f,b)));c<span class="pl-k">=</span><span class="pl-c1">F</span>.<span class="pl-en">AddVV</span>(c,<span class="pl-c1">F</span>.<span class="pl-en">CrossFV</span>(g,<span class="pl-c1">F</span>.<span class="pl-en">SubtractVV</span>(a,b)));<span class="pl-c1">this</span>.<span class="pl-en">SetLinearVelocity</span>(f);<span class="pl-smi">e</span>.<span class="pl-en">SetLinearVelocity</span>(c);</td>
      </tr>
      <tr>
        <td id="L173" class="blob-num js-line-number" data-line-number="173"></td>
        <td id="LC173" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-en">SetAngularVelocity</span>(g);<span class="pl-smi">e</span>.<span class="pl-en">SetAngularVelocity</span>(g);<span class="pl-c1">this</span>.<span class="pl-en">SynchronizeFixtures</span>();<span class="pl-smi">e</span>.<span class="pl-en">SynchronizeFixtures</span>();<span class="pl-k">return</span> e};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Merge</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> c;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">m_fixtureList</span>;c;){<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">m_next</span>;<span class="pl-smi">a</span>.<span class="pl-smi">m_fixtureCount</span><span class="pl-k">--</span>;<span class="pl-smi">c</span>.<span class="pl-smi">m_next</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureList</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureList</span><span class="pl-k">=</span>c;<span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureCount</span><span class="pl-k">++</span>;<span class="pl-smi">c</span>.<span class="pl-smi">m_body</span><span class="pl-k">=</span>e;c<span class="pl-k">=</span>g}<span class="pl-smi">b</span>.<span class="pl-smi">m_fixtureCount</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>,e<span class="pl-k">=</span>a;<span class="pl-smi">b</span>.<span class="pl-en">GetWorldCenter</span>();<span class="pl-smi">e</span>.<span class="pl-en">GetWorldCenter</span>();<span class="pl-smi">b</span>.<span class="pl-en">GetLinearVelocity</span>().<span class="pl-en">Copy</span>();<span class="pl-smi">e</span>.<span class="pl-en">GetLinearVelocity</span>().<span class="pl-en">Copy</span>();<span class="pl-smi">b</span>.<span class="pl-en">GetAngularVelocity</span>();<span class="pl-smi">e</span>.<span class="pl-en">GetAngularVelocity</span>();<span class="pl-smi">b</span>.<span class="pl-en">ResetMassData</span>();<span class="pl-c1">this</span>.<span class="pl-en">SynchronizeFixtures</span>()};</td>
      </tr>
      <tr>
        <td id="L174" class="blob-num js-line-number" data-line-number="174"></td>
        <td id="LC174" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetMass</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetInertia</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_I</span>};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetMassData</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-smi">a</span>.<span class="pl-smi">mass</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>;<span class="pl-smi">a</span>.<span class="pl-c1">I</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_I</span>;<span class="pl-smi">a</span>.<span class="pl-smi">center</span>.<span class="pl-en">SetV</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>)};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetMassData</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">A</span>.<span class="pl-en">b2Assert</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_world</span>.<span class="pl-en">IsLocked</span>()<span class="pl-k">==</span><span class="pl-c1">false</span>);<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_world</span>.<span class="pl-en">IsLocked</span>()<span class="pl-k">!=</span><span class="pl-c1">true</span>)<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_type</span><span class="pl-k">==</span><span class="pl-smi">k</span>.<span class="pl-smi">b2_dynamicBody</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_invI</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_I</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">mass</span>;<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span><span class="pl-k">&lt;=</span><span class="pl-c1">0</span>)<span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>;<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-c1">I</span><span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;</span><span class="pl-smi">k</span>.<span class="pl-smi">e_fixedRotationFlag</span>)<span class="pl-k">==</span></td>
      </tr>
      <tr>
        <td id="L175" class="blob-num js-line-number" data-line-number="175"></td>
        <td id="LC175" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_I</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">I</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span><span class="pl-k">*</span>(<span class="pl-smi">a</span>.<span class="pl-smi">center</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">center</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-smi">center</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">center</span>.<span class="pl-c1">y</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_invI</span><span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">m_I</span>}<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-en">Copy</span>();<span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">a</span>.<span class="pl-smi">center</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c0</span>.<span class="pl-en">SetV</span>(<span class="pl-c1">F</span>.<span class="pl-en">MulX</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_xf</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>));<span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-en">SetV</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c0</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">*-</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">c</span>.<span class="pl-c1">y</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">*+</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">c</span>.<span class="pl-c1">x</span>)}};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ResetMassData</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">m_invI</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_I</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-en">SetZero</span>();</td>
      </tr>
      <tr>
        <td id="L176" class="blob-num js-line-number" data-line-number="176"></td>
        <td id="LC176" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>(<span class="pl-k">!</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_type</span><span class="pl-k">==</span><span class="pl-smi">k</span>.<span class="pl-smi">b2_staticBody</span><span class="pl-k">||</span><span class="pl-c1">this</span>.<span class="pl-smi">m_type</span><span class="pl-k">==</span><span class="pl-smi">k</span>.<span class="pl-smi">b2_kinematicBody</span>)){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-en">Make</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>),c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureList</span>;c;c<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">m_next</span>)<span class="pl-k">if</span>(<span class="pl-smi">c</span>.<span class="pl-smi">m_density</span><span class="pl-k">!=</span><span class="pl-c1">0</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-en">GetMassData</span>();<span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span><span class="pl-k">+=</span><span class="pl-smi">g</span>.<span class="pl-smi">mass</span>;<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-smi">g</span>.<span class="pl-smi">center</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">g</span>.<span class="pl-smi">mass</span>;<span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-smi">g</span>.<span class="pl-smi">center</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">g</span>.<span class="pl-smi">mass</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_I</span><span class="pl-k">+=</span><span class="pl-smi">g</span>.<span class="pl-c1">I</span>}<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span><span class="pl-k">&gt;</span><span class="pl-c1">0</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>;<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMass</span>;<span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMass</span>}<span class="pl-k">else</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_I</span><span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;</span><span class="pl-smi">k</span>.<span class="pl-smi">e_fixedRotationFlag</span>)<span class="pl-k">==</span><span class="pl-c1">0</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_I</span><span class="pl-k">-=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span><span class="pl-k">*</span>(<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_I</span><span class="pl-k">*=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_inertiaScale</span>;<span class="pl-c1">A</span>.<span class="pl-en">b2Assert</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_I</span><span class="pl-k">&gt;</span></td>
      </tr>
      <tr>
        <td id="L177" class="blob-num js-line-number" data-line-number="177"></td>
        <td id="LC177" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_invI</span><span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">m_I</span>}<span class="pl-k">else</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_invI</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_I</span><span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-en">Copy</span>();<span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-en">SetV</span>(a);<span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c0</span>.<span class="pl-en">SetV</span>(<span class="pl-c1">F</span>.<span class="pl-en">MulX</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_xf</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>));<span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-en">SetV</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c0</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">*-</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">c</span>.<span class="pl-c1">y</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">*+</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">c</span>.<span class="pl-c1">x</span>)}};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetWorldPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">y</span>(<span class="pl-smi">c</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">c</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>,<span class="pl-smi">c</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">c</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>);<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span>;</td>
      </tr>
      <tr>
        <td id="L178" class="blob-num js-line-number" data-line-number="178"></td>
        <td id="LC178" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span>;<span class="pl-k">return</span> a};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetWorldVector</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">F</span>.<span class="pl-en">MulMV</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>,a)};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetLocalPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">F</span>.<span class="pl-en">MulXT</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_xf</span>,a)};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetLocalVector</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">F</span>.<span class="pl-en">MulTMV</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>,a)};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetLinearVelocityFromWorldPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">y</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">*</span>(<span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span>),<span class="pl-c1">this</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">*</span>(<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span>))};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetLinearVelocityFromLocalPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L179" class="blob-num js-line-number" data-line-number="179"></td>
        <td id="LC179" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">y</span>(<span class="pl-smi">c</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">c</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>,<span class="pl-smi">c</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">c</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>);<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span>;<span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">y</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">*</span>(<span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span>),<span class="pl-c1">this</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">*</span>(<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span>))};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetLinearDamping</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_linearDamping</span>};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetLinearDamping</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">undefined</span>)a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_linearDamping</span><span class="pl-k">=</span>a};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAngularDamping</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_angularDamping</span>};</td>
      </tr>
      <tr>
        <td id="L180" class="blob-num js-line-number" data-line-number="180"></td>
        <td id="LC180" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetAngularDamping</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">undefined</span>)a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_angularDamping</span><span class="pl-k">=</span>a};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetType</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">undefined</span>)a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_type</span><span class="pl-k">!=</span>a){<span class="pl-c1">this</span>.<span class="pl-smi">m_type</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-en">ResetMassData</span>();<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_type</span><span class="pl-k">==</span><span class="pl-smi">k</span>.<span class="pl-smi">b2_staticBody</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-en">SetZero</span>();<span class="pl-c1">this</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">=</span><span class="pl-c1">0</span>}<span class="pl-c1">this</span>.<span class="pl-en">SetAwake</span>(<span class="pl-c1">true</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_force</span>.<span class="pl-en">SetZero</span>();<span class="pl-c1">this</span>.<span class="pl-smi">m_torque</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_contactList</span>;a;a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">next</span>)<span class="pl-smi">a</span>.<span class="pl-smi">contact</span>.<span class="pl-en">FlagForFiltering</span>()}};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetType</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_type</span>};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetBullet</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a)<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">|=</span></td>
      </tr>
      <tr>
        <td id="L181" class="blob-num js-line-number" data-line-number="181"></td>
        <td id="LC181" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">k</span>.<span class="pl-smi">e_bulletFlag</span>;<span class="pl-k">else</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;=</span><span class="pl-k">~</span><span class="pl-smi">k</span>.<span class="pl-smi">e_bulletFlag</span>};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">IsBullet</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;</span><span class="pl-smi">k</span>.<span class="pl-smi">e_bulletFlag</span>)<span class="pl-k">==</span><span class="pl-smi">k</span>.<span class="pl-smi">e_bulletFlag</span>};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetSleepingAllowed</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a)<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">|=</span><span class="pl-smi">k</span>.<span class="pl-smi">e_allowSleepFlag</span>;<span class="pl-k">else</span>{<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;=</span><span class="pl-k">~</span><span class="pl-smi">k</span>.<span class="pl-smi">e_allowSleepFlag</span>;<span class="pl-c1">this</span>.<span class="pl-en">SetAwake</span>(<span class="pl-c1">true</span>)}};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetAwake</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a){<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">|=</span><span class="pl-smi">k</span>.<span class="pl-smi">e_awakeFlag</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_sleepTime</span><span class="pl-k">=</span><span class="pl-c1">0</span>}<span class="pl-k">else</span>{<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;=</span><span class="pl-k">~</span><span class="pl-smi">k</span>.<span class="pl-smi">e_awakeFlag</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_sleepTime</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-en">SetZero</span>();<span class="pl-c1">this</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_force</span>.<span class="pl-en">SetZero</span>();<span class="pl-c1">this</span>.<span class="pl-smi">m_torque</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L182" class="blob-num js-line-number" data-line-number="182"></td>
        <td id="LC182" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>}};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">IsAwake</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;</span><span class="pl-smi">k</span>.<span class="pl-smi">e_awakeFlag</span>)<span class="pl-k">==</span><span class="pl-smi">k</span>.<span class="pl-smi">e_awakeFlag</span>};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetFixedRotation</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a)<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">|=</span><span class="pl-smi">k</span>.<span class="pl-smi">e_fixedRotationFlag</span>;<span class="pl-k">else</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;=</span><span class="pl-k">~</span><span class="pl-smi">k</span>.<span class="pl-smi">e_fixedRotationFlag</span>;<span class="pl-c1">this</span>.<span class="pl-en">ResetMassData</span>()};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">IsFixedRotation</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;</span><span class="pl-smi">k</span>.<span class="pl-smi">e_fixedRotationFlag</span>)<span class="pl-k">==</span><span class="pl-smi">k</span>.<span class="pl-smi">e_fixedRotationFlag</span>};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetActive</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a<span class="pl-k">!=</span><span class="pl-c1">this</span>.<span class="pl-en">IsActive</span>()){<span class="pl-k">var</span> c;<span class="pl-k">if</span>(a){<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">|=</span><span class="pl-smi">k</span>.<span class="pl-smi">e_activeFlag</span>;a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_world</span>.<span class="pl-smi">m_contactManager</span>.<span class="pl-smi">m_broadPhase</span>;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureList</span>;c;c<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L183" class="blob-num js-line-number" data-line-number="183"></td>
        <td id="LC183" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">c</span>.<span class="pl-smi">m_next</span>)<span class="pl-smi">c</span>.<span class="pl-en">CreateProxy</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">m_xf</span>)}<span class="pl-k">else</span>{<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;=</span><span class="pl-k">~</span><span class="pl-smi">k</span>.<span class="pl-smi">e_activeFlag</span>;a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_world</span>.<span class="pl-smi">m_contactManager</span>.<span class="pl-smi">m_broadPhase</span>;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureList</span>;c;c<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">m_next</span>)<span class="pl-smi">c</span>.<span class="pl-en">DestroyProxy</span>(a);<span class="pl-k">for</span>(a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_contactList</span>;a;){c<span class="pl-k">=</span>a;a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">next</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_world</span>.<span class="pl-smi">m_contactManager</span>.<span class="pl-en">Destroy</span>(<span class="pl-smi">c</span>.<span class="pl-smi">contact</span>)}<span class="pl-c1">this</span>.<span class="pl-smi">m_contactList</span><span class="pl-k">=</span><span class="pl-c1">null</span>}}};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">IsActive</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;</span><span class="pl-smi">k</span>.<span class="pl-smi">e_activeFlag</span>)<span class="pl-k">==</span><span class="pl-smi">k</span>.<span class="pl-smi">e_activeFlag</span>};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">IsSleepingAllowed</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;</span><span class="pl-smi">k</span>.<span class="pl-smi">e_allowSleepFlag</span>)<span class="pl-k">==</span><span class="pl-smi">k</span>.<span class="pl-smi">e_allowSleepFlag</span>};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">GetFixtureList</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L184" class="blob-num js-line-number" data-line-number="184"></td>
        <td id="LC184" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureList</span>};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetJointList</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_jointList</span>};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetControllerList</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_controllerList</span>};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetContactList</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_contactList</span>};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetNext</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_next</span>};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetUserData</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_userData</span>};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetUserData</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_userData</span><span class="pl-k">=</span>a};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetWorld</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_world</span>};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2Body</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">=</span><span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L185" class="blob-num js-line-number" data-line-number="185"></td>
        <td id="LC185" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">bullet</span>)<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">|=</span><span class="pl-smi">k</span>.<span class="pl-smi">e_bulletFlag</span>;<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">fixedRotation</span>)<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">|=</span><span class="pl-smi">k</span>.<span class="pl-smi">e_fixedRotationFlag</span>;<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">allowSleep</span>)<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">|=</span><span class="pl-smi">k</span>.<span class="pl-smi">e_allowSleepFlag</span>;<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">awake</span>)<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">|=</span><span class="pl-smi">k</span>.<span class="pl-smi">e_awakeFlag</span>;<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">active</span>)<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">|=</span><span class="pl-smi">k</span>.<span class="pl-smi">e_activeFlag</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_world</span><span class="pl-k">=</span>c;<span class="pl-c1">this</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">a</span>.<span class="pl-smi">position</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>.<span class="pl-en">Set</span>(<span class="pl-smi">a</span>.<span class="pl-smi">angle</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-en">SetZero</span>();<span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">t0</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a0</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">angle</span>;<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>,b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">g</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L186" class="blob-num js-line-number" data-line-number="186"></td>
        <td id="LC186" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">g</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c0</span>.<span class="pl-en">SetV</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_contactList</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_controllerList</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_jointList</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_controllerCount</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_next</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_prev</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">a</span>.<span class="pl-smi">linearVelocity</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">angularVelocity</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_linearDamping</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">linearDamping</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_angularDamping</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">angularDamping</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_force</span>.<span class="pl-en">Set</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_sleepTime</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_torque</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_type</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">type</span>;<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_type</span><span class="pl-k">==</span></td>
      </tr>
      <tr>
        <td id="L187" class="blob-num js-line-number" data-line-number="187"></td>
        <td id="LC187" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">k</span>.<span class="pl-smi">b2_dynamicBody</span>)<span class="pl-c1">this</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-k">else</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_invI</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_I</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_inertiaScale</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">inertiaScale</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_userData</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">userData</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureList</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureCount</span><span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SynchronizeFixtures</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-smi">s_xf1</span>;<span class="pl-smi">a</span>.<span class="pl-c1">R</span>.<span class="pl-en">Set</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a0</span>);<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">R</span>,g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>;<span class="pl-smi">a</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c0</span>.<span class="pl-c1">x</span><span class="pl-k">-</span>(<span class="pl-smi">c</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">g</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">c</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">g</span>.<span class="pl-c1">y</span>);<span class="pl-smi">a</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c0</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>(<span class="pl-smi">c</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">g</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">c</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">g</span>.<span class="pl-c1">y</span>);g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_world</span>.<span class="pl-smi">m_contactManager</span>.<span class="pl-smi">m_broadPhase</span>;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureList</span>;c;c<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L188" class="blob-num js-line-number" data-line-number="188"></td>
        <td id="LC188" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">c</span>.<span class="pl-smi">m_next</span>)<span class="pl-smi">c</span>.<span class="pl-en">Synchronize</span>(g,a,<span class="pl-c1">this</span>.<span class="pl-smi">m_xf</span>)};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SynchronizeTransform</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>.<span class="pl-en">Set</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a</span>);<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>,c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">-</span>(<span class="pl-smi">a</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">c</span>.<span class="pl-c1">y</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>(<span class="pl-smi">a</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">c</span>.<span class="pl-c1">y</span>)};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ShouldCollide</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_type</span><span class="pl-k">!=</span><span class="pl-smi">k</span>.<span class="pl-smi">b2_dynamicBody</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-smi">m_type</span><span class="pl-k">!=</span><span class="pl-smi">k</span>.<span class="pl-smi">b2_dynamicBody</span>)<span class="pl-k">return</span> <span class="pl-c1">false</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_jointList</span>;c;c<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">next</span>)<span class="pl-k">if</span>(<span class="pl-smi">c</span>.<span class="pl-smi">other</span><span class="pl-k">==</span>a)<span class="pl-k">if</span>(<span class="pl-smi">c</span>.<span class="pl-smi">joint</span>.<span class="pl-smi">m_collideConnected</span><span class="pl-k">==</span><span class="pl-c1">false</span>)<span class="pl-k">return</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L189" class="blob-num js-line-number" data-line-number="189"></td>
        <td id="LC189" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> <span class="pl-c1">true</span>};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Advance</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">undefined</span>)a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-en">Advance</span>(a);<span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-en">SetV</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c0</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a0</span>;<span class="pl-c1">this</span>.<span class="pl-en">SynchronizeTransform</span>()};<span class="pl-smi">Box2D</span>.<span class="pl-smi">postDefs</span>.<span class="pl-c1">push</span>(<span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2Body</span>.<span class="pl-smi">s_xf1</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">K</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2Body</span>.<span class="pl-smi">e_islandFlag</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2Body</span>.<span class="pl-smi">e_awakeFlag</span><span class="pl-k">=</span><span class="pl-c1">2</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2Body</span>.<span class="pl-smi">e_allowSleepFlag</span><span class="pl-k">=</span><span class="pl-c1">4</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2Body</span>.<span class="pl-smi">e_bulletFlag</span><span class="pl-k">=</span><span class="pl-c1">8</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2Body</span>.<span class="pl-smi">e_fixedRotationFlag</span><span class="pl-k">=</span><span class="pl-c1">16</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2Body</span>.<span class="pl-smi">e_activeFlag</span><span class="pl-k">=</span><span class="pl-c1">32</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2Body</span>.<span class="pl-smi">b2_staticBody</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L190" class="blob-num js-line-number" data-line-number="190"></td>
        <td id="LC190" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2Body</span>.<span class="pl-smi">b2_kinematicBody</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2Body</span>.<span class="pl-smi">b2_dynamicBody</span><span class="pl-k">=</span><span class="pl-c1">2</span>});<span class="pl-smi">z</span>.<span class="pl-en">b2BodyDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">position</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">linearVelocity</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">y</span>};<span class="pl-smi">z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2BodyDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">userData</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">position</span>.<span class="pl-en">Set</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-smi">angle</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">linearVelocity</span>.<span class="pl-en">Set</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-smi">angularDamping</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">linearDamping</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">angularVelocity</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">awake</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">allowSleep</span><span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-c1">this</span>.<span class="pl-smi">bullet</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">fixedRotation</span><span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-smi">b2_staticBody</span>;<span class="pl-c1">this</span>.<span class="pl-smi">active</span><span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-c1">this</span>.<span class="pl-smi">inertiaScale</span><span class="pl-k">=</span><span class="pl-c1">1</span>};<span class="pl-smi">u</span>.<span class="pl-en">b2ContactFilter</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-smi">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">ShouldCollide</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L191" class="blob-num js-line-number" data-line-number="191"></td>
        <td id="LC191" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">GetFilterData</span>(),b<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-en">GetFilterData</span>();<span class="pl-k">if</span>(<span class="pl-smi">g</span>.<span class="pl-smi">groupIndex</span><span class="pl-k">==</span><span class="pl-smi">b</span>.<span class="pl-smi">groupIndex</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">g</span>.<span class="pl-smi">groupIndex</span><span class="pl-k">!=</span><span class="pl-c1">0</span>)<span class="pl-k">return</span> <span class="pl-smi">g</span>.<span class="pl-smi">groupIndex</span><span class="pl-k">&gt;</span><span class="pl-c1">0</span>;<span class="pl-k">return</span>(<span class="pl-smi">g</span>.<span class="pl-smi">maskBits</span><span class="pl-k">&amp;</span><span class="pl-smi">b</span>.<span class="pl-smi">categoryBits</span>)<span class="pl-k">!=</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">g</span>.<span class="pl-smi">categoryBits</span><span class="pl-k">&amp;</span><span class="pl-smi">b</span>.<span class="pl-smi">maskBits</span>)<span class="pl-k">!=</span><span class="pl-c1">0</span>};<span class="pl-smi">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">RayCollide</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>){<span class="pl-k">if</span>(<span class="pl-k">!</span>a)<span class="pl-k">return</span> <span class="pl-c1">true</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">ShouldCollide</span>(a <span class="pl-k">instanceof</span> <span class="pl-c1">S</span><span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">null</span>,c)};<span class="pl-smi">Box2D</span>.<span class="pl-smi">postDefs</span>.<span class="pl-c1">push</span>(<span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2ContactFilter</span>.<span class="pl-smi">b2_defaultFilter</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">u</span>});<span class="pl-c1">D</span>.<span class="pl-en">b2ContactImpulse</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">normalImpulses</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector_a2j_Number</span>(<span class="pl-c1">A</span>.<span class="pl-smi">b2_maxManifoldPoints</span>);<span class="pl-c1">this</span>.<span class="pl-smi">tangentImpulses</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L192" class="blob-num js-line-number" data-line-number="192"></td>
        <td id="LC192" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">Vector_a2j_Number</span>(<span class="pl-c1">A</span>.<span class="pl-smi">b2_maxManifoldPoints</span>)};<span class="pl-c1">H</span>.<span class="pl-en">b2ContactListener</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">BeginContact</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">EndContact</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">PreSolve</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">PostSolve</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-smi">Box2D</span>.<span class="pl-smi">postDefs</span>.<span class="pl-c1">push</span>(<span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2ContactListener</span>.<span class="pl-smi">b2_defaultListener</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">H</span>});<span class="pl-c1">O</span>.<span class="pl-en">b2ContactManager</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">O</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2ContactManager</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">m_world</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_contactCount</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_contactFilter</span><span class="pl-k">=</span><span class="pl-smi">u</span>.<span class="pl-smi">b2_defaultFilter</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_contactListener</span><span class="pl-k">=</span><span class="pl-c1">H</span>.<span class="pl-smi">b2_defaultListener</span>;</td>
      </tr>
      <tr>
        <td id="L193" class="blob-num js-line-number" data-line-number="193"></td>
        <td id="LC193" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_contactFactory</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">j</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_allocator</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_broadPhase</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">B</span>};<span class="pl-c1">O</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">AddPair</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>a <span class="pl-k">instanceof</span> <span class="pl-c1">S</span><span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">null</span>,b<span class="pl-k">=</span>c <span class="pl-k">instanceof</span> <span class="pl-c1">S</span><span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">null</span>,e<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-en">GetBody</span>(),f<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">GetBody</span>();<span class="pl-k">if</span>(e<span class="pl-k">!=</span>f){<span class="pl-k">for</span>(<span class="pl-k">var</span> m<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-en">GetContactList</span>();m;){<span class="pl-k">if</span>(<span class="pl-smi">m</span>.<span class="pl-smi">other</span><span class="pl-k">==</span>e){<span class="pl-k">var</span> r<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-smi">contact</span>.<span class="pl-en">GetFixtureA</span>(),s<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-smi">contact</span>.<span class="pl-en">GetFixtureB</span>();<span class="pl-k">if</span>(r<span class="pl-k">==</span>g<span class="pl-k">&amp;&amp;</span>s<span class="pl-k">==</span>b)<span class="pl-k">return</span>;<span class="pl-k">if</span>(r<span class="pl-k">==</span>b<span class="pl-k">&amp;&amp;</span>s<span class="pl-k">==</span>g)<span class="pl-k">return</span>}m<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-c1">next</span>}<span class="pl-k">if</span>(<span class="pl-smi">f</span>.<span class="pl-en">ShouldCollide</span>(e)<span class="pl-k">!=</span><span class="pl-c1">false</span>)<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_contactFilter</span>.<span class="pl-en">ShouldCollide</span>(g,b)<span class="pl-k">!=</span><span class="pl-c1">false</span>){m<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_contactFactory</span>.<span class="pl-en">Create</span>(g,b);g<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-en">GetFixtureA</span>();b<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-en">GetFixtureB</span>();</td>
      </tr>
      <tr>
        <td id="L194" class="blob-num js-line-number" data-line-number="194"></td>
        <td id="LC194" class="blob-code blob-code-inner js-file-line">e<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">m_body</span>;f<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">m_body</span>;<span class="pl-smi">m</span>.<span class="pl-smi">m_prev</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-smi">m</span>.<span class="pl-smi">m_next</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_world</span>.<span class="pl-smi">m_contactList</span>;<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_world</span>.<span class="pl-smi">m_contactList</span><span class="pl-k">!=</span><span class="pl-c1">null</span>)<span class="pl-c1">this</span>.<span class="pl-smi">m_world</span>.<span class="pl-smi">m_contactList</span>.<span class="pl-smi">m_prev</span><span class="pl-k">=</span>m;<span class="pl-c1">this</span>.<span class="pl-smi">m_world</span>.<span class="pl-smi">m_contactList</span><span class="pl-k">=</span>m;<span class="pl-smi">m</span>.<span class="pl-smi">m_nodeA</span>.<span class="pl-smi">contact</span><span class="pl-k">=</span>m;<span class="pl-smi">m</span>.<span class="pl-smi">m_nodeA</span>.<span class="pl-smi">other</span><span class="pl-k">=</span>f;<span class="pl-smi">m</span>.<span class="pl-smi">m_nodeA</span>.<span class="pl-smi">prev</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-smi">m</span>.<span class="pl-smi">m_nodeA</span>.<span class="pl-c1">next</span><span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">m_contactList</span>;<span class="pl-k">if</span>(<span class="pl-smi">e</span>.<span class="pl-smi">m_contactList</span><span class="pl-k">!=</span><span class="pl-c1">null</span>)<span class="pl-smi">e</span>.<span class="pl-smi">m_contactList</span>.<span class="pl-smi">prev</span><span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-smi">m_nodeA</span>;<span class="pl-smi">e</span>.<span class="pl-smi">m_contactList</span><span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-smi">m_nodeA</span>;<span class="pl-smi">m</span>.<span class="pl-smi">m_nodeB</span>.<span class="pl-smi">contact</span><span class="pl-k">=</span>m;<span class="pl-smi">m</span>.<span class="pl-smi">m_nodeB</span>.<span class="pl-smi">other</span><span class="pl-k">=</span>e;<span class="pl-smi">m</span>.<span class="pl-smi">m_nodeB</span>.<span class="pl-smi">prev</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-smi">m</span>.<span class="pl-smi">m_nodeB</span>.<span class="pl-c1">next</span><span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">m_contactList</span>;<span class="pl-k">if</span>(<span class="pl-smi">f</span>.<span class="pl-smi">m_contactList</span><span class="pl-k">!=</span><span class="pl-c1">null</span>)<span class="pl-smi">f</span>.<span class="pl-smi">m_contactList</span>.<span class="pl-smi">prev</span><span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-smi">m_nodeB</span>;<span class="pl-smi">f</span>.<span class="pl-smi">m_contactList</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L195" class="blob-num js-line-number" data-line-number="195"></td>
        <td id="LC195" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">m</span>.<span class="pl-smi">m_nodeB</span>;<span class="pl-k">++</span><span class="pl-c1">this</span>.<span class="pl-smi">m_world</span>.<span class="pl-smi">m_contactCount</span>}}};<span class="pl-c1">O</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">FindNewContacts</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">m_broadPhase</span>.<span class="pl-en">UpdatePairs</span>(<span class="pl-smi">Box2D</span>.<span class="pl-en">generateCallback</span>(<span class="pl-c1">this</span>,<span class="pl-c1">this</span>.<span class="pl-smi">AddPair</span>))};<span class="pl-c1">O</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Destroy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">GetFixtureA</span>(),g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">GetFixtureB</span>();c<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-en">GetBody</span>();g<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-en">GetBody</span>();<span class="pl-smi">a</span>.<span class="pl-en">IsTouching</span>()<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_contactListener</span>.<span class="pl-en">EndContact</span>(a);<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">m_prev</span>)<span class="pl-smi">a</span>.<span class="pl-smi">m_prev</span>.<span class="pl-smi">m_next</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">m_next</span>;<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">m_next</span>)<span class="pl-smi">a</span>.<span class="pl-smi">m_next</span>.<span class="pl-smi">m_prev</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">m_prev</span>;<span class="pl-k">if</span>(a<span class="pl-k">==</span><span class="pl-c1">this</span>.<span class="pl-smi">m_world</span>.<span class="pl-smi">m_contactList</span>)<span class="pl-c1">this</span>.<span class="pl-smi">m_world</span>.<span class="pl-smi">m_contactList</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">m_next</span>;<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">m_nodeA</span>.<span class="pl-smi">prev</span>)<span class="pl-smi">a</span>.<span class="pl-smi">m_nodeA</span>.<span class="pl-smi">prev</span>.<span class="pl-c1">next</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">m_nodeA</span>.<span class="pl-c1">next</span>;</td>
      </tr>
      <tr>
        <td id="L196" class="blob-num js-line-number" data-line-number="196"></td>
        <td id="LC196" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">m_nodeA</span>.<span class="pl-c1">next</span>)<span class="pl-smi">a</span>.<span class="pl-smi">m_nodeA</span>.<span class="pl-c1">next</span>.<span class="pl-smi">prev</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">m_nodeA</span>.<span class="pl-smi">prev</span>;<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">m_nodeA</span><span class="pl-k">==</span><span class="pl-smi">c</span>.<span class="pl-smi">m_contactList</span>)<span class="pl-smi">c</span>.<span class="pl-smi">m_contactList</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">m_nodeA</span>.<span class="pl-c1">next</span>;<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">m_nodeB</span>.<span class="pl-smi">prev</span>)<span class="pl-smi">a</span>.<span class="pl-smi">m_nodeB</span>.<span class="pl-smi">prev</span>.<span class="pl-c1">next</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">m_nodeB</span>.<span class="pl-c1">next</span>;<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">m_nodeB</span>.<span class="pl-c1">next</span>)<span class="pl-smi">a</span>.<span class="pl-smi">m_nodeB</span>.<span class="pl-c1">next</span>.<span class="pl-smi">prev</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">m_nodeB</span>.<span class="pl-smi">prev</span>;<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">m_nodeB</span><span class="pl-k">==</span><span class="pl-smi">g</span>.<span class="pl-smi">m_contactList</span>)<span class="pl-smi">g</span>.<span class="pl-smi">m_contactList</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">m_nodeB</span>.<span class="pl-c1">next</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_contactFactory</span>.<span class="pl-en">Destroy</span>(a);<span class="pl-k">--</span><span class="pl-c1">this</span>.<span class="pl-smi">m_contactCount</span>};<span class="pl-c1">O</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Collide</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_world</span>.<span class="pl-smi">m_contactList</span>;a;){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">GetFixtureA</span>(),g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">GetFixtureB</span>(),b<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-en">GetBody</span>(),e<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-en">GetBody</span>();<span class="pl-k">if</span>(<span class="pl-smi">b</span>.<span class="pl-en">IsAwake</span>()<span class="pl-k">==</span><span class="pl-c1">false</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">e</span>.<span class="pl-en">IsAwake</span>()<span class="pl-k">==</span></td>
      </tr>
      <tr>
        <td id="L197" class="blob-num js-line-number" data-line-number="197"></td>
        <td id="LC197" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">false</span>)a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">GetNext</span>();<span class="pl-k">else</span>{<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;</span><span class="pl-smi">l</span>.<span class="pl-smi">e_filterFlag</span>){<span class="pl-k">if</span>(<span class="pl-smi">e</span>.<span class="pl-en">ShouldCollide</span>(b)<span class="pl-k">==</span><span class="pl-c1">false</span>){c<span class="pl-k">=</span>a;a<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-en">GetNext</span>();<span class="pl-c1">this</span>.<span class="pl-en">Destroy</span>(c);<span class="pl-k">continue</span>}<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_contactFilter</span>.<span class="pl-en">ShouldCollide</span>(c,g)<span class="pl-k">==</span><span class="pl-c1">false</span>){c<span class="pl-k">=</span>a;a<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-en">GetNext</span>();<span class="pl-c1">this</span>.<span class="pl-en">Destroy</span>(c);<span class="pl-k">continue</span>}<span class="pl-smi">a</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;=</span><span class="pl-k">~</span><span class="pl-smi">l</span>.<span class="pl-smi">e_filterFlag</span>}<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_broadPhase</span>.<span class="pl-en">TestOverlap</span>(<span class="pl-smi">c</span>.<span class="pl-smi">m_proxy</span>,<span class="pl-smi">g</span>.<span class="pl-smi">m_proxy</span>)<span class="pl-k">==</span><span class="pl-c1">false</span>){c<span class="pl-k">=</span>a;a<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-en">GetNext</span>();<span class="pl-c1">this</span>.<span class="pl-en">Destroy</span>(c)}<span class="pl-k">else</span>{<span class="pl-smi">a</span>.<span class="pl-en">Update</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_contactListener</span>);a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">GetNext</span>()}}}};<span class="pl-smi">Box2D</span>.<span class="pl-smi">postDefs</span>.<span class="pl-c1">push</span>(<span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2ContactManager</span>.<span class="pl-smi">s_evalCP</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>});<span class="pl-c1">E</span>.<span class="pl-en">b2DebugDraw</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};</td>
      </tr>
      <tr>
        <td id="L198" class="blob-num js-line-number" data-line-number="198"></td>
        <td id="LC198" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2DebugDraw</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetFlags</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetFlags</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">AppendFlags</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ClearFlags</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetSprite</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetSprite</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetDrawScale</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetDrawScale</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetLineThickness</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetLineThickness</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetAlpha</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAlpha</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">SetFillAlpha</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L199" class="blob-num js-line-number" data-line-number="199"></td>
        <td id="LC199" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(){};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetFillAlpha</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetXFormScale</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetXFormScale</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">DrawPolygon</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">DrawSolidPolygon</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">DrawCircle</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">DrawSolidCircle</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">DrawSegment</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">DrawTransform</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-smi">Box2D</span>.<span class="pl-smi">postDefs</span>.<span class="pl-c1">push</span>(<span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2DebugDraw</span>.<span class="pl-smi">e_shapeBit</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2DebugDraw</span>.<span class="pl-smi">e_jointBit</span><span class="pl-k">=</span><span class="pl-c1">2</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2DebugDraw</span>.<span class="pl-smi">e_aabbBit</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L200" class="blob-num js-line-number" data-line-number="200"></td>
        <td id="LC200" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">4</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2DebugDraw</span>.<span class="pl-smi">e_pairBit</span><span class="pl-k">=</span><span class="pl-c1">8</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2DebugDraw</span>.<span class="pl-smi">e_centerOfMassBit</span><span class="pl-k">=</span><span class="pl-c1">16</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2DebugDraw</span>.<span class="pl-smi">e_controllerBit</span><span class="pl-k">=</span><span class="pl-c1">32</span>});<span class="pl-c1">R</span>.<span class="pl-en">b2DestructionListener</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">R</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SayGoodbyeJoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">R</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SayGoodbyeFixture</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">N</span>.<span class="pl-en">b2FilterData</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">categoryBits</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">maskBits</span><span class="pl-k">=</span><span class="pl-c1">65535</span>;<span class="pl-c1">this</span>.<span class="pl-smi">groupIndex</span><span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">N</span>;<span class="pl-smi">a</span>.<span class="pl-smi">categoryBits</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">categoryBits</span>;<span class="pl-smi">a</span>.<span class="pl-smi">maskBits</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">maskBits</span>;<span class="pl-smi">a</span>.<span class="pl-smi">groupIndex</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">groupIndex</span>;<span class="pl-k">return</span> a};<span class="pl-c1">S</span>.<span class="pl-en">b2Fixture</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">m_filter</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L201" class="blob-num js-line-number" data-line-number="201"></td>
        <td id="LC201" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">N</span>};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetType</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_shape</span>.<span class="pl-en">GetType</span>()};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetShape</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_shape</span>};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetSensor</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_isSensor</span><span class="pl-k">!=</span>a){<span class="pl-c1">this</span>.<span class="pl-smi">m_isSensor</span><span class="pl-k">=</span>a;<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_body</span><span class="pl-k">!=</span><span class="pl-c1">null</span>)<span class="pl-k">for</span>(a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_body</span>.<span class="pl-en">GetContactList</span>();a;){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">contact</span>,g<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-en">GetFixtureA</span>(),b<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-en">GetFixtureB</span>();<span class="pl-k">if</span>(g<span class="pl-k">==</span><span class="pl-c1">this</span><span class="pl-k">||</span>b<span class="pl-k">==</span><span class="pl-c1">this</span>)<span class="pl-smi">c</span>.<span class="pl-en">SetSensor</span>(<span class="pl-smi">g</span>.<span class="pl-en">IsSensor</span>()<span class="pl-k">||</span><span class="pl-smi">b</span>.<span class="pl-en">IsSensor</span>());a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">next</span>}}};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">IsSensor</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_isSensor</span>};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetFilterData</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_filter</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">Copy</span>();<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">this</span>.<span class="pl-smi">m_body</span>)<span class="pl-k">for</span>(a<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L202" class="blob-num js-line-number" data-line-number="202"></td>
        <td id="LC202" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_body</span>.<span class="pl-en">GetContactList</span>();a;){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">contact</span>,g<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-en">GetFixtureA</span>(),b<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-en">GetFixtureB</span>();<span class="pl-k">if</span>(g<span class="pl-k">==</span><span class="pl-c1">this</span><span class="pl-k">||</span>b<span class="pl-k">==</span><span class="pl-c1">this</span>)<span class="pl-smi">c</span>.<span class="pl-en">FlagForFiltering</span>();a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">next</span>}};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetFilterData</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_filter</span>.<span class="pl-en">Copy</span>()};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetBody</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_body</span>};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetNext</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_next</span>};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetUserData</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_userData</span>};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetUserData</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_userData</span><span class="pl-k">=</span>a};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">TestPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_shape</span>.<span class="pl-en">TestPoint</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_body</span>.<span class="pl-en">GetTransform</span>(),</td>
      </tr>
      <tr>
        <td id="L203" class="blob-num js-line-number" data-line-number="203"></td>
        <td id="LC203" class="blob-code blob-code-inner js-file-line">a)};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">RayCast</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_shape</span>.<span class="pl-en">RayCast</span>(a,c,<span class="pl-c1">this</span>.<span class="pl-smi">m_body</span>.<span class="pl-en">GetTransform</span>())};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetMassData</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">undefined</span>)a<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(a<span class="pl-k">==</span><span class="pl-c1">null</span>)a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">I</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_shape</span>.<span class="pl-en">ComputeMass</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">m_density</span>);<span class="pl-k">return</span> a};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetDensity</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">undefined</span>)a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_density</span><span class="pl-k">=</span>a};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetDensity</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_density</span>};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetFriction</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_friction</span>};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetFriction</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">undefined</span>)a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_friction</span><span class="pl-k">=</span>a};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">GetRestitution</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L204" class="blob-num js-line-number" data-line-number="204"></td>
        <td id="LC204" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_restitution</span>};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetRestitution</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">undefined</span>)a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_restitution</span><span class="pl-k">=</span>a};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAABB</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_aabb</span>};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2Fixture</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">m_aabb</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">U</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_shape</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_next</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_body</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_userData</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_restitution</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_friction</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_density</span><span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Create</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>,<span class="pl-smi">g</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_userData</span><span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">userData</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_friction</span><span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">friction</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_restitution</span><span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">restitution</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_body</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">m_next</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_filter</span><span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">filter</span>.<span class="pl-en">Copy</span>();</td>
      </tr>
      <tr>
        <td id="L205" class="blob-num js-line-number" data-line-number="205"></td>
        <td id="LC205" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_isSensor</span><span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">isSensor</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_shape</span><span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">shape</span>.<span class="pl-en">Copy</span>();<span class="pl-c1">this</span>.<span class="pl-smi">m_density</span><span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">density</span>};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Destroy</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">m_shape</span><span class="pl-k">=</span><span class="pl-c1">null</span>};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">CreateProxy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_shape</span>.<span class="pl-en">ComputeAABB</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_aabb</span>,c);<span class="pl-c1">this</span>.<span class="pl-smi">m_proxy</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">CreateProxy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_aabb</span>,<span class="pl-c1">this</span>)};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">DestroyProxy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_proxy</span><span class="pl-k">!=</span><span class="pl-c1">null</span>){<span class="pl-smi">a</span>.<span class="pl-en">DestroyProxy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_proxy</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_proxy</span><span class="pl-k">=</span><span class="pl-c1">null</span>}};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Synchronize</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>,<span class="pl-smi">g</span>){<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_proxy</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">U</span>,e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">U</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_shape</span>.<span class="pl-en">ComputeAABB</span>(b,c);<span class="pl-c1">this</span>.<span class="pl-smi">m_shape</span>.<span class="pl-en">ComputeAABB</span>(e,g);</td>
      </tr>
      <tr>
        <td id="L206" class="blob-num js-line-number" data-line-number="206"></td>
        <td id="LC206" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_aabb</span>.<span class="pl-en">Combine</span>(b,e);c<span class="pl-k">=</span><span class="pl-c1">F</span>.<span class="pl-en">SubtractVV</span>(<span class="pl-smi">g</span>.<span class="pl-smi">position</span>,<span class="pl-smi">c</span>.<span class="pl-smi">position</span>);<span class="pl-smi">a</span>.<span class="pl-en">MoveProxy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_proxy</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_aabb</span>,c)}};<span class="pl-smi">aa</span>.<span class="pl-en">b2FixtureDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">filter</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">N</span>};<span class="pl-smi">aa</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2FixtureDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">userData</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">shape</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">friction</span><span class="pl-k">=</span><span class="pl-c1">0.2</span>;<span class="pl-c1">this</span>.<span class="pl-smi">density</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">restitution</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">filter</span>.<span class="pl-smi">categoryBits</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">filter</span>.<span class="pl-smi">maskBits</span><span class="pl-k">=</span><span class="pl-c1">65535</span>;<span class="pl-c1">this</span>.<span class="pl-smi">filter</span>.<span class="pl-smi">groupIndex</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">isSensor</span><span class="pl-k">=</span><span class="pl-c1">false</span>};<span class="pl-c1">Z</span>.<span class="pl-en">b2Island</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">Z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2Island</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">m_bodies</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_contacts</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_joints</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>};</td>
      </tr>
      <tr>
        <td id="L207" class="blob-num js-line-number" data-line-number="207"></td>
        <td id="LC207" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">Z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Initialize</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>,<span class="pl-smi">g</span>,<span class="pl-smi">b</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>){<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">undefined</span>)a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(c<span class="pl-k">===</span><span class="pl-c1">undefined</span>)c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(g<span class="pl-k">===</span><span class="pl-c1">undefined</span>)g<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> m<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_bodyCapacity</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">m_contactCapacity</span><span class="pl-k">=</span>c;<span class="pl-c1">this</span>.<span class="pl-smi">m_jointCapacity</span><span class="pl-k">=</span>g;<span class="pl-c1">this</span>.<span class="pl-smi">m_jointCount</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_contactCount</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyCount</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_allocator</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">m_listener</span><span class="pl-k">=</span>e;<span class="pl-c1">this</span>.<span class="pl-smi">m_contactSolver</span><span class="pl-k">=</span>f;<span class="pl-k">for</span>(m<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodies</span>.<span class="pl-c1">length</span>;m<span class="pl-k">&lt;</span>a;m<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-smi">m_bodies</span>[m]<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">for</span>(m<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_contacts</span>.<span class="pl-c1">length</span>;m<span class="pl-k">&lt;</span>c;m<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-smi">m_contacts</span>[m]<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">for</span>(m<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_joints</span>.<span class="pl-c1">length</span>;m<span class="pl-k">&lt;</span>g;m<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-smi">m_joints</span>[m]<span class="pl-k">=</span><span class="pl-c1">null</span>};<span class="pl-c1">Z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Clear</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">m_jointCount</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L208" class="blob-num js-line-number" data-line-number="208"></td>
        <td id="LC208" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_contactCount</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyCount</span><span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">Z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Solve</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>,<span class="pl-smi">g</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span><span class="pl-c1">0</span>,f;<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyCount</span>;<span class="pl-k">++</span>b){e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodies</span>[b];<span class="pl-k">if</span>(<span class="pl-smi">e</span>.<span class="pl-en">GetType</span>()<span class="pl-k">==</span><span class="pl-smi">k</span>.<span class="pl-smi">b2_dynamicBody</span>){<span class="pl-smi">e</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-smi">a</span>.<span class="pl-smi">dt</span><span class="pl-k">*</span>(<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">e</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span><span class="pl-smi">e</span>.<span class="pl-smi">m_force</span>.<span class="pl-c1">x</span>);<span class="pl-smi">e</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-smi">a</span>.<span class="pl-smi">dt</span><span class="pl-k">*</span>(<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-smi">e</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span><span class="pl-smi">e</span>.<span class="pl-smi">m_force</span>.<span class="pl-c1">y</span>);<span class="pl-smi">e</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">+=</span><span class="pl-smi">a</span>.<span class="pl-smi">dt</span><span class="pl-k">*</span><span class="pl-smi">e</span>.<span class="pl-smi">m_invI</span><span class="pl-k">*</span><span class="pl-smi">e</span>.<span class="pl-smi">m_torque</span>;<span class="pl-smi">e</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-en">Multiply</span>(<span class="pl-c1">F</span>.<span class="pl-en">Clamp</span>(<span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-smi">dt</span><span class="pl-k">*</span><span class="pl-smi">e</span>.<span class="pl-smi">m_linearDamping</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>));<span class="pl-smi">e</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">*=</span><span class="pl-c1">F</span>.<span class="pl-en">Clamp</span>(<span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-smi">dt</span><span class="pl-k">*</span><span class="pl-smi">e</span>.<span class="pl-smi">m_angularDamping</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>)}}<span class="pl-c1">this</span>.<span class="pl-smi">m_contactSolver</span>.<span class="pl-en">Initialize</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">m_contacts</span>,</td>
      </tr>
      <tr>
        <td id="L209" class="blob-num js-line-number" data-line-number="209"></td>
        <td id="LC209" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_contactCount</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_allocator</span>);c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_contactSolver</span>;<span class="pl-smi">c</span>.<span class="pl-en">InitVelocityConstraints</span>(a);<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_jointCount</span>;<span class="pl-k">++</span>b){f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_joints</span>[b];<span class="pl-smi">f</span>.<span class="pl-en">InitVelocityConstraints</span>(a)}<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-smi">velocityIterations</span>;<span class="pl-k">++</span>b){<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_jointCount</span>;<span class="pl-k">++</span>e){f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_joints</span>[e];<span class="pl-smi">f</span>.<span class="pl-en">SolveVelocityConstraints</span>(a)}<span class="pl-smi">c</span>.<span class="pl-en">SolveVelocityConstraints</span>()}<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_jointCount</span>;<span class="pl-k">++</span>b){f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_joints</span>[b];<span class="pl-smi">f</span>.<span class="pl-en">FinalizeVelocityConstraints</span>()}<span class="pl-smi">c</span>.<span class="pl-en">FinalizeVelocityConstraints</span>();<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyCount</span>;<span class="pl-k">++</span>b){e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodies</span>[b];<span class="pl-k">if</span>(<span class="pl-smi">e</span>.<span class="pl-en">GetType</span>()<span class="pl-k">!=</span></td>
      </tr>
      <tr>
        <td id="L210" class="blob-num js-line-number" data-line-number="210"></td>
        <td id="LC210" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">k</span>.<span class="pl-smi">b2_staticBody</span>){<span class="pl-k">var</span> m<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">dt</span><span class="pl-k">*</span><span class="pl-smi">e</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span>,r<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">dt</span><span class="pl-k">*</span><span class="pl-smi">e</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span>;<span class="pl-k">if</span>(m<span class="pl-k">*</span>m<span class="pl-k">+</span>r<span class="pl-k">*</span>r<span class="pl-k">&gt;</span><span class="pl-c1">A</span>.<span class="pl-smi">b2_maxTranslationSquared</span>){<span class="pl-smi">e</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-en">Normalize</span>();<span class="pl-smi">e</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span><span class="pl-c1">A</span>.<span class="pl-smi">b2_maxTranslation</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">inv_dt</span>;<span class="pl-smi">e</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span><span class="pl-c1">A</span>.<span class="pl-smi">b2_maxTranslation</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">inv_dt</span>}m<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">dt</span><span class="pl-k">*</span><span class="pl-smi">e</span>.<span class="pl-smi">m_angularVelocity</span>;<span class="pl-k">if</span>(m<span class="pl-k">*</span>m<span class="pl-k">&gt;</span><span class="pl-c1">A</span>.<span class="pl-smi">b2_maxRotationSquared</span>)<span class="pl-smi">e</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">&lt;</span><span class="pl-c1">0</span><span class="pl-k">?</span><span class="pl-k">-</span><span class="pl-c1">A</span>.<span class="pl-smi">b2_maxRotation</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">inv_dt</span><span class="pl-k">:</span><span class="pl-c1">A</span>.<span class="pl-smi">b2_maxRotation</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">inv_dt</span>;<span class="pl-smi">e</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c0</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">e</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>);<span class="pl-smi">e</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a0</span><span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a</span>;<span class="pl-smi">e</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-smi">a</span>.<span class="pl-smi">dt</span><span class="pl-k">*</span><span class="pl-smi">e</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span>;<span class="pl-smi">e</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span></td>
      </tr>
      <tr>
        <td id="L211" class="blob-num js-line-number" data-line-number="211"></td>
        <td id="LC211" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-smi">dt</span><span class="pl-k">*</span><span class="pl-smi">e</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span>;<span class="pl-smi">e</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a</span><span class="pl-k">+=</span><span class="pl-smi">a</span>.<span class="pl-smi">dt</span><span class="pl-k">*</span><span class="pl-smi">e</span>.<span class="pl-smi">m_angularVelocity</span>;<span class="pl-smi">e</span>.<span class="pl-en">SynchronizeTransform</span>()}}<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-smi">positionIterations</span>;<span class="pl-k">++</span>b){m<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-en">SolvePositionConstraints</span>(<span class="pl-c1">A</span>.<span class="pl-smi">b2_contactBaumgarte</span>);r<span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_jointCount</span>;<span class="pl-k">++</span>e){f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_joints</span>[e];f<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-en">SolvePositionConstraints</span>(<span class="pl-c1">A</span>.<span class="pl-smi">b2_contactBaumgarte</span>);r<span class="pl-k">=</span>r<span class="pl-k">&amp;&amp;</span>f}<span class="pl-k">if</span>(m<span class="pl-k">&amp;&amp;</span>r)<span class="pl-k">break</span>}<span class="pl-c1">this</span>.<span class="pl-en">Report</span>(<span class="pl-smi">c</span>.<span class="pl-smi">m_constraints</span>);<span class="pl-k">if</span>(g){g<span class="pl-k">=</span><span class="pl-c1">Number</span>.<span class="pl-c1">MAX_VALUE</span>;c<span class="pl-k">=</span><span class="pl-c1">A</span>.<span class="pl-smi">b2_linearSleepTolerance</span><span class="pl-k">*</span><span class="pl-c1">A</span>.<span class="pl-smi">b2_linearSleepTolerance</span>;m<span class="pl-k">=</span><span class="pl-c1">A</span>.<span class="pl-smi">b2_angularSleepTolerance</span><span class="pl-k">*</span><span class="pl-c1">A</span>.<span class="pl-smi">b2_angularSleepTolerance</span>;<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyCount</span>;<span class="pl-k">++</span>b){e<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L212" class="blob-num js-line-number" data-line-number="212"></td>
        <td id="LC212" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_bodies</span>[b];<span class="pl-k">if</span>(<span class="pl-smi">e</span>.<span class="pl-en">GetType</span>()<span class="pl-k">!=</span><span class="pl-smi">k</span>.<span class="pl-smi">b2_staticBody</span>){<span class="pl-k">if</span>((<span class="pl-smi">e</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;</span><span class="pl-smi">k</span>.<span class="pl-smi">e_allowSleepFlag</span>)<span class="pl-k">==</span><span class="pl-c1">0</span>)g<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">m_sleepTime</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>((<span class="pl-smi">e</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;</span><span class="pl-smi">k</span>.<span class="pl-smi">e_allowSleepFlag</span>)<span class="pl-k">==</span><span class="pl-c1">0</span><span class="pl-k">||</span><span class="pl-smi">e</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">*</span><span class="pl-smi">e</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">&gt;</span>m<span class="pl-k">||</span><span class="pl-c1">F</span>.<span class="pl-en">Dot</span>(<span class="pl-smi">e</span>.<span class="pl-smi">m_linearVelocity</span>,<span class="pl-smi">e</span>.<span class="pl-smi">m_linearVelocity</span>)<span class="pl-k">&gt;</span>c)g<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">m_sleepTime</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">else</span>{<span class="pl-smi">e</span>.<span class="pl-smi">m_sleepTime</span><span class="pl-k">+=</span><span class="pl-smi">a</span>.<span class="pl-smi">dt</span>;g<span class="pl-k">=</span><span class="pl-c1">F</span>.<span class="pl-en">Min</span>(g,<span class="pl-smi">e</span>.<span class="pl-smi">m_sleepTime</span>)}}}<span class="pl-k">if</span>(g<span class="pl-k">&gt;=</span><span class="pl-c1">A</span>.<span class="pl-smi">b2_timeToSleep</span>)<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyCount</span>;<span class="pl-k">++</span>b){e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodies</span>[b];<span class="pl-smi">e</span>.<span class="pl-en">SetAwake</span>(<span class="pl-c1">false</span>)}}};<span class="pl-c1">Z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolveTOI</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_contactSolver</span>.<span class="pl-en">Initialize</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">m_contacts</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_contactCount</span>,</td>
      </tr>
      <tr>
        <td id="L213" class="blob-num js-line-number" data-line-number="213"></td>
        <td id="LC213" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_allocator</span>);<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_contactSolver</span>;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_jointCount</span>;<span class="pl-k">++</span>c)<span class="pl-c1">this</span>.<span class="pl-smi">m_joints</span>[c].<span class="pl-en">InitVelocityConstraints</span>(a);<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-smi">velocityIterations</span>;<span class="pl-k">++</span>c){<span class="pl-smi">b</span>.<span class="pl-en">SolveVelocityConstraints</span>();<span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-c1">0</span>;g<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_jointCount</span>;<span class="pl-k">++</span>g)<span class="pl-c1">this</span>.<span class="pl-smi">m_joints</span>[g].<span class="pl-en">SolveVelocityConstraints</span>(a)}<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyCount</span>;<span class="pl-k">++</span>c){g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodies</span>[c];<span class="pl-k">if</span>(<span class="pl-smi">g</span>.<span class="pl-en">GetType</span>()<span class="pl-k">!=</span><span class="pl-smi">k</span>.<span class="pl-smi">b2_staticBody</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">dt</span><span class="pl-k">*</span><span class="pl-smi">g</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span>,f<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">dt</span><span class="pl-k">*</span><span class="pl-smi">g</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span>;<span class="pl-k">if</span>(e<span class="pl-k">*</span>e<span class="pl-k">+</span>f<span class="pl-k">*</span>f<span class="pl-k">&gt;</span><span class="pl-c1">A</span>.<span class="pl-smi">b2_maxTranslationSquared</span>){<span class="pl-smi">g</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-en">Normalize</span>();<span class="pl-smi">g</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span><span class="pl-c1">A</span>.<span class="pl-smi">b2_maxTranslation</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L214" class="blob-num js-line-number" data-line-number="214"></td>
        <td id="LC214" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-smi">inv_dt</span>;<span class="pl-smi">g</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span><span class="pl-c1">A</span>.<span class="pl-smi">b2_maxTranslation</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">inv_dt</span>}e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">dt</span><span class="pl-k">*</span><span class="pl-smi">g</span>.<span class="pl-smi">m_angularVelocity</span>;<span class="pl-k">if</span>(e<span class="pl-k">*</span>e<span class="pl-k">&gt;</span><span class="pl-c1">A</span>.<span class="pl-smi">b2_maxRotationSquared</span>)<span class="pl-smi">g</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">&lt;</span><span class="pl-c1">0</span><span class="pl-k">?</span><span class="pl-k">-</span><span class="pl-c1">A</span>.<span class="pl-smi">b2_maxRotation</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">inv_dt</span><span class="pl-k">:</span><span class="pl-c1">A</span>.<span class="pl-smi">b2_maxRotation</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">inv_dt</span>;<span class="pl-smi">g</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c0</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">g</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>);<span class="pl-smi">g</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a0</span><span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a</span>;<span class="pl-smi">g</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-smi">a</span>.<span class="pl-smi">dt</span><span class="pl-k">*</span><span class="pl-smi">g</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span>;<span class="pl-smi">g</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-smi">a</span>.<span class="pl-smi">dt</span><span class="pl-k">*</span><span class="pl-smi">g</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span>;<span class="pl-smi">g</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a</span><span class="pl-k">+=</span><span class="pl-smi">a</span>.<span class="pl-smi">dt</span><span class="pl-k">*</span><span class="pl-smi">g</span>.<span class="pl-smi">m_angularVelocity</span>;<span class="pl-smi">g</span>.<span class="pl-en">SynchronizeTransform</span>()}}<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-smi">positionIterations</span>;<span class="pl-k">++</span>c){e<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">SolvePositionConstraints</span>(<span class="pl-c1">0.75</span>);f<span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-c1">0</span>;g<span class="pl-k">&lt;</span></td>
      </tr>
      <tr>
        <td id="L215" class="blob-num js-line-number" data-line-number="215"></td>
        <td id="LC215" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_jointCount</span>;<span class="pl-k">++</span>g){<span class="pl-k">var</span> m<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_joints</span>[g].<span class="pl-en">SolvePositionConstraints</span>(<span class="pl-c1">A</span>.<span class="pl-smi">b2_contactBaumgarte</span>);f<span class="pl-k">=</span>f<span class="pl-k">&amp;&amp;</span>m}<span class="pl-k">if</span>(e<span class="pl-k">&amp;&amp;</span>f)<span class="pl-k">break</span>}<span class="pl-c1">this</span>.<span class="pl-en">Report</span>(<span class="pl-smi">b</span>.<span class="pl-smi">m_constraints</span>)};<span class="pl-c1">Z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Report</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_listener</span><span class="pl-k">!=</span><span class="pl-c1">null</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_contactCount</span>;<span class="pl-k">++</span>c){<span class="pl-k">for</span>(<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_contacts</span>[c],b<span class="pl-k">=</span>a[c],e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span><span class="pl-smi">b</span>.<span class="pl-smi">pointCount</span>;<span class="pl-k">++</span>e){<span class="pl-c1">Z</span>.<span class="pl-smi">s_impulse</span>.<span class="pl-smi">normalImpulses</span>[e]<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">points</span>[e].<span class="pl-smi">normalImpulse</span>;<span class="pl-c1">Z</span>.<span class="pl-smi">s_impulse</span>.<span class="pl-smi">tangentImpulses</span>[e]<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">points</span>[e].<span class="pl-smi">tangentImpulse</span>}<span class="pl-c1">this</span>.<span class="pl-smi">m_listener</span>.<span class="pl-en">PostSolve</span>(g,<span class="pl-c1">Z</span>.<span class="pl-smi">s_impulse</span>)}};<span class="pl-c1">Z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">AddBody</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-smi">a</span>.<span class="pl-smi">m_islandIndex</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L216" class="blob-num js-line-number" data-line-number="216"></td>
        <td id="LC216" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyCount</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_bodies</span>[<span class="pl-c1">this</span>.<span class="pl-smi">m_bodyCount</span><span class="pl-k">++</span>]<span class="pl-k">=</span>a};<span class="pl-c1">Z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">AddContact</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_contacts</span>[<span class="pl-c1">this</span>.<span class="pl-smi">m_contactCount</span><span class="pl-k">++</span>]<span class="pl-k">=</span>a};<span class="pl-c1">Z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">AddJoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_joints</span>[<span class="pl-c1">this</span>.<span class="pl-smi">m_jointCount</span><span class="pl-k">++</span>]<span class="pl-k">=</span>a};<span class="pl-smi">Box2D</span>.<span class="pl-smi">postDefs</span>.<span class="pl-c1">push</span>(<span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2Island</span>.<span class="pl-smi">s_impulse</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">D</span>});<span class="pl-smi">d</span>.<span class="pl-en">b2TimeStep</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-smi">d</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Set</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">dt</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">dt</span>;<span class="pl-c1">this</span>.<span class="pl-smi">inv_dt</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">inv_dt</span>;<span class="pl-c1">this</span>.<span class="pl-smi">positionIterations</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">positionIterations</span>;<span class="pl-c1">this</span>.<span class="pl-smi">velocityIterations</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">velocityIterations</span>;<span class="pl-c1">this</span>.<span class="pl-smi">warmStarting</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">warmStarting</span>};<span class="pl-smi">h</span>.<span class="pl-en">b2World</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">s_stack</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L217" class="blob-num js-line-number" data-line-number="217"></td>
        <td id="LC217" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">Vector</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_contactManager</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">O</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_contactSolver</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">o</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_island</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Z</span>};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2World</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_controllerList</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_jointList</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_contactList</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyList</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_debugDraw</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_destructionListener</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_controllerCount</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_jointCount</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_contactCount</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyCount</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-smi">h</span>.<span class="pl-smi">m_warmStarting</span><span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-smi">h</span>.<span class="pl-smi">m_continuousPhysics</span><span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_allowSleep</span><span class="pl-k">=</span>c;<span class="pl-c1">this</span>.<span class="pl-smi">m_gravity</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">m_inv_dt0</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_contactManager</span>.<span class="pl-smi">m_world</span><span class="pl-k">=</span><span class="pl-c1">this</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_groundBody</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">CreateBody</span>(<span class="pl-k">new</span> <span class="pl-en">z</span>)};</td>
      </tr>
      <tr>
        <td id="L218" class="blob-num js-line-number" data-line-number="218"></td>
        <td id="LC218" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetDestructionListener</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_destructionListener</span><span class="pl-k">=</span>a};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetContactFilter</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_contactManager</span>.<span class="pl-smi">m_contactFilter</span><span class="pl-k">=</span>a};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetContactListener</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_contactManager</span>.<span class="pl-smi">m_contactListener</span><span class="pl-k">=</span>a};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetDebugDraw</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_debugDraw</span><span class="pl-k">=</span>a};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetBroadPhase</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_contactManager</span>.<span class="pl-smi">m_broadPhase</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_contactManager</span>.<span class="pl-smi">m_broadPhase</span><span class="pl-k">=</span>a;<span class="pl-k">for</span>(<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyList</span>;g;g<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">m_next</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">m_fixtureList</span>;b;b<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">m_next</span>)<span class="pl-smi">b</span>.<span class="pl-smi">m_proxy</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L219" class="blob-num js-line-number" data-line-number="219"></td>
        <td id="LC219" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-en">CreateProxy</span>(<span class="pl-smi">c</span>.<span class="pl-en">GetFatAABB</span>(<span class="pl-smi">b</span>.<span class="pl-smi">m_proxy</span>),b)};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Validate</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">m_contactManager</span>.<span class="pl-smi">m_broadPhase</span>.<span class="pl-en">Validate</span>()};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetProxyCount</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_contactManager</span>.<span class="pl-smi">m_broadPhase</span>.<span class="pl-en">GetProxyCount</span>()};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">CreateBody</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-en">IsLocked</span>()<span class="pl-k">==</span><span class="pl-c1">true</span>)<span class="pl-k">return</span> <span class="pl-c1">null</span>;a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">k</span>(a,<span class="pl-c1">this</span>);<span class="pl-smi">a</span>.<span class="pl-smi">m_prev</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">m_next</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyList</span>)<span class="pl-c1">this</span>.<span class="pl-smi">m_bodyList</span>.<span class="pl-smi">m_prev</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">m_bodyList</span><span class="pl-k">=</span>a;<span class="pl-k">++</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyCount</span>;<span class="pl-k">return</span> a};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">DestroyBody</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-en">IsLocked</span>()<span class="pl-k">!=</span><span class="pl-c1">true</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">m_jointList</span>;c;){<span class="pl-k">var</span> g<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L220" class="blob-num js-line-number" data-line-number="220"></td>
        <td id="LC220" class="blob-code blob-code-inner js-file-line">c;c<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">next</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_destructionListener</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_destructionListener</span>.<span class="pl-en">SayGoodbyeJoint</span>(<span class="pl-smi">g</span>.<span class="pl-smi">joint</span>);<span class="pl-c1">this</span>.<span class="pl-en">DestroyJoint</span>(<span class="pl-smi">g</span>.<span class="pl-smi">joint</span>)}<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">m_controllerList</span>;c;){g<span class="pl-k">=</span>c;c<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">nextController</span>;<span class="pl-smi">g</span>.<span class="pl-smi">controller</span>.<span class="pl-en">RemoveBody</span>(a)}<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">m_contactList</span>;c;){g<span class="pl-k">=</span>c;c<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">next</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_contactManager</span>.<span class="pl-en">Destroy</span>(<span class="pl-smi">g</span>.<span class="pl-smi">contact</span>)}<span class="pl-smi">a</span>.<span class="pl-smi">m_contactList</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">m_fixtureList</span>;c;){g<span class="pl-k">=</span>c;c<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">m_next</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_destructionListener</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_destructionListener</span>.<span class="pl-en">SayGoodbyeFixture</span>(g);<span class="pl-smi">g</span>.<span class="pl-en">DestroyProxy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_contactManager</span>.<span class="pl-smi">m_broadPhase</span>);<span class="pl-smi">g</span>.<span class="pl-en">Destroy</span>()}<span class="pl-smi">a</span>.<span class="pl-smi">m_fixtureList</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-smi">a</span>.<span class="pl-smi">m_fixtureCount</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L221" class="blob-num js-line-number" data-line-number="221"></td>
        <td id="LC221" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">m_prev</span>)<span class="pl-smi">a</span>.<span class="pl-smi">m_prev</span>.<span class="pl-smi">m_next</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">m_next</span>;<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">m_next</span>)<span class="pl-smi">a</span>.<span class="pl-smi">m_next</span>.<span class="pl-smi">m_prev</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">m_prev</span>;<span class="pl-k">if</span>(a<span class="pl-k">==</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyList</span>)<span class="pl-c1">this</span>.<span class="pl-smi">m_bodyList</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">m_next</span>;<span class="pl-k">--</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyCount</span>}};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">CreateJoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-smi">q</span>.<span class="pl-en">Create</span>(a,<span class="pl-c1">null</span>);<span class="pl-smi">c</span>.<span class="pl-smi">m_prev</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(<span class="pl-smi">c</span>.<span class="pl-smi">m_next</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_jointList</span>)<span class="pl-c1">this</span>.<span class="pl-smi">m_jointList</span>.<span class="pl-smi">m_prev</span><span class="pl-k">=</span>c;<span class="pl-c1">this</span>.<span class="pl-smi">m_jointList</span><span class="pl-k">=</span>c;<span class="pl-k">++</span><span class="pl-c1">this</span>.<span class="pl-smi">m_jointCount</span>;<span class="pl-smi">c</span>.<span class="pl-smi">m_edgeA</span>.<span class="pl-smi">joint</span><span class="pl-k">=</span>c;<span class="pl-smi">c</span>.<span class="pl-smi">m_edgeA</span>.<span class="pl-smi">other</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">m_bodyB</span>;<span class="pl-smi">c</span>.<span class="pl-smi">m_edgeA</span>.<span class="pl-smi">prev</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(<span class="pl-smi">c</span>.<span class="pl-smi">m_edgeA</span>.<span class="pl-c1">next</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">m_bodyA</span>.<span class="pl-smi">m_jointList</span>)<span class="pl-smi">c</span>.<span class="pl-smi">m_bodyA</span>.<span class="pl-smi">m_jointList</span>.<span class="pl-smi">prev</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">m_edgeA</span>;<span class="pl-smi">c</span>.<span class="pl-smi">m_bodyA</span>.<span class="pl-smi">m_jointList</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">m_edgeA</span>;<span class="pl-smi">c</span>.<span class="pl-smi">m_edgeB</span>.<span class="pl-smi">joint</span><span class="pl-k">=</span>c;</td>
      </tr>
      <tr>
        <td id="L222" class="blob-num js-line-number" data-line-number="222"></td>
        <td id="LC222" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">c</span>.<span class="pl-smi">m_edgeB</span>.<span class="pl-smi">other</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">m_bodyA</span>;<span class="pl-smi">c</span>.<span class="pl-smi">m_edgeB</span>.<span class="pl-smi">prev</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(<span class="pl-smi">c</span>.<span class="pl-smi">m_edgeB</span>.<span class="pl-c1">next</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">m_bodyB</span>.<span class="pl-smi">m_jointList</span>)<span class="pl-smi">c</span>.<span class="pl-smi">m_bodyB</span>.<span class="pl-smi">m_jointList</span>.<span class="pl-smi">prev</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">m_edgeB</span>;<span class="pl-smi">c</span>.<span class="pl-smi">m_bodyB</span>.<span class="pl-smi">m_jointList</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">m_edgeB</span>;<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">bodyA</span>,b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">bodyB</span>;<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">collideConnected</span><span class="pl-k">==</span><span class="pl-c1">false</span>)<span class="pl-k">for</span>(a<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">GetContactList</span>();a;){<span class="pl-smi">a</span>.<span class="pl-smi">other</span><span class="pl-k">==</span>g<span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-smi">contact</span>.<span class="pl-en">FlagForFiltering</span>();a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">next</span>}<span class="pl-k">return</span> c};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">DestroyJoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">m_collideConnected</span>;<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">m_prev</span>)<span class="pl-smi">a</span>.<span class="pl-smi">m_prev</span>.<span class="pl-smi">m_next</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">m_next</span>;<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">m_next</span>)<span class="pl-smi">a</span>.<span class="pl-smi">m_next</span>.<span class="pl-smi">m_prev</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">m_prev</span>;<span class="pl-k">if</span>(a<span class="pl-k">==</span><span class="pl-c1">this</span>.<span class="pl-smi">m_jointList</span>)<span class="pl-c1">this</span>.<span class="pl-smi">m_jointList</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">m_next</span>;<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">m_bodyA</span>,b<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L223" class="blob-num js-line-number" data-line-number="223"></td>
        <td id="LC223" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-smi">m_bodyB</span>;<span class="pl-smi">g</span>.<span class="pl-en">SetAwake</span>(<span class="pl-c1">true</span>);<span class="pl-smi">b</span>.<span class="pl-en">SetAwake</span>(<span class="pl-c1">true</span>);<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">m_edgeA</span>.<span class="pl-smi">prev</span>)<span class="pl-smi">a</span>.<span class="pl-smi">m_edgeA</span>.<span class="pl-smi">prev</span>.<span class="pl-c1">next</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">m_edgeA</span>.<span class="pl-c1">next</span>;<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">m_edgeA</span>.<span class="pl-c1">next</span>)<span class="pl-smi">a</span>.<span class="pl-smi">m_edgeA</span>.<span class="pl-c1">next</span>.<span class="pl-smi">prev</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">m_edgeA</span>.<span class="pl-smi">prev</span>;<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">m_edgeA</span><span class="pl-k">==</span><span class="pl-smi">g</span>.<span class="pl-smi">m_jointList</span>)<span class="pl-smi">g</span>.<span class="pl-smi">m_jointList</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">m_edgeA</span>.<span class="pl-c1">next</span>;<span class="pl-smi">a</span>.<span class="pl-smi">m_edgeA</span>.<span class="pl-smi">prev</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-smi">a</span>.<span class="pl-smi">m_edgeA</span>.<span class="pl-c1">next</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">m_edgeB</span>.<span class="pl-smi">prev</span>)<span class="pl-smi">a</span>.<span class="pl-smi">m_edgeB</span>.<span class="pl-smi">prev</span>.<span class="pl-c1">next</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">m_edgeB</span>.<span class="pl-c1">next</span>;<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">m_edgeB</span>.<span class="pl-c1">next</span>)<span class="pl-smi">a</span>.<span class="pl-smi">m_edgeB</span>.<span class="pl-c1">next</span>.<span class="pl-smi">prev</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">m_edgeB</span>.<span class="pl-smi">prev</span>;<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">m_edgeB</span><span class="pl-k">==</span><span class="pl-smi">b</span>.<span class="pl-smi">m_jointList</span>)<span class="pl-smi">b</span>.<span class="pl-smi">m_jointList</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">m_edgeB</span>.<span class="pl-c1">next</span>;<span class="pl-smi">a</span>.<span class="pl-smi">m_edgeB</span>.<span class="pl-smi">prev</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-smi">a</span>.<span class="pl-smi">m_edgeB</span>.<span class="pl-c1">next</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-smi">q</span>.<span class="pl-en">Destroy</span>(a,<span class="pl-c1">null</span>);<span class="pl-k">--</span><span class="pl-c1">this</span>.<span class="pl-smi">m_jointCount</span>;<span class="pl-k">if</span>(c<span class="pl-k">==</span><span class="pl-c1">false</span>)<span class="pl-k">for</span>(a<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L224" class="blob-num js-line-number" data-line-number="224"></td>
        <td id="LC224" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>.<span class="pl-en">GetContactList</span>();a;){<span class="pl-smi">a</span>.<span class="pl-smi">other</span><span class="pl-k">==</span>g<span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-smi">contact</span>.<span class="pl-en">FlagForFiltering</span>();a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">next</span>}};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">AddController</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-smi">a</span>.<span class="pl-smi">m_next</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_controllerList</span>;<span class="pl-smi">a</span>.<span class="pl-smi">m_prev</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_controllerList</span><span class="pl-k">=</span>a;<span class="pl-smi">a</span>.<span class="pl-smi">m_world</span><span class="pl-k">=</span><span class="pl-c1">this</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_controllerCount</span><span class="pl-k">++</span>;<span class="pl-k">return</span> a};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">RemoveController</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">m_prev</span>)<span class="pl-smi">a</span>.<span class="pl-smi">m_prev</span>.<span class="pl-smi">m_next</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">m_next</span>;<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">m_next</span>)<span class="pl-smi">a</span>.<span class="pl-smi">m_next</span>.<span class="pl-smi">m_prev</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">m_prev</span>;<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_controllerList</span><span class="pl-k">==</span>a)<span class="pl-c1">this</span>.<span class="pl-smi">m_controllerList</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">m_next</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_controllerCount</span><span class="pl-k">--</span>};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">CreateController</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">m_world</span><span class="pl-k">!=</span><span class="pl-c1">this</span>)<span class="pl-k">throw</span> <span class="pl-c1">Error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>Controller can only be a member of one world<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L225" class="blob-num js-line-number" data-line-number="225"></td>
        <td id="LC225" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-smi">m_next</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_controllerList</span>;<span class="pl-smi">a</span>.<span class="pl-smi">m_prev</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_controllerList</span>)<span class="pl-c1">this</span>.<span class="pl-smi">m_controllerList</span>.<span class="pl-smi">m_prev</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">m_controllerList</span><span class="pl-k">=</span>a;<span class="pl-k">++</span><span class="pl-c1">this</span>.<span class="pl-smi">m_controllerCount</span>;<span class="pl-smi">a</span>.<span class="pl-smi">m_world</span><span class="pl-k">=</span><span class="pl-c1">this</span>;<span class="pl-k">return</span> a};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">DestroyController</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-smi">a</span>.<span class="pl-en">Clear</span>();<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">m_next</span>)<span class="pl-smi">a</span>.<span class="pl-smi">m_next</span>.<span class="pl-smi">m_prev</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">m_prev</span>;<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">m_prev</span>)<span class="pl-smi">a</span>.<span class="pl-smi">m_prev</span>.<span class="pl-smi">m_next</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">m_next</span>;<span class="pl-k">if</span>(a<span class="pl-k">==</span><span class="pl-c1">this</span>.<span class="pl-smi">m_controllerList</span>)<span class="pl-c1">this</span>.<span class="pl-smi">m_controllerList</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">m_next</span>;<span class="pl-k">--</span><span class="pl-c1">this</span>.<span class="pl-smi">m_controllerCount</span>};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetWarmStarting</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-smi">h</span>.<span class="pl-smi">m_warmStarting</span><span class="pl-k">=</span>a};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetContinuousPhysics</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-smi">h</span>.<span class="pl-smi">m_continuousPhysics</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L226" class="blob-num js-line-number" data-line-number="226"></td>
        <td id="LC226" class="blob-code blob-code-inner js-file-line">a};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetBodyCount</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_bodyCount</span>};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetJointCount</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_jointCount</span>};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetContactCount</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_contactCount</span>};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetGravity</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_gravity</span><span class="pl-k">=</span>a};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetGravity</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_gravity</span>};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetGroundBody</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_groundBody</span>};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Step</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>,<span class="pl-smi">g</span>){<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">undefined</span>)a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(c<span class="pl-k">===</span><span class="pl-c1">undefined</span>)c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(g<span class="pl-k">===</span><span class="pl-c1">undefined</span>)g<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;</span><span class="pl-smi">h</span>.<span class="pl-smi">e_newFixture</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_contactManager</span>.<span class="pl-en">FindNewContacts</span>();</td>
      </tr>
      <tr>
        <td id="L227" class="blob-num js-line-number" data-line-number="227"></td>
        <td id="LC227" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;=</span><span class="pl-k">~</span><span class="pl-smi">h</span>.<span class="pl-smi">e_newFixture</span>}<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">|=</span><span class="pl-smi">h</span>.<span class="pl-smi">e_locked</span>;<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">s_timestep2</span>;<span class="pl-smi">b</span>.<span class="pl-smi">dt</span><span class="pl-k">=</span>a;<span class="pl-smi">b</span>.<span class="pl-smi">velocityIterations</span><span class="pl-k">=</span>c;<span class="pl-smi">b</span>.<span class="pl-smi">positionIterations</span><span class="pl-k">=</span>g;<span class="pl-smi">b</span>.<span class="pl-smi">inv_dt</span><span class="pl-k">=</span>a<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">/</span>a<span class="pl-k">:</span><span class="pl-c1">0</span>;<span class="pl-smi">b</span>.<span class="pl-smi">dtRatio</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_inv_dt0</span><span class="pl-k">*</span>a;<span class="pl-smi">b</span>.<span class="pl-smi">warmStarting</span><span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_warmStarting</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_contactManager</span>.<span class="pl-en">Collide</span>();<span class="pl-smi">b</span>.<span class="pl-smi">dt</span><span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-en">Solve</span>(b);<span class="pl-smi">h</span>.<span class="pl-smi">m_continuousPhysics</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">b</span>.<span class="pl-smi">dt</span><span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-en">SolveTOI</span>(b);<span class="pl-k">if</span>(<span class="pl-smi">b</span>.<span class="pl-smi">dt</span><span class="pl-k">&gt;</span><span class="pl-c1">0</span>)<span class="pl-c1">this</span>.<span class="pl-smi">m_inv_dt0</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">inv_dt</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;=</span><span class="pl-k">~</span><span class="pl-smi">h</span>.<span class="pl-smi">e_locked</span>};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ClearForces</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyList</span>;a;a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">m_next</span>){<span class="pl-smi">a</span>.<span class="pl-smi">m_force</span>.<span class="pl-en">SetZero</span>();<span class="pl-smi">a</span>.<span class="pl-smi">m_torque</span><span class="pl-k">=</span><span class="pl-c1">0</span>}};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">DrawDebugData</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L228" class="blob-num js-line-number" data-line-number="228"></td>
        <td id="LC228" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(){<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_debugDraw</span><span class="pl-k">!=</span><span class="pl-c1">null</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_debugDraw</span>.<span class="pl-smi">m_sprite</span>.<span class="pl-smi">graphics</span>.<span class="pl-c1">clear</span>();<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_debugDraw</span>.<span class="pl-en">GetFlags</span>(),c,g,b;<span class="pl-k">new</span> <span class="pl-en">y</span>;<span class="pl-k">new</span> <span class="pl-en">y</span>;<span class="pl-k">new</span> <span class="pl-en">y</span>;<span class="pl-k">var</span> e;<span class="pl-k">new</span> <span class="pl-en">U</span>;<span class="pl-k">new</span> <span class="pl-en">U</span>;e<span class="pl-k">=</span>[<span class="pl-k">new</span> <span class="pl-en">y</span>,<span class="pl-k">new</span> <span class="pl-en">y</span>,<span class="pl-k">new</span> <span class="pl-en">y</span>,<span class="pl-k">new</span> <span class="pl-en">y</span>];<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-k">if</span>(a<span class="pl-k">&amp;</span><span class="pl-c1">E</span>.<span class="pl-smi">e_shapeBit</span>)<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyList</span>;c;c<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">m_next</span>){e<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">m_xf</span>;<span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-en">GetFixtureList</span>();g;g<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">m_next</span>){b<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-en">GetShape</span>();<span class="pl-k">if</span>(<span class="pl-smi">c</span>.<span class="pl-en">IsActive</span>()<span class="pl-k">==</span><span class="pl-c1">false</span>)<span class="pl-smi">f</span>.<span class="pl-en">Set</span>(<span class="pl-c1">0.5</span>,<span class="pl-c1">0.5</span>,<span class="pl-c1">0.3</span>);<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-smi">c</span>.<span class="pl-en">GetType</span>()<span class="pl-k">==</span><span class="pl-smi">k</span>.<span class="pl-smi">b2_staticBody</span>)<span class="pl-smi">f</span>.<span class="pl-en">Set</span>(<span class="pl-c1">0.5</span>,<span class="pl-c1">0.9</span>,<span class="pl-c1">0.5</span>);<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-smi">c</span>.<span class="pl-en">GetType</span>()<span class="pl-k">==</span><span class="pl-smi">k</span>.<span class="pl-smi">b2_kinematicBody</span>)<span class="pl-smi">f</span>.<span class="pl-en">Set</span>(<span class="pl-c1">0.5</span>,<span class="pl-c1">0.5</span>,<span class="pl-c1">0.9</span>);<span class="pl-k">else</span> <span class="pl-smi">c</span>.<span class="pl-en">IsAwake</span>()<span class="pl-k">==</span><span class="pl-c1">false</span><span class="pl-k">?</span></td>
      </tr>
      <tr>
        <td id="L229" class="blob-num js-line-number" data-line-number="229"></td>
        <td id="LC229" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">f</span>.<span class="pl-en">Set</span>(<span class="pl-c1">0.6</span>,<span class="pl-c1">0.6</span>,<span class="pl-c1">0.6</span>)<span class="pl-k">:</span><span class="pl-smi">f</span>.<span class="pl-en">Set</span>(<span class="pl-c1">0.9</span>,<span class="pl-c1">0.7</span>,<span class="pl-c1">0.7</span>);<span class="pl-c1">this</span>.<span class="pl-en">DrawShape</span>(b,e,f)}}<span class="pl-k">if</span>(a<span class="pl-k">&amp;</span><span class="pl-c1">E</span>.<span class="pl-smi">e_jointBit</span>)<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_jointList</span>;c;c<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">m_next</span>)<span class="pl-c1">this</span>.<span class="pl-en">DrawJoint</span>(c);<span class="pl-k">if</span>(a<span class="pl-k">&amp;</span><span class="pl-c1">E</span>.<span class="pl-smi">e_controllerBit</span>)<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_controllerList</span>;c;c<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">m_next</span>)<span class="pl-smi">c</span>.<span class="pl-en">Draw</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_debugDraw</span>);<span class="pl-k">if</span>(a<span class="pl-k">&amp;</span><span class="pl-c1">E</span>.<span class="pl-smi">e_pairBit</span>){<span class="pl-smi">f</span>.<span class="pl-en">Set</span>(<span class="pl-c1">0.3</span>,<span class="pl-c1">0.9</span>,<span class="pl-c1">0.9</span>);<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_contactManager</span>.<span class="pl-smi">m_contactList</span>;c;c<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-en">GetNext</span>()){b<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-en">GetFixtureA</span>();g<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-en">GetFixtureB</span>();b<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">GetAABB</span>().<span class="pl-en">GetCenter</span>();g<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-en">GetAABB</span>().<span class="pl-en">GetCenter</span>();<span class="pl-c1">this</span>.<span class="pl-smi">m_debugDraw</span>.<span class="pl-en">DrawSegment</span>(b,g,f)}}<span class="pl-k">if</span>(a<span class="pl-k">&amp;</span><span class="pl-c1">E</span>.<span class="pl-smi">e_aabbBit</span>){b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_contactManager</span>.<span class="pl-smi">m_broadPhase</span>;e<span class="pl-k">=</span>[<span class="pl-k">new</span> <span class="pl-en">y</span>,</td>
      </tr>
      <tr>
        <td id="L230" class="blob-num js-line-number" data-line-number="230"></td>
        <td id="LC230" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">y</span>,<span class="pl-k">new</span> <span class="pl-en">y</span>,<span class="pl-k">new</span> <span class="pl-en">y</span>];<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyList</span>;c;c<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-en">GetNext</span>())<span class="pl-k">if</span>(<span class="pl-smi">c</span>.<span class="pl-en">IsActive</span>()<span class="pl-k">!=</span><span class="pl-c1">false</span>)<span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-en">GetFixtureList</span>();g;g<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-en">GetNext</span>()){<span class="pl-k">var</span> m<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">GetFatAABB</span>(<span class="pl-smi">g</span>.<span class="pl-smi">m_proxy</span>);e[<span class="pl-c1">0</span>].<span class="pl-en">Set</span>(<span class="pl-smi">m</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">x</span>,<span class="pl-smi">m</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">y</span>);e[<span class="pl-c1">1</span>].<span class="pl-en">Set</span>(<span class="pl-smi">m</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">x</span>,<span class="pl-smi">m</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">y</span>);e[<span class="pl-c1">2</span>].<span class="pl-en">Set</span>(<span class="pl-smi">m</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">x</span>,<span class="pl-smi">m</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">y</span>);e[<span class="pl-c1">3</span>].<span class="pl-en">Set</span>(<span class="pl-smi">m</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-c1">x</span>,<span class="pl-smi">m</span>.<span class="pl-smi">upperBound</span>.<span class="pl-c1">y</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_debugDraw</span>.<span class="pl-en">DrawPolygon</span>(e,<span class="pl-c1">4</span>,f)}}<span class="pl-k">if</span>(a<span class="pl-k">&amp;</span><span class="pl-c1">E</span>.<span class="pl-smi">e_centerOfMassBit</span>)<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyList</span>;c;c<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">m_next</span>){e<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">s_xf</span>;<span class="pl-smi">e</span>.<span class="pl-c1">R</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;<span class="pl-smi">e</span>.<span class="pl-smi">position</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-en">GetWorldCenter</span>();<span class="pl-c1">this</span>.<span class="pl-smi">m_debugDraw</span>.<span class="pl-en">DrawTransform</span>(e)}}};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">QueryAABB</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L231" class="blob-num js-line-number" data-line-number="231"></td>
        <td id="LC231" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_contactManager</span>.<span class="pl-smi">m_broadPhase</span>;<span class="pl-smi">g</span>.<span class="pl-en">Query</span>(<span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-en">a</span>(<span class="pl-smi">g</span>.<span class="pl-en">GetUserData</span>(b))},c)};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">QueryShape</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>,<span class="pl-smi">g</span>){<span class="pl-k">if</span>(g<span class="pl-k">===</span><span class="pl-c1">undefined</span>)g<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(g<span class="pl-k">==</span><span class="pl-c1">null</span>){g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">K</span>;<span class="pl-smi">g</span>.<span class="pl-en">SetIdentity</span>()}<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_contactManager</span>.<span class="pl-smi">m_broadPhase</span>,e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">U</span>;<span class="pl-smi">c</span>.<span class="pl-en">ComputeAABB</span>(e,g);<span class="pl-smi">b</span>.<span class="pl-en">Query</span>(<span class="pl-k">function</span>(<span class="pl-smi">f</span>){f<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">GetUserData</span>(f)<span class="pl-k">instanceof</span> <span class="pl-c1">S</span><span class="pl-k">?</span><span class="pl-smi">b</span>.<span class="pl-en">GetUserData</span>(f)<span class="pl-k">:</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(<span class="pl-c1">Y</span>.<span class="pl-en">TestOverlap</span>(c,g,<span class="pl-smi">f</span>.<span class="pl-en">GetShape</span>(),<span class="pl-smi">f</span>.<span class="pl-en">GetBody</span>().<span class="pl-en">GetTransform</span>()))<span class="pl-k">return</span> <span class="pl-en">a</span>(f);<span class="pl-k">return</span> <span class="pl-c1">true</span>},e)};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">QueryPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_contactManager</span>.<span class="pl-smi">m_broadPhase</span>,</td>
      </tr>
      <tr>
        <td id="L232" class="blob-num js-line-number" data-line-number="232"></td>
        <td id="LC232" class="blob-code blob-code-inner js-file-line">b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">U</span>;<span class="pl-smi">b</span>.<span class="pl-smi">lowerBound</span>.<span class="pl-en">Set</span>(<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">A</span>.<span class="pl-smi">b2_linearSlop</span>,<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">A</span>.<span class="pl-smi">b2_linearSlop</span>);<span class="pl-smi">b</span>.<span class="pl-smi">upperBound</span>.<span class="pl-en">Set</span>(<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">A</span>.<span class="pl-smi">b2_linearSlop</span>,<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">A</span>.<span class="pl-smi">b2_linearSlop</span>);<span class="pl-smi">g</span>.<span class="pl-en">Query</span>(<span class="pl-k">function</span>(<span class="pl-smi">e</span>){e<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-en">GetUserData</span>(e)<span class="pl-k">instanceof</span> <span class="pl-c1">S</span><span class="pl-k">?</span><span class="pl-smi">g</span>.<span class="pl-en">GetUserData</span>(e)<span class="pl-k">:</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(<span class="pl-smi">e</span>.<span class="pl-en">TestPoint</span>(c))<span class="pl-k">return</span> <span class="pl-en">a</span>(e);<span class="pl-k">return</span> <span class="pl-c1">true</span>},b)};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">RayCast</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>,<span class="pl-smi">g</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_contactManager</span>.<span class="pl-smi">m_broadPhase</span>,e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">V</span>,f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Q</span>(c,g);<span class="pl-smi">b</span>.<span class="pl-en">RayCast</span>(<span class="pl-k">function</span>(<span class="pl-smi">m</span>,<span class="pl-smi">r</span>){<span class="pl-k">var</span> s<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">GetUserData</span>(r);s<span class="pl-k">=</span>s <span class="pl-k">instanceof</span> <span class="pl-c1">S</span><span class="pl-k">?</span>s<span class="pl-k">:</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(<span class="pl-smi">s</span>.<span class="pl-en">RayCast</span>(e,m)){<span class="pl-k">var</span> v<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">fraction</span>,t<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">y</span>((<span class="pl-c1">1</span><span class="pl-k">-</span>v)<span class="pl-k">*</span><span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>v<span class="pl-k">*</span><span class="pl-smi">g</span>.<span class="pl-c1">x</span>,(<span class="pl-c1">1</span><span class="pl-k">-</span>v)<span class="pl-k">*</span><span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>v<span class="pl-k">*</span><span class="pl-smi">g</span>.<span class="pl-c1">y</span>);<span class="pl-k">return</span> <span class="pl-en">a</span>(s,</td>
      </tr>
      <tr>
        <td id="L233" class="blob-num js-line-number" data-line-number="233"></td>
        <td id="LC233" class="blob-code blob-code-inner js-file-line">t,<span class="pl-smi">e</span>.<span class="pl-smi">normal</span>,v)}<span class="pl-k">return</span> <span class="pl-smi">m</span>.<span class="pl-smi">maxFraction</span>},f)};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">RayCastOne</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> g;<span class="pl-c1">this</span>.<span class="pl-en">RayCast</span>(<span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">m</span>){<span class="pl-k">if</span>(m<span class="pl-k">===</span><span class="pl-c1">undefined</span>)m<span class="pl-k">=</span><span class="pl-c1">0</span>;g<span class="pl-k">=</span>b;<span class="pl-k">return</span> m},a,c);<span class="pl-k">return</span> g};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">RayCastAll</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>;<span class="pl-c1">this</span>.<span class="pl-en">RayCast</span>(<span class="pl-k">function</span>(<span class="pl-smi">b</span>){g[<span class="pl-smi">g</span>.<span class="pl-c1">length</span>]<span class="pl-k">=</span>b;<span class="pl-k">return</span> <span class="pl-c1">1</span>},a,c);<span class="pl-k">return</span> g};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetBodyList</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_bodyList</span>};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetJointList</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_jointList</span>};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetContactList</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_contactList</span>};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">IsLocked</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;</span></td>
      </tr>
      <tr>
        <td id="L234" class="blob-num js-line-number" data-line-number="234"></td>
        <td id="LC234" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">h</span>.<span class="pl-smi">e_locked</span>)<span class="pl-k">&gt;</span><span class="pl-c1">0</span>};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Solve</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> c,g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_controllerList</span>;g;g<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">m_next</span>)<span class="pl-smi">g</span>.<span class="pl-en">Step</span>(a);g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_island</span>;<span class="pl-smi">g</span>.<span class="pl-en">Initialize</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_bodyCount</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_contactCount</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_jointCount</span>,<span class="pl-c1">null</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_contactManager</span>.<span class="pl-smi">m_contactListener</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_contactSolver</span>);<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyList</span>;c;c<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">m_next</span>)<span class="pl-smi">c</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;=</span><span class="pl-k">~</span><span class="pl-smi">k</span>.<span class="pl-smi">e_islandFlag</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_contactList</span>;b;b<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">m_next</span>)<span class="pl-smi">b</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;=</span><span class="pl-k">~</span><span class="pl-smi">l</span>.<span class="pl-smi">e_islandFlag</span>;<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_jointList</span>;b;b<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">m_next</span>)<span class="pl-smi">b</span>.<span class="pl-smi">m_islandFlag</span><span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-c1">parseInt</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_bodyCount</span>);b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">s_stack</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyList</span>;e;e<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L235" class="blob-num js-line-number" data-line-number="235"></td>
        <td id="LC235" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">e</span>.<span class="pl-smi">m_next</span>)<span class="pl-k">if</span>(<span class="pl-k">!</span>(<span class="pl-smi">e</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;</span><span class="pl-smi">k</span>.<span class="pl-smi">e_islandFlag</span>))<span class="pl-k">if</span>(<span class="pl-k">!</span>(<span class="pl-smi">e</span>.<span class="pl-en">IsAwake</span>()<span class="pl-k">==</span><span class="pl-c1">false</span><span class="pl-k">||</span><span class="pl-smi">e</span>.<span class="pl-en">IsActive</span>()<span class="pl-k">==</span><span class="pl-c1">false</span>))<span class="pl-k">if</span>(<span class="pl-smi">e</span>.<span class="pl-en">GetType</span>()<span class="pl-k">!=</span><span class="pl-smi">k</span>.<span class="pl-smi">b2_staticBody</span>){<span class="pl-smi">g</span>.<span class="pl-en">Clear</span>();<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-c1">0</span>;b[f<span class="pl-k">++</span>]<span class="pl-k">=</span>e;<span class="pl-k">for</span>(<span class="pl-smi">e</span>.<span class="pl-smi">m_flags</span><span class="pl-k">|=</span><span class="pl-smi">k</span>.<span class="pl-smi">e_islandFlag</span>;f<span class="pl-k">&gt;</span><span class="pl-c1">0</span>;){c<span class="pl-k">=</span>b[<span class="pl-k">--</span>f];<span class="pl-smi">g</span>.<span class="pl-en">AddBody</span>(c);<span class="pl-smi">c</span>.<span class="pl-en">IsAwake</span>()<span class="pl-k">==</span><span class="pl-c1">false</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">c</span>.<span class="pl-en">SetAwake</span>(<span class="pl-c1">true</span>);<span class="pl-k">if</span>(<span class="pl-smi">c</span>.<span class="pl-en">GetType</span>()<span class="pl-k">!=</span><span class="pl-smi">k</span>.<span class="pl-smi">b2_staticBody</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> m,r<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">m_contactList</span>;r;r<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-c1">next</span>)<span class="pl-k">if</span>(<span class="pl-k">!</span>(<span class="pl-smi">r</span>.<span class="pl-smi">contact</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;</span><span class="pl-smi">l</span>.<span class="pl-smi">e_islandFlag</span>))<span class="pl-k">if</span>(<span class="pl-k">!</span>(<span class="pl-smi">r</span>.<span class="pl-smi">contact</span>.<span class="pl-en">IsSensor</span>()<span class="pl-k">==</span><span class="pl-c1">true</span><span class="pl-k">||</span><span class="pl-smi">r</span>.<span class="pl-smi">contact</span>.<span class="pl-en">IsEnabled</span>()<span class="pl-k">==</span><span class="pl-c1">false</span><span class="pl-k">||</span><span class="pl-smi">r</span>.<span class="pl-smi">contact</span>.<span class="pl-en">IsTouching</span>()<span class="pl-k">==</span><span class="pl-c1">false</span>)){<span class="pl-smi">g</span>.<span class="pl-en">AddContact</span>(<span class="pl-smi">r</span>.<span class="pl-smi">contact</span>);<span class="pl-smi">r</span>.<span class="pl-smi">contact</span>.<span class="pl-smi">m_flags</span><span class="pl-k">|=</span><span class="pl-smi">l</span>.<span class="pl-smi">e_islandFlag</span>;</td>
      </tr>
      <tr>
        <td id="L236" class="blob-num js-line-number" data-line-number="236"></td>
        <td id="LC236" class="blob-code blob-code-inner js-file-line">m<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-smi">other</span>;<span class="pl-k">if</span>(<span class="pl-k">!</span>(<span class="pl-smi">m</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;</span><span class="pl-smi">k</span>.<span class="pl-smi">e_islandFlag</span>)){b[f<span class="pl-k">++</span>]<span class="pl-k">=</span>m;<span class="pl-smi">m</span>.<span class="pl-smi">m_flags</span><span class="pl-k">|=</span><span class="pl-smi">k</span>.<span class="pl-smi">e_islandFlag</span>}}<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">m_jointList</span>;c;c<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">next</span>)<span class="pl-k">if</span>(<span class="pl-smi">c</span>.<span class="pl-smi">joint</span>.<span class="pl-smi">m_islandFlag</span><span class="pl-k">!=</span><span class="pl-c1">true</span>){m<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">other</span>;<span class="pl-k">if</span>(<span class="pl-smi">m</span>.<span class="pl-en">IsActive</span>()<span class="pl-k">!=</span><span class="pl-c1">false</span>){<span class="pl-smi">g</span>.<span class="pl-en">AddJoint</span>(<span class="pl-smi">c</span>.<span class="pl-smi">joint</span>);<span class="pl-smi">c</span>.<span class="pl-smi">joint</span>.<span class="pl-smi">m_islandFlag</span><span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-k">if</span>(<span class="pl-k">!</span>(<span class="pl-smi">m</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;</span><span class="pl-smi">k</span>.<span class="pl-smi">e_islandFlag</span>)){b[f<span class="pl-k">++</span>]<span class="pl-k">=</span>m;<span class="pl-smi">m</span>.<span class="pl-smi">m_flags</span><span class="pl-k">|=</span><span class="pl-smi">k</span>.<span class="pl-smi">e_islandFlag</span>}}}}}<span class="pl-smi">g</span>.<span class="pl-en">Solve</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">m_gravity</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_allowSleep</span>);<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span><span class="pl-smi">g</span>.<span class="pl-smi">m_bodyCount</span>;<span class="pl-k">++</span>f){c<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">m_bodies</span>[f];<span class="pl-k">if</span>(<span class="pl-smi">c</span>.<span class="pl-en">GetType</span>()<span class="pl-k">==</span><span class="pl-smi">k</span>.<span class="pl-smi">b2_staticBody</span>)<span class="pl-smi">c</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;=</span><span class="pl-k">~</span><span class="pl-smi">k</span>.<span class="pl-smi">e_islandFlag</span>}}<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>;<span class="pl-k">++</span>f){<span class="pl-k">if</span>(<span class="pl-k">!</span>b[f])<span class="pl-k">break</span>;b[f]<span class="pl-k">=</span><span class="pl-c1">null</span>}<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyList</span>;c;c<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L237" class="blob-num js-line-number" data-line-number="237"></td>
        <td id="LC237" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">c</span>.<span class="pl-smi">m_next</span>)<span class="pl-smi">c</span>.<span class="pl-en">IsAwake</span>()<span class="pl-k">==</span><span class="pl-c1">false</span><span class="pl-k">||</span><span class="pl-smi">c</span>.<span class="pl-en">IsActive</span>()<span class="pl-k">==</span><span class="pl-c1">false</span><span class="pl-k">||</span><span class="pl-smi">c</span>.<span class="pl-en">GetType</span>()<span class="pl-k">!=</span><span class="pl-smi">k</span>.<span class="pl-smi">b2_staticBody</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">c</span>.<span class="pl-en">SynchronizeFixtures</span>();<span class="pl-c1">this</span>.<span class="pl-smi">m_contactManager</span>.<span class="pl-en">FindNewContacts</span>()};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolveTOI</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> c,g,b,e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_island</span>;<span class="pl-smi">e</span>.<span class="pl-en">Initialize</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_bodyCount</span>,<span class="pl-c1">A</span>.<span class="pl-smi">b2_maxTOIContactsPerIsland</span>,<span class="pl-c1">A</span>.<span class="pl-smi">b2_maxTOIJointsPerIsland</span>,<span class="pl-c1">null</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_contactManager</span>.<span class="pl-smi">m_contactListener</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_contactSolver</span>);<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">s_queue</span>;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyList</span>;c;c<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">m_next</span>){<span class="pl-smi">c</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;=</span><span class="pl-k">~</span><span class="pl-smi">k</span>.<span class="pl-smi">e_islandFlag</span>;<span class="pl-smi">c</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">t0</span><span class="pl-k">=</span><span class="pl-c1">0</span>}<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_contactList</span>;b;b<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">m_next</span>)<span class="pl-smi">b</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;=</span><span class="pl-k">~</span>(<span class="pl-smi">l</span>.<span class="pl-smi">e_toiFlag</span><span class="pl-k">|</span></td>
      </tr>
      <tr>
        <td id="L238" class="blob-num js-line-number" data-line-number="238"></td>
        <td id="LC238" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">l</span>.<span class="pl-smi">e_islandFlag</span>);<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_jointList</span>;b;b<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">m_next</span>)<span class="pl-smi">b</span>.<span class="pl-smi">m_islandFlag</span><span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-k">for</span>(;;){<span class="pl-k">var</span> m<span class="pl-k">=</span><span class="pl-c1">null</span>,r<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_contactList</span>;b;b<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">m_next</span>)<span class="pl-k">if</span>(<span class="pl-k">!</span>(<span class="pl-smi">b</span>.<span class="pl-en">IsSensor</span>()<span class="pl-k">==</span><span class="pl-c1">true</span><span class="pl-k">||</span><span class="pl-smi">b</span>.<span class="pl-en">IsEnabled</span>()<span class="pl-k">==</span><span class="pl-c1">false</span><span class="pl-k">||</span><span class="pl-smi">b</span>.<span class="pl-en">IsContinuous</span>()<span class="pl-k">==</span><span class="pl-c1">false</span>)){c<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-k">if</span>(<span class="pl-smi">b</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;</span><span class="pl-smi">l</span>.<span class="pl-smi">e_toiFlag</span>)c<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">m_toi</span>;<span class="pl-k">else</span>{c<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">m_fixtureA</span>;g<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">m_fixtureB</span>;c<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">m_body</span>;g<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">m_body</span>;<span class="pl-k">if</span>((<span class="pl-smi">c</span>.<span class="pl-en">GetType</span>()<span class="pl-k">!=</span><span class="pl-smi">k</span>.<span class="pl-smi">b2_dynamicBody</span><span class="pl-k">||</span><span class="pl-smi">c</span>.<span class="pl-en">IsAwake</span>()<span class="pl-k">==</span><span class="pl-c1">false</span>)<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">g</span>.<span class="pl-en">GetType</span>()<span class="pl-k">!=</span><span class="pl-smi">k</span>.<span class="pl-smi">b2_dynamicBody</span><span class="pl-k">||</span><span class="pl-smi">g</span>.<span class="pl-en">IsAwake</span>()<span class="pl-k">==</span><span class="pl-c1">false</span>))<span class="pl-k">continue</span>;<span class="pl-k">var</span> s<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">t0</span>;<span class="pl-k">if</span>(<span class="pl-smi">c</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">t0</span><span class="pl-k">&lt;</span><span class="pl-smi">g</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">t0</span>){s<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">t0</span>;<span class="pl-smi">c</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-en">Advance</span>(s)}<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-smi">g</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">t0</span><span class="pl-k">&lt;</span></td>
      </tr>
      <tr>
        <td id="L239" class="blob-num js-line-number" data-line-number="239"></td>
        <td id="LC239" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">c</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">t0</span>){s<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">t0</span>;<span class="pl-smi">g</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-en">Advance</span>(s)}c<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">ComputeTOI</span>(<span class="pl-smi">c</span>.<span class="pl-smi">m_sweep</span>,<span class="pl-smi">g</span>.<span class="pl-smi">m_sweep</span>);<span class="pl-c1">A</span>.<span class="pl-en">b2Assert</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;=</span>c<span class="pl-k">&amp;&amp;</span>c<span class="pl-k">&lt;=</span><span class="pl-c1">1</span>);<span class="pl-k">if</span>(c<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>c<span class="pl-k">&lt;</span><span class="pl-c1">1</span>){c<span class="pl-k">=</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>c)<span class="pl-k">*</span>s<span class="pl-k">+</span>c;<span class="pl-k">if</span>(c<span class="pl-k">&gt;</span><span class="pl-c1">1</span>)c<span class="pl-k">=</span><span class="pl-c1">1</span>}<span class="pl-smi">b</span>.<span class="pl-smi">m_toi</span><span class="pl-k">=</span>c;<span class="pl-smi">b</span>.<span class="pl-smi">m_flags</span><span class="pl-k">|=</span><span class="pl-smi">l</span>.<span class="pl-smi">e_toiFlag</span>}<span class="pl-k">if</span>(<span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span><span class="pl-k">&lt;</span>c<span class="pl-k">&amp;&amp;</span>c<span class="pl-k">&lt;</span>r){m<span class="pl-k">=</span>b;r<span class="pl-k">=</span>c}}<span class="pl-k">if</span>(m<span class="pl-k">==</span><span class="pl-c1">null</span><span class="pl-k">||</span><span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-c1">100</span><span class="pl-k">*</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span><span class="pl-k">&lt;</span>r)<span class="pl-k">break</span>;c<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-smi">m_fixtureA</span>;g<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-smi">m_fixtureB</span>;c<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">m_body</span>;g<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">m_body</span>;<span class="pl-smi">h</span>.<span class="pl-smi">s_backupA</span>.<span class="pl-en">Set</span>(<span class="pl-smi">c</span>.<span class="pl-smi">m_sweep</span>);<span class="pl-smi">h</span>.<span class="pl-smi">s_backupB</span>.<span class="pl-en">Set</span>(<span class="pl-smi">g</span>.<span class="pl-smi">m_sweep</span>);<span class="pl-smi">c</span>.<span class="pl-en">Advance</span>(r);<span class="pl-smi">g</span>.<span class="pl-en">Advance</span>(r);<span class="pl-smi">m</span>.<span class="pl-en">Update</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_contactManager</span>.<span class="pl-smi">m_contactListener</span>);<span class="pl-smi">m</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;=</span><span class="pl-k">~</span><span class="pl-smi">l</span>.<span class="pl-smi">e_toiFlag</span>;<span class="pl-k">if</span>(<span class="pl-smi">m</span>.<span class="pl-en">IsSensor</span>()<span class="pl-k">==</span><span class="pl-c1">true</span><span class="pl-k">||</span><span class="pl-smi">m</span>.<span class="pl-en">IsEnabled</span>()<span class="pl-k">==</span></td>
      </tr>
      <tr>
        <td id="L240" class="blob-num js-line-number" data-line-number="240"></td>
        <td id="LC240" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">false</span>){<span class="pl-smi">c</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-en">Set</span>(<span class="pl-smi">h</span>.<span class="pl-smi">s_backupA</span>);<span class="pl-smi">g</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-en">Set</span>(<span class="pl-smi">h</span>.<span class="pl-smi">s_backupB</span>);<span class="pl-smi">c</span>.<span class="pl-en">SynchronizeTransform</span>();<span class="pl-smi">g</span>.<span class="pl-en">SynchronizeTransform</span>()}<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-smi">m</span>.<span class="pl-en">IsTouching</span>()<span class="pl-k">!=</span><span class="pl-c1">false</span>){c<span class="pl-k">=</span>c;<span class="pl-k">if</span>(<span class="pl-smi">c</span>.<span class="pl-en">GetType</span>()<span class="pl-k">!=</span><span class="pl-smi">k</span>.<span class="pl-smi">b2_dynamicBody</span>)c<span class="pl-k">=</span>g;<span class="pl-smi">e</span>.<span class="pl-en">Clear</span>();m<span class="pl-k">=</span>b<span class="pl-k">=</span><span class="pl-c1">0</span>;f[b<span class="pl-k">+</span>m<span class="pl-k">++</span>]<span class="pl-k">=</span>c;<span class="pl-k">for</span>(<span class="pl-smi">c</span>.<span class="pl-smi">m_flags</span><span class="pl-k">|=</span><span class="pl-smi">k</span>.<span class="pl-smi">e_islandFlag</span>;m<span class="pl-k">&gt;</span><span class="pl-c1">0</span>;){c<span class="pl-k">=</span>f[b<span class="pl-k">++</span>];<span class="pl-k">--</span>m;<span class="pl-smi">e</span>.<span class="pl-en">AddBody</span>(c);<span class="pl-smi">c</span>.<span class="pl-en">IsAwake</span>()<span class="pl-k">==</span><span class="pl-c1">false</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">c</span>.<span class="pl-en">SetAwake</span>(<span class="pl-c1">true</span>);<span class="pl-k">if</span>(<span class="pl-smi">c</span>.<span class="pl-en">GetType</span>()<span class="pl-k">==</span><span class="pl-smi">k</span>.<span class="pl-smi">b2_dynamicBody</span>){<span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">m_contactList</span>;g;g<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">next</span>){<span class="pl-k">if</span>(<span class="pl-smi">e</span>.<span class="pl-smi">m_contactCount</span><span class="pl-k">==</span><span class="pl-smi">e</span>.<span class="pl-smi">m_contactCapacity</span>)<span class="pl-k">break</span>;<span class="pl-k">if</span>(<span class="pl-k">!</span>(<span class="pl-smi">g</span>.<span class="pl-smi">contact</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;</span><span class="pl-smi">l</span>.<span class="pl-smi">e_islandFlag</span>))<span class="pl-k">if</span>(<span class="pl-k">!</span>(<span class="pl-smi">g</span>.<span class="pl-smi">contact</span>.<span class="pl-en">IsSensor</span>()<span class="pl-k">==</span><span class="pl-c1">true</span><span class="pl-k">||</span><span class="pl-smi">g</span>.<span class="pl-smi">contact</span>.<span class="pl-en">IsEnabled</span>()<span class="pl-k">==</span></td>
      </tr>
      <tr>
        <td id="L241" class="blob-num js-line-number" data-line-number="241"></td>
        <td id="LC241" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">false</span><span class="pl-k">||</span><span class="pl-smi">g</span>.<span class="pl-smi">contact</span>.<span class="pl-en">IsTouching</span>()<span class="pl-k">==</span><span class="pl-c1">false</span>)){<span class="pl-smi">e</span>.<span class="pl-en">AddContact</span>(<span class="pl-smi">g</span>.<span class="pl-smi">contact</span>);<span class="pl-smi">g</span>.<span class="pl-smi">contact</span>.<span class="pl-smi">m_flags</span><span class="pl-k">|=</span><span class="pl-smi">l</span>.<span class="pl-smi">e_islandFlag</span>;s<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">other</span>;<span class="pl-k">if</span>(<span class="pl-k">!</span>(<span class="pl-smi">s</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;</span><span class="pl-smi">k</span>.<span class="pl-smi">e_islandFlag</span>)){<span class="pl-k">if</span>(<span class="pl-smi">s</span>.<span class="pl-en">GetType</span>()<span class="pl-k">!=</span><span class="pl-smi">k</span>.<span class="pl-smi">b2_staticBody</span>){<span class="pl-smi">s</span>.<span class="pl-en">Advance</span>(r);<span class="pl-smi">s</span>.<span class="pl-en">SetAwake</span>(<span class="pl-c1">true</span>)}f[b<span class="pl-k">+</span>m]<span class="pl-k">=</span>s;<span class="pl-k">++</span>m;<span class="pl-smi">s</span>.<span class="pl-smi">m_flags</span><span class="pl-k">|=</span><span class="pl-smi">k</span>.<span class="pl-smi">e_islandFlag</span>}}}<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">m_jointList</span>;c;c<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">next</span>)<span class="pl-k">if</span>(<span class="pl-smi">e</span>.<span class="pl-smi">m_jointCount</span><span class="pl-k">!=</span><span class="pl-smi">e</span>.<span class="pl-smi">m_jointCapacity</span>)<span class="pl-k">if</span>(<span class="pl-smi">c</span>.<span class="pl-smi">joint</span>.<span class="pl-smi">m_islandFlag</span><span class="pl-k">!=</span><span class="pl-c1">true</span>){s<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">other</span>;<span class="pl-k">if</span>(<span class="pl-smi">s</span>.<span class="pl-en">IsActive</span>()<span class="pl-k">!=</span><span class="pl-c1">false</span>){<span class="pl-smi">e</span>.<span class="pl-en">AddJoint</span>(<span class="pl-smi">c</span>.<span class="pl-smi">joint</span>);<span class="pl-smi">c</span>.<span class="pl-smi">joint</span>.<span class="pl-smi">m_islandFlag</span><span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-k">if</span>(<span class="pl-k">!</span>(<span class="pl-smi">s</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;</span><span class="pl-smi">k</span>.<span class="pl-smi">e_islandFlag</span>)){<span class="pl-k">if</span>(<span class="pl-smi">s</span>.<span class="pl-en">GetType</span>()<span class="pl-k">!=</span><span class="pl-smi">k</span>.<span class="pl-smi">b2_staticBody</span>){<span class="pl-smi">s</span>.<span class="pl-en">Advance</span>(r);<span class="pl-smi">s</span>.<span class="pl-en">SetAwake</span>(<span class="pl-c1">true</span>)}f[b<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L242" class="blob-num js-line-number" data-line-number="242"></td>
        <td id="LC242" class="blob-code blob-code-inner js-file-line">m]<span class="pl-k">=</span>s;<span class="pl-k">++</span>m;<span class="pl-smi">s</span>.<span class="pl-smi">m_flags</span><span class="pl-k">|=</span><span class="pl-smi">k</span>.<span class="pl-smi">e_islandFlag</span>}}}}}b<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">s_timestep</span>;<span class="pl-smi">b</span>.<span class="pl-smi">warmStarting</span><span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-smi">b</span>.<span class="pl-smi">dt</span><span class="pl-k">=</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>r)<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">dt</span>;<span class="pl-smi">b</span>.<span class="pl-smi">inv_dt</span><span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-smi">b</span>.<span class="pl-smi">dt</span>;<span class="pl-smi">b</span>.<span class="pl-smi">dtRatio</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-smi">b</span>.<span class="pl-smi">velocityIterations</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">velocityIterations</span>;<span class="pl-smi">b</span>.<span class="pl-smi">positionIterations</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">positionIterations</span>;<span class="pl-smi">e</span>.<span class="pl-en">SolveTOI</span>(b);<span class="pl-k">for</span>(r<span class="pl-k">=</span>r<span class="pl-k">=</span><span class="pl-c1">0</span>;r<span class="pl-k">&lt;</span><span class="pl-smi">e</span>.<span class="pl-smi">m_bodyCount</span>;<span class="pl-k">++</span>r){c<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">m_bodies</span>[r];<span class="pl-smi">c</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;=</span><span class="pl-k">~</span><span class="pl-smi">k</span>.<span class="pl-smi">e_islandFlag</span>;<span class="pl-k">if</span>(<span class="pl-smi">c</span>.<span class="pl-en">IsAwake</span>()<span class="pl-k">!=</span><span class="pl-c1">false</span>)<span class="pl-k">if</span>(<span class="pl-smi">c</span>.<span class="pl-en">GetType</span>()<span class="pl-k">==</span><span class="pl-smi">k</span>.<span class="pl-smi">b2_dynamicBody</span>){<span class="pl-smi">c</span>.<span class="pl-en">SynchronizeFixtures</span>();<span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">m_contactList</span>;g;g<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">next</span>)<span class="pl-smi">g</span>.<span class="pl-smi">contact</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;=</span><span class="pl-k">~</span><span class="pl-smi">l</span>.<span class="pl-smi">e_toiFlag</span>}}<span class="pl-k">for</span>(r<span class="pl-k">=</span><span class="pl-c1">0</span>;r<span class="pl-k">&lt;</span><span class="pl-smi">e</span>.<span class="pl-smi">m_contactCount</span>;<span class="pl-k">++</span>r){b<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">m_contacts</span>[r];<span class="pl-smi">b</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;=</span><span class="pl-k">~</span>(<span class="pl-smi">l</span>.<span class="pl-smi">e_toiFlag</span><span class="pl-k">|</span></td>
      </tr>
      <tr>
        <td id="L243" class="blob-num js-line-number" data-line-number="243"></td>
        <td id="LC243" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">l</span>.<span class="pl-smi">e_islandFlag</span>)}<span class="pl-k">for</span>(r<span class="pl-k">=</span><span class="pl-c1">0</span>;r<span class="pl-k">&lt;</span><span class="pl-smi">e</span>.<span class="pl-smi">m_jointCount</span>;<span class="pl-k">++</span>r){b<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">m_joints</span>[r];<span class="pl-smi">b</span>.<span class="pl-smi">m_islandFlag</span><span class="pl-k">=</span><span class="pl-c1">false</span>}<span class="pl-c1">this</span>.<span class="pl-smi">m_contactManager</span>.<span class="pl-en">FindNewContacts</span>()}}};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">DrawJoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">GetBodyA</span>(),g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">GetBodyB</span>(),b<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>,e<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>,f<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">GetAnchorA</span>(),m<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">GetAnchorB</span>(),r<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">s_jointColor</span>;<span class="pl-k">switch</span>(<span class="pl-smi">a</span>.<span class="pl-smi">m_type</span>){<span class="pl-k">case</span> <span class="pl-smi">q</span>.<span class="pl-smi">e_distanceJoint</span>:<span class="pl-c1">this</span>.<span class="pl-smi">m_debugDraw</span>.<span class="pl-en">DrawSegment</span>(f,m,r);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-smi">q</span>.<span class="pl-smi">e_pulleyJoint</span>:c<span class="pl-k">=</span>a <span class="pl-k">instanceof</span> n<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-en">GetGroundAnchorA</span>();c<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-en">GetGroundAnchorB</span>();<span class="pl-c1">this</span>.<span class="pl-smi">m_debugDraw</span>.<span class="pl-en">DrawSegment</span>(a,f,r);<span class="pl-c1">this</span>.<span class="pl-smi">m_debugDraw</span>.<span class="pl-en">DrawSegment</span>(c,</td>
      </tr>
      <tr>
        <td id="L244" class="blob-num js-line-number" data-line-number="244"></td>
        <td id="LC244" class="blob-code blob-code-inner js-file-line">m,r);<span class="pl-c1">this</span>.<span class="pl-smi">m_debugDraw</span>.<span class="pl-en">DrawSegment</span>(a,c,r);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-smi">q</span>.<span class="pl-smi">e_mouseJoint</span>:<span class="pl-c1">this</span>.<span class="pl-smi">m_debugDraw</span>.<span class="pl-en">DrawSegment</span>(f,m,r);<span class="pl-k">break</span>;<span class="pl-k">default</span>:c<span class="pl-k">!=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_groundBody</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_debugDraw</span>.<span class="pl-en">DrawSegment</span>(b,f,r);<span class="pl-c1">this</span>.<span class="pl-smi">m_debugDraw</span>.<span class="pl-en">DrawSegment</span>(f,m,r);g<span class="pl-k">!=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_groundBody</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_debugDraw</span>.<span class="pl-en">DrawSegment</span>(e,m,r)}};<span class="pl-smi">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">DrawShape</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>,<span class="pl-smi">g</span>){<span class="pl-k">switch</span>(<span class="pl-smi">a</span>.<span class="pl-smi">m_type</span>){<span class="pl-k">case</span> <span class="pl-c1">Y</span>.<span class="pl-smi">e_circleShape</span>:<span class="pl-k">var</span> b<span class="pl-k">=</span>a <span class="pl-k">instanceof</span> <span class="pl-c1">M</span><span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_debugDraw</span>.<span class="pl-en">DrawSolidCircle</span>(<span class="pl-c1">F</span>.<span class="pl-en">MulX</span>(c,<span class="pl-smi">b</span>.<span class="pl-smi">m_p</span>),<span class="pl-smi">b</span>.<span class="pl-smi">m_radius</span>,<span class="pl-smi">c</span>.<span class="pl-c1">R</span>.<span class="pl-smi">col1</span>,g);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">Y</span>.<span class="pl-smi">e_polygonShape</span>:b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">=</span>a <span class="pl-k">instanceof</span> <span class="pl-c1">W</span><span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">null</span>;</td>
      </tr>
      <tr>
        <td id="L245" class="blob-num js-line-number" data-line-number="245"></td>
        <td id="LC245" class="blob-code blob-code-inner js-file-line">a<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(<span class="pl-smi">b</span>.<span class="pl-en">GetVertexCount</span>());<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">GetVertices</span>(),f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>(a);<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span>a;<span class="pl-k">++</span>b)f[b]<span class="pl-k">=</span><span class="pl-c1">F</span>.<span class="pl-en">MulX</span>(c,e[b]);<span class="pl-c1">this</span>.<span class="pl-smi">m_debugDraw</span>.<span class="pl-en">DrawSolidPolygon</span>(f,a,g);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">Y</span>.<span class="pl-smi">e_edgeShape</span>:b<span class="pl-k">=</span>a <span class="pl-k">instanceof</span> <span class="pl-c1">L</span><span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_debugDraw</span>.<span class="pl-en">DrawSegment</span>(<span class="pl-c1">F</span>.<span class="pl-en">MulX</span>(c,<span class="pl-smi">b</span>.<span class="pl-en">GetVertex1</span>()),<span class="pl-c1">F</span>.<span class="pl-en">MulX</span>(c,<span class="pl-smi">b</span>.<span class="pl-en">GetVertex2</span>()),g)}};<span class="pl-smi">Box2D</span>.<span class="pl-smi">postDefs</span>.<span class="pl-c1">push</span>(<span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2World</span>.<span class="pl-smi">s_timestep2</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">d</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2World</span>.<span class="pl-smi">s_xf</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">K</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2World</span>.<span class="pl-smi">s_backupA</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">G</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2World</span>.<span class="pl-smi">s_backupB</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">G</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2World</span>.<span class="pl-smi">s_timestep</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">d</span>;</td>
      </tr>
      <tr>
        <td id="L246" class="blob-num js-line-number" data-line-number="246"></td>
        <td id="LC246" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2World</span>.<span class="pl-smi">s_queue</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2World</span>.<span class="pl-smi">s_jointColor</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>(<span class="pl-c1">0.5</span>,<span class="pl-c1">0.8</span>,<span class="pl-c1">0.8</span>);<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2World</span>.<span class="pl-smi">e_newFixture</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2World</span>.<span class="pl-smi">e_locked</span><span class="pl-k">=</span><span class="pl-c1">2</span>})})();</td>
      </tr>
      <tr>
        <td id="L247" class="blob-num js-line-number" data-line-number="247"></td>
        <td id="LC247" class="blob-code blob-code-inner js-file-line">(<span class="pl-k">function</span>(){<span class="pl-k">var</span> <span class="pl-c1">F</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">Shapes</span>.<span class="pl-smi">b2CircleShape</span>,<span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">Shapes</span>.<span class="pl-smi">b2EdgeShape</span>,<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">Shapes</span>.<span class="pl-smi">b2PolygonShape</span>,y<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">Shapes</span>.<span class="pl-smi">b2Shape</span>,w<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2CircleContact</span>,<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2Contact</span>,<span class="pl-c1">U</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2ContactConstraint</span>,p<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2ContactConstraintPoint</span>,<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2ContactEdge</span>,<span class="pl-c1">Q</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2ContactFactory</span>,<span class="pl-c1">V</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2ContactRegister</span>,<span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2ContactResult</span>,</td>
      </tr>
      <tr>
        <td id="L248" class="blob-num js-line-number" data-line-number="248"></td>
        <td id="LC248" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">L</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2ContactSolver</span>,<span class="pl-c1">I</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2EdgeAndCircleContact</span>,<span class="pl-c1">W</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2NullContact</span>,<span class="pl-c1">Y</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2PolyAndCircleContact</span>,k<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2PolyAndEdgeContact</span>,z<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2PolygonContact</span>,u<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2PositionSolverManifold</span>,<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2Body</span>,<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2TimeStep</span>,<span class="pl-c1">O</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">b2Settings</span>,<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">Math</span>.<span class="pl-smi">b2Mat22</span>,<span class="pl-c1">R</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">Math</span>.<span class="pl-smi">b2Math</span>,<span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">Math</span>.<span class="pl-smi">b2Vec2</span>,<span class="pl-c1">S</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2Collision</span>,</td>
      </tr>
      <tr>
        <td id="L249" class="blob-num js-line-number" data-line-number="249"></td>
        <td id="LC249" class="blob-code blob-code-inner js-file-line">aa<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2ContactID</span>,<span class="pl-c1">Z</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2Manifold</span>,d<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2TimeOfImpact</span>,h<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2TOIInput</span>,l<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Collision</span>.<span class="pl-smi">b2WorldManifold</span>;<span class="pl-smi">Box2D</span>.<span class="pl-en">inherit</span>(w,<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2Contact</span>);<span class="pl-smi">w</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">__super</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2Contact</span>.<span class="pl-c1">prototype</span>;<span class="pl-smi">w</span>.<span class="pl-en">b2CircleContact</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2Contact</span>.<span class="pl-smi">b2Contact</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>)};<span class="pl-smi">w</span>.<span class="pl-en">Create</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">w</span>};<span class="pl-smi">w</span>.<span class="pl-en">Destroy</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-smi">w</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Reset</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">j</span>,<span class="pl-smi">o</span>){<span class="pl-c1">this</span>.<span class="pl-smi">__super</span>.<span class="pl-smi">Reset</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,j,o)};<span class="pl-smi">w</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">Evaluate</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L250" class="blob-num js-line-number" data-line-number="250"></td>
        <td id="LC250" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(){<span class="pl-k">var</span> j<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureA</span>.<span class="pl-en">GetBody</span>(),o<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureB</span>.<span class="pl-en">GetBody</span>();<span class="pl-c1">S</span>.<span class="pl-en">CollideCircles</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_manifold</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureA</span>.<span class="pl-en">GetShape</span>()<span class="pl-k">instanceof</span> <span class="pl-c1">F</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureA</span>.<span class="pl-en">GetShape</span>()<span class="pl-k">:</span><span class="pl-c1">null</span>,<span class="pl-smi">j</span>.<span class="pl-smi">m_xf</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureB</span>.<span class="pl-en">GetShape</span>()<span class="pl-k">instanceof</span> <span class="pl-c1">F</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureB</span>.<span class="pl-en">GetShape</span>()<span class="pl-k">:</span><span class="pl-c1">null</span>,<span class="pl-smi">o</span>.<span class="pl-smi">m_xf</span>)};<span class="pl-c1">A</span>.<span class="pl-en">b2Contact</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">m_nodeA</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">B</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_nodeB</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">B</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_manifold</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Z</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_oldManifold</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Z</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetManifold</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_manifold</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetWorldManifold</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">j</span>){<span class="pl-k">var</span> o<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureA</span>.<span class="pl-en">GetBody</span>(),</td>
      </tr>
      <tr>
        <td id="L251" class="blob-num js-line-number" data-line-number="251"></td>
        <td id="LC251" class="blob-code blob-code-inner js-file-line">q<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureB</span>.<span class="pl-en">GetBody</span>(),n<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureA</span>.<span class="pl-en">GetShape</span>(),a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureB</span>.<span class="pl-en">GetShape</span>();<span class="pl-smi">j</span>.<span class="pl-en">Initialize</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_manifold</span>,<span class="pl-smi">o</span>.<span class="pl-en">GetTransform</span>(),<span class="pl-smi">n</span>.<span class="pl-smi">m_radius</span>,<span class="pl-smi">q</span>.<span class="pl-en">GetTransform</span>(),<span class="pl-smi">a</span>.<span class="pl-smi">m_radius</span>)};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">IsTouching</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;</span><span class="pl-c1">A</span>.<span class="pl-smi">e_touchingFlag</span>)<span class="pl-k">==</span><span class="pl-c1">A</span>.<span class="pl-smi">e_touchingFlag</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">IsContinuous</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;</span><span class="pl-c1">A</span>.<span class="pl-smi">e_continuousFlag</span>)<span class="pl-k">==</span><span class="pl-c1">A</span>.<span class="pl-smi">e_continuousFlag</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetSensor</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">j</span>){<span class="pl-k">if</span>(j)<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">|=</span><span class="pl-c1">A</span>.<span class="pl-smi">e_sensorFlag</span>;<span class="pl-k">else</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;=</span><span class="pl-k">~</span><span class="pl-c1">A</span>.<span class="pl-smi">e_sensorFlag</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">IsSensor</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;</span></td>
      </tr>
      <tr>
        <td id="L252" class="blob-num js-line-number" data-line-number="252"></td>
        <td id="LC252" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">A</span>.<span class="pl-smi">e_sensorFlag</span>)<span class="pl-k">==</span><span class="pl-c1">A</span>.<span class="pl-smi">e_sensorFlag</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetEnabled</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">j</span>){<span class="pl-k">if</span>(j)<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">|=</span><span class="pl-c1">A</span>.<span class="pl-smi">e_enabledFlag</span>;<span class="pl-k">else</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;=</span><span class="pl-k">~</span><span class="pl-c1">A</span>.<span class="pl-smi">e_enabledFlag</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">IsEnabled</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;</span><span class="pl-c1">A</span>.<span class="pl-smi">e_enabledFlag</span>)<span class="pl-k">==</span><span class="pl-c1">A</span>.<span class="pl-smi">e_enabledFlag</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetNext</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_next</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetFixtureA</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureA</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetFixtureB</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureB</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">FlagForFiltering</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">|=</span><span class="pl-c1">A</span>.<span class="pl-smi">e_filterFlag</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2Contact</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};</td>
      </tr>
      <tr>
        <td id="L253" class="blob-num js-line-number" data-line-number="253"></td>
        <td id="LC253" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Reset</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">j</span>,<span class="pl-smi">o</span>){<span class="pl-k">if</span>(j<span class="pl-k">===</span><span class="pl-c1">undefined</span>)j<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(o<span class="pl-k">===</span><span class="pl-c1">undefined</span>)o<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">=</span><span class="pl-c1">A</span>.<span class="pl-smi">e_enabledFlag</span>;<span class="pl-k">if</span>(<span class="pl-k">!</span>j<span class="pl-k">||!</span>o)<span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureB</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureA</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">else</span>{<span class="pl-k">if</span>(<span class="pl-smi">j</span>.<span class="pl-en">IsSensor</span>()<span class="pl-k">||</span><span class="pl-smi">o</span>.<span class="pl-en">IsSensor</span>())<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">|=</span><span class="pl-c1">A</span>.<span class="pl-smi">e_sensorFlag</span>;<span class="pl-k">var</span> q<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-en">GetBody</span>(),n<span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-en">GetBody</span>();<span class="pl-k">if</span>(<span class="pl-smi">q</span>.<span class="pl-en">GetType</span>()<span class="pl-k">!=</span><span class="pl-c1">D</span>.<span class="pl-smi">b2_dynamicBody</span><span class="pl-k">||</span><span class="pl-smi">q</span>.<span class="pl-en">IsBullet</span>()<span class="pl-k">||</span><span class="pl-smi">n</span>.<span class="pl-en">GetType</span>()<span class="pl-k">!=</span><span class="pl-c1">D</span>.<span class="pl-smi">b2_dynamicBody</span><span class="pl-k">||</span><span class="pl-smi">n</span>.<span class="pl-en">IsBullet</span>())<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">|=</span><span class="pl-c1">A</span>.<span class="pl-smi">e_continuousFlag</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureA</span><span class="pl-k">=</span>j;<span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureB</span><span class="pl-k">=</span>o;<span class="pl-c1">this</span>.<span class="pl-smi">m_manifold</span>.<span class="pl-smi">m_pointCount</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_next</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_prev</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_nodeA</span>.<span class="pl-smi">contact</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_nodeA</span>.<span class="pl-smi">prev</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L254" class="blob-num js-line-number" data-line-number="254"></td>
        <td id="LC254" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_nodeA</span>.<span class="pl-c1">next</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_nodeA</span>.<span class="pl-smi">other</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_nodeB</span>.<span class="pl-smi">contact</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_nodeB</span>.<span class="pl-smi">prev</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_nodeB</span>.<span class="pl-c1">next</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_nodeB</span>.<span class="pl-smi">other</span><span class="pl-k">=</span><span class="pl-c1">null</span>}};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Update</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">j</span>){<span class="pl-k">var</span> o<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_oldManifold</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_oldManifold</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_manifold</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_manifold</span><span class="pl-k">=</span>o;<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">|=</span><span class="pl-c1">A</span>.<span class="pl-smi">e_enabledFlag</span>;<span class="pl-k">var</span> q<span class="pl-k">=</span><span class="pl-c1">false</span>;o<span class="pl-k">=</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;</span><span class="pl-c1">A</span>.<span class="pl-smi">e_touchingFlag</span>)<span class="pl-k">==</span><span class="pl-c1">A</span>.<span class="pl-smi">e_touchingFlag</span>;<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureA</span>.<span class="pl-smi">m_body</span>,a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureB</span>.<span class="pl-smi">m_body</span>,c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureA</span>.<span class="pl-smi">m_aabb</span>.<span class="pl-en">TestOverlap</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureB</span>.<span class="pl-smi">m_aabb</span>);<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;</span><span class="pl-c1">A</span>.<span class="pl-smi">e_sensorFlag</span>){<span class="pl-k">if</span>(c){q<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L255" class="blob-num js-line-number" data-line-number="255"></td>
        <td id="LC255" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureA</span>.<span class="pl-en">GetShape</span>();c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureB</span>.<span class="pl-en">GetShape</span>();n<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-en">GetTransform</span>();a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">GetTransform</span>();q<span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-en">TestOverlap</span>(q,n,c,a)}<span class="pl-c1">this</span>.<span class="pl-smi">m_manifold</span>.<span class="pl-smi">m_pointCount</span><span class="pl-k">=</span><span class="pl-c1">0</span>}<span class="pl-k">else</span>{<span class="pl-k">if</span>(<span class="pl-smi">n</span>.<span class="pl-en">GetType</span>()<span class="pl-k">!=</span><span class="pl-c1">D</span>.<span class="pl-smi">b2_dynamicBody</span><span class="pl-k">||</span><span class="pl-smi">n</span>.<span class="pl-en">IsBullet</span>()<span class="pl-k">||</span><span class="pl-smi">a</span>.<span class="pl-en">GetType</span>()<span class="pl-k">!=</span><span class="pl-c1">D</span>.<span class="pl-smi">b2_dynamicBody</span><span class="pl-k">||</span><span class="pl-smi">a</span>.<span class="pl-en">IsBullet</span>())<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">|=</span><span class="pl-c1">A</span>.<span class="pl-smi">e_continuousFlag</span>;<span class="pl-k">else</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;=</span><span class="pl-k">~</span><span class="pl-c1">A</span>.<span class="pl-smi">e_continuousFlag</span>;<span class="pl-k">if</span>(c){<span class="pl-c1">this</span>.<span class="pl-en">Evaluate</span>();q<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_manifold</span>.<span class="pl-smi">m_pointCount</span><span class="pl-k">&gt;</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_manifold</span>.<span class="pl-smi">m_pointCount</span>;<span class="pl-k">++</span>c){<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_manifold</span>.<span class="pl-smi">m_points</span>[c];<span class="pl-smi">g</span>.<span class="pl-smi">m_normalImpulse</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-smi">g</span>.<span class="pl-smi">m_tangentImpulse</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L256" class="blob-num js-line-number" data-line-number="256"></td>
        <td id="LC256" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">g</span>.<span class="pl-smi">m_id</span>,e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_oldManifold</span>.<span class="pl-smi">m_pointCount</span>;<span class="pl-k">++</span>e){<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_oldManifold</span>.<span class="pl-smi">m_points</span>[e];<span class="pl-k">if</span>(<span class="pl-smi">f</span>.<span class="pl-smi">m_id</span>.<span class="pl-smi">key</span><span class="pl-k">==</span><span class="pl-smi">b</span>.<span class="pl-smi">key</span>){<span class="pl-smi">g</span>.<span class="pl-smi">m_normalImpulse</span><span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">m_normalImpulse</span>;<span class="pl-smi">g</span>.<span class="pl-smi">m_tangentImpulse</span><span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">m_tangentImpulse</span>;<span class="pl-k">break</span>}}}}<span class="pl-k">else</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_manifold</span>.<span class="pl-smi">m_pointCount</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(q<span class="pl-k">!=</span>o){<span class="pl-smi">n</span>.<span class="pl-en">SetAwake</span>(<span class="pl-c1">true</span>);<span class="pl-smi">a</span>.<span class="pl-en">SetAwake</span>(<span class="pl-c1">true</span>)}}<span class="pl-k">if</span>(q)<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">|=</span><span class="pl-c1">A</span>.<span class="pl-smi">e_touchingFlag</span>;<span class="pl-k">else</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;=</span><span class="pl-k">~</span><span class="pl-c1">A</span>.<span class="pl-smi">e_touchingFlag</span>;o<span class="pl-k">==</span><span class="pl-c1">false</span><span class="pl-k">&amp;&amp;</span>q<span class="pl-k">==</span><span class="pl-c1">true</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">j</span>.<span class="pl-en">BeginContact</span>(<span class="pl-c1">this</span>);o<span class="pl-k">==</span><span class="pl-c1">true</span><span class="pl-k">&amp;&amp;</span>q<span class="pl-k">==</span><span class="pl-c1">false</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">j</span>.<span class="pl-en">EndContact</span>(<span class="pl-c1">this</span>);(<span class="pl-c1">this</span>.<span class="pl-smi">m_flags</span><span class="pl-k">&amp;</span><span class="pl-c1">A</span>.<span class="pl-smi">e_sensorFlag</span>)<span class="pl-k">==</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">j</span>.<span class="pl-en">PreSolve</span>(<span class="pl-c1">this</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_oldManifold</span>)};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">Evaluate</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L257" class="blob-num js-line-number" data-line-number="257"></td>
        <td id="LC257" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(){};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ComputeTOI</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">j</span>,<span class="pl-smi">o</span>){<span class="pl-c1">A</span>.<span class="pl-smi">s_input</span>.<span class="pl-smi">proxyA</span>.<span class="pl-en">Set</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureA</span>.<span class="pl-en">GetShape</span>());<span class="pl-c1">A</span>.<span class="pl-smi">s_input</span>.<span class="pl-smi">proxyB</span>.<span class="pl-en">Set</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureB</span>.<span class="pl-en">GetShape</span>());<span class="pl-c1">A</span>.<span class="pl-smi">s_input</span>.<span class="pl-smi">sweepA</span><span class="pl-k">=</span>j;<span class="pl-c1">A</span>.<span class="pl-smi">s_input</span>.<span class="pl-smi">sweepB</span><span class="pl-k">=</span>o;<span class="pl-c1">A</span>.<span class="pl-smi">s_input</span>.<span class="pl-smi">tolerance</span><span class="pl-k">=</span><span class="pl-c1">O</span>.<span class="pl-smi">b2_linearSlop</span>;<span class="pl-k">return</span> <span class="pl-smi">d</span>.<span class="pl-en">TimeOfImpact</span>(<span class="pl-c1">A</span>.<span class="pl-smi">s_input</span>)};<span class="pl-smi">Box2D</span>.<span class="pl-smi">postDefs</span>.<span class="pl-c1">push</span>(<span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2Contact</span>.<span class="pl-smi">e_sensorFlag</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2Contact</span>.<span class="pl-smi">e_continuousFlag</span><span class="pl-k">=</span><span class="pl-c1">2</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2Contact</span>.<span class="pl-smi">e_islandFlag</span><span class="pl-k">=</span><span class="pl-c1">4</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2Contact</span>.<span class="pl-smi">e_toiFlag</span><span class="pl-k">=</span><span class="pl-c1">8</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2Contact</span>.<span class="pl-smi">e_touchingFlag</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L258" class="blob-num js-line-number" data-line-number="258"></td>
        <td id="LC258" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">16</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2Contact</span>.<span class="pl-smi">e_enabledFlag</span><span class="pl-k">=</span><span class="pl-c1">32</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2Contact</span>.<span class="pl-smi">e_filterFlag</span><span class="pl-k">=</span><span class="pl-c1">64</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2Contact</span>.<span class="pl-smi">s_input</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">h</span>});<span class="pl-c1">U</span>.<span class="pl-en">b2ContactConstraint</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">localPlaneNormal</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">N</span>;<span class="pl-c1">this</span>.<span class="pl-smi">localPoint</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">N</span>;<span class="pl-c1">this</span>.<span class="pl-smi">normal</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">N</span>;<span class="pl-c1">this</span>.<span class="pl-smi">normalMass</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">E</span>;<span class="pl-c1">this</span>.<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">E</span>};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2ContactConstraint</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">points</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>(<span class="pl-c1">O</span>.<span class="pl-smi">b2_maxManifoldPoints</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> j<span class="pl-k">=</span><span class="pl-c1">0</span>;j<span class="pl-k">&lt;</span><span class="pl-c1">O</span>.<span class="pl-smi">b2_maxManifoldPoints</span>;j<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-smi">points</span>[j]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>};<span class="pl-smi">p</span>.<span class="pl-en">b2ContactConstraintPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">localPoint</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">N</span>;</td>
      </tr>
      <tr>
        <td id="L259" class="blob-num js-line-number" data-line-number="259"></td>
        <td id="LC259" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">rA</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">N</span>;<span class="pl-c1">this</span>.<span class="pl-smi">rB</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">N</span>};<span class="pl-c1">B</span>.<span class="pl-en">b2ContactEdge</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">Q</span>.<span class="pl-en">b2ContactFactory</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">Q</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2ContactFactory</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">j</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_allocator</span><span class="pl-k">=</span>j;<span class="pl-c1">this</span>.<span class="pl-en">InitializeRegisters</span>()};<span class="pl-c1">Q</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">AddType</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">j</span>,<span class="pl-smi">o</span>,<span class="pl-smi">q</span>,<span class="pl-smi">n</span>){<span class="pl-k">if</span>(q<span class="pl-k">===</span><span class="pl-c1">undefined</span>)q<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(n<span class="pl-k">===</span><span class="pl-c1">undefined</span>)n<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_registers</span>[q][n].<span class="pl-smi">createFcn</span><span class="pl-k">=</span>j;<span class="pl-c1">this</span>.<span class="pl-smi">m_registers</span>[q][n].<span class="pl-smi">destroyFcn</span><span class="pl-k">=</span>o;<span class="pl-c1">this</span>.<span class="pl-smi">m_registers</span>[q][n].<span class="pl-smi">primary</span><span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-k">if</span>(q<span class="pl-k">!=</span>n){<span class="pl-c1">this</span>.<span class="pl-smi">m_registers</span>[n][q].<span class="pl-smi">createFcn</span><span class="pl-k">=</span>j;<span class="pl-c1">this</span>.<span class="pl-smi">m_registers</span>[n][q].<span class="pl-smi">destroyFcn</span><span class="pl-k">=</span>o;<span class="pl-c1">this</span>.<span class="pl-smi">m_registers</span>[n][q].<span class="pl-smi">primary</span><span class="pl-k">=</span><span class="pl-c1">false</span>}};<span class="pl-c1">Q</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">InitializeRegisters</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L260" class="blob-num js-line-number" data-line-number="260"></td>
        <td id="LC260" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">m_registers</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>(<span class="pl-smi">y</span>.<span class="pl-smi">e_shapeTypeCount</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> j<span class="pl-k">=</span><span class="pl-c1">0</span>;j<span class="pl-k">&lt;</span><span class="pl-smi">y</span>.<span class="pl-smi">e_shapeTypeCount</span>;j<span class="pl-k">++</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_registers</span>[j]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>(<span class="pl-smi">y</span>.<span class="pl-smi">e_shapeTypeCount</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> o<span class="pl-k">=</span><span class="pl-c1">0</span>;o<span class="pl-k">&lt;</span><span class="pl-smi">y</span>.<span class="pl-smi">e_shapeTypeCount</span>;o<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-smi">m_registers</span>[j][o]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">V</span>}<span class="pl-c1">this</span>.<span class="pl-en">AddType</span>(<span class="pl-smi">w</span>.<span class="pl-smi">Create</span>,<span class="pl-smi">w</span>.<span class="pl-smi">Destroy</span>,<span class="pl-smi">y</span>.<span class="pl-smi">e_circleShape</span>,<span class="pl-smi">y</span>.<span class="pl-smi">e_circleShape</span>);<span class="pl-c1">this</span>.<span class="pl-en">AddType</span>(<span class="pl-c1">Y</span>.<span class="pl-smi">Create</span>,<span class="pl-c1">Y</span>.<span class="pl-smi">Destroy</span>,<span class="pl-smi">y</span>.<span class="pl-smi">e_polygonShape</span>,<span class="pl-smi">y</span>.<span class="pl-smi">e_circleShape</span>);<span class="pl-c1">this</span>.<span class="pl-en">AddType</span>(<span class="pl-smi">z</span>.<span class="pl-smi">Create</span>,<span class="pl-smi">z</span>.<span class="pl-smi">Destroy</span>,<span class="pl-smi">y</span>.<span class="pl-smi">e_polygonShape</span>,<span class="pl-smi">y</span>.<span class="pl-smi">e_polygonShape</span>);<span class="pl-c1">this</span>.<span class="pl-en">AddType</span>(<span class="pl-c1">I</span>.<span class="pl-smi">Create</span>,<span class="pl-c1">I</span>.<span class="pl-smi">Destroy</span>,<span class="pl-smi">y</span>.<span class="pl-smi">e_edgeShape</span>,<span class="pl-smi">y</span>.<span class="pl-smi">e_circleShape</span>);<span class="pl-c1">this</span>.<span class="pl-en">AddType</span>(<span class="pl-smi">k</span>.<span class="pl-smi">Create</span>,<span class="pl-smi">k</span>.<span class="pl-smi">Destroy</span>,</td>
      </tr>
      <tr>
        <td id="L261" class="blob-num js-line-number" data-line-number="261"></td>
        <td id="LC261" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">y</span>.<span class="pl-smi">e_polygonShape</span>,<span class="pl-smi">y</span>.<span class="pl-smi">e_edgeShape</span>)};<span class="pl-c1">Q</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Create</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">j</span>,<span class="pl-smi">o</span>){<span class="pl-k">var</span> q<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(<span class="pl-smi">j</span>.<span class="pl-en">GetType</span>()),n<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(<span class="pl-smi">o</span>.<span class="pl-en">GetType</span>());q<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_registers</span>[q][n];<span class="pl-k">if</span>(<span class="pl-smi">q</span>.<span class="pl-smi">pool</span>){n<span class="pl-k">=</span><span class="pl-smi">q</span>.<span class="pl-smi">pool</span>;<span class="pl-smi">q</span>.<span class="pl-smi">pool</span><span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">m_next</span>;<span class="pl-smi">q</span>.<span class="pl-smi">poolCount</span><span class="pl-k">--</span>;<span class="pl-smi">n</span>.<span class="pl-en">Reset</span>(j,o);<span class="pl-k">return</span> n}n<span class="pl-k">=</span><span class="pl-smi">q</span>.<span class="pl-smi">createFcn</span>;<span class="pl-k">if</span>(n<span class="pl-k">!=</span><span class="pl-c1">null</span>){<span class="pl-k">if</span>(<span class="pl-smi">q</span>.<span class="pl-smi">primary</span>){n<span class="pl-k">=</span><span class="pl-en">n</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_allocator</span>);<span class="pl-smi">n</span>.<span class="pl-en">Reset</span>(j,o)}<span class="pl-k">else</span>{n<span class="pl-k">=</span><span class="pl-en">n</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_allocator</span>);<span class="pl-smi">n</span>.<span class="pl-en">Reset</span>(o,j)}<span class="pl-k">return</span> n}<span class="pl-k">else</span> <span class="pl-k">return</span> <span class="pl-c1">null</span>};<span class="pl-c1">Q</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Destroy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">j</span>){<span class="pl-k">if</span>(<span class="pl-smi">j</span>.<span class="pl-smi">m_manifold</span>.<span class="pl-smi">m_pointCount</span><span class="pl-k">&gt;</span><span class="pl-c1">0</span>){<span class="pl-smi">j</span>.<span class="pl-smi">m_fixtureA</span>.<span class="pl-smi">m_body</span>.<span class="pl-en">SetAwake</span>(<span class="pl-c1">true</span>);<span class="pl-smi">j</span>.<span class="pl-smi">m_fixtureB</span>.<span class="pl-smi">m_body</span>.<span class="pl-en">SetAwake</span>(<span class="pl-c1">true</span>)}<span class="pl-k">var</span> o<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(<span class="pl-smi">j</span>.<span class="pl-smi">m_fixtureA</span>.<span class="pl-en">GetType</span>()),</td>
      </tr>
      <tr>
        <td id="L262" class="blob-num js-line-number" data-line-number="262"></td>
        <td id="LC262" class="blob-code blob-code-inner js-file-line">q<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(<span class="pl-smi">j</span>.<span class="pl-smi">m_fixtureB</span>.<span class="pl-en">GetType</span>());o<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_registers</span>[o][q];<span class="pl-smi">o</span>.<span class="pl-smi">poolCount</span><span class="pl-k">++</span>;<span class="pl-smi">j</span>.<span class="pl-smi">m_next</span><span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">pool</span>;<span class="pl-smi">o</span>.<span class="pl-smi">pool</span><span class="pl-k">=</span>j;o<span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">destroyFcn</span>;<span class="pl-en">o</span>(j,<span class="pl-c1">this</span>.<span class="pl-smi">m_allocator</span>)};<span class="pl-c1">V</span>.<span class="pl-en">b2ContactRegister</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">M</span>.<span class="pl-en">b2ContactResult</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">position</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">N</span>;<span class="pl-c1">this</span>.<span class="pl-smi">normal</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">N</span>;<span class="pl-c1">this</span>.<span class="pl-c1">id</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">aa</span>};<span class="pl-c1">L</span>.<span class="pl-en">b2ContactSolver</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">m_step</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">H</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_constraints</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>};<span class="pl-c1">L</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2ContactSolver</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">L</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Initialize</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">j</span>,<span class="pl-smi">o</span>,<span class="pl-smi">q</span>,<span class="pl-smi">n</span>){<span class="pl-k">if</span>(q<span class="pl-k">===</span><span class="pl-c1">undefined</span>)q<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> a;<span class="pl-c1">this</span>.<span class="pl-smi">m_step</span>.<span class="pl-en">Set</span>(j);<span class="pl-c1">this</span>.<span class="pl-smi">m_allocator</span><span class="pl-k">=</span>n;j<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_constraintCount</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L263" class="blob-num js-line-number" data-line-number="263"></td>
        <td id="LC263" class="blob-code blob-code-inner js-file-line">q;<span class="pl-c1">this</span>.<span class="pl-smi">m_constraints</span>.<span class="pl-c1">length</span><span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_constraintCount</span>;)<span class="pl-c1">this</span>.<span class="pl-smi">m_constraints</span>[<span class="pl-c1">this</span>.<span class="pl-smi">m_constraints</span>.<span class="pl-c1">length</span>]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">U</span>;<span class="pl-k">for</span>(j<span class="pl-k">=</span><span class="pl-c1">0</span>;j<span class="pl-k">&lt;</span>q;<span class="pl-k">++</span>j){a<span class="pl-k">=</span>o[j];n<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">m_fixtureA</span>;<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">m_fixtureB</span>,g<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">m_shape</span>.<span class="pl-smi">m_radius</span>,b<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">m_shape</span>.<span class="pl-smi">m_radius</span>,e<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">m_body</span>,f<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">m_body</span>,m<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">GetManifold</span>(),r<span class="pl-k">=</span><span class="pl-c1">O</span>.<span class="pl-en">b2MixFriction</span>(<span class="pl-smi">n</span>.<span class="pl-en">GetFriction</span>(),<span class="pl-smi">c</span>.<span class="pl-en">GetFriction</span>()),s<span class="pl-k">=</span><span class="pl-c1">O</span>.<span class="pl-en">b2MixRestitution</span>(<span class="pl-smi">n</span>.<span class="pl-en">GetRestitution</span>(),<span class="pl-smi">c</span>.<span class="pl-en">GetRestitution</span>()),v<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span>,t<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span>,x<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span>,<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span>,<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">m_angularVelocity</span>,<span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">m_angularVelocity</span>;<span class="pl-c1">O</span>.<span class="pl-en">b2Assert</span>(<span class="pl-smi">m</span>.<span class="pl-smi">m_pointCount</span><span class="pl-k">&gt;</span></td>
      </tr>
      <tr>
        <td id="L264" class="blob-num js-line-number" data-line-number="264"></td>
        <td id="LC264" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>);<span class="pl-c1">L</span>.<span class="pl-smi">s_worldManifold</span>.<span class="pl-en">Initialize</span>(m,<span class="pl-smi">e</span>.<span class="pl-smi">m_xf</span>,g,<span class="pl-smi">f</span>.<span class="pl-smi">m_xf</span>,b);c<span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-smi">s_worldManifold</span>.<span class="pl-smi">m_normal</span>.<span class="pl-c1">x</span>;a<span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-smi">s_worldManifold</span>.<span class="pl-smi">m_normal</span>.<span class="pl-c1">y</span>;n<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_constraints</span>[j];<span class="pl-smi">n</span>.<span class="pl-smi">bodyA</span><span class="pl-k">=</span>e;<span class="pl-smi">n</span>.<span class="pl-smi">bodyB</span><span class="pl-k">=</span>f;<span class="pl-smi">n</span>.<span class="pl-smi">manifold</span><span class="pl-k">=</span>m;<span class="pl-smi">n</span>.<span class="pl-smi">normal</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>c;<span class="pl-smi">n</span>.<span class="pl-smi">normal</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a;<span class="pl-smi">n</span>.<span class="pl-smi">pointCount</span><span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-smi">m_pointCount</span>;<span class="pl-smi">n</span>.<span class="pl-smi">friction</span><span class="pl-k">=</span>r;<span class="pl-smi">n</span>.<span class="pl-smi">restitution</span><span class="pl-k">=</span>s;<span class="pl-smi">n</span>.<span class="pl-smi">localPlaneNormal</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-smi">m_localPlaneNormal</span>.<span class="pl-c1">x</span>;<span class="pl-smi">n</span>.<span class="pl-smi">localPlaneNormal</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-smi">m_localPlaneNormal</span>.<span class="pl-c1">y</span>;<span class="pl-smi">n</span>.<span class="pl-smi">localPoint</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-smi">m_localPoint</span>.<span class="pl-c1">x</span>;<span class="pl-smi">n</span>.<span class="pl-smi">localPoint</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-smi">m_localPoint</span>.<span class="pl-c1">y</span>;<span class="pl-smi">n</span>.<span class="pl-smi">radius</span><span class="pl-k">=</span>g<span class="pl-k">+</span>b;<span class="pl-smi">n</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-smi">m_type</span>;<span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-c1">0</span>;g<span class="pl-k">&lt;</span><span class="pl-smi">n</span>.<span class="pl-smi">pointCount</span>;<span class="pl-k">++</span>g){r<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-smi">m_points</span>[g];b<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">points</span>[g];<span class="pl-smi">b</span>.<span class="pl-smi">normalImpulse</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L265" class="blob-num js-line-number" data-line-number="265"></td>
        <td id="LC265" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">r</span>.<span class="pl-smi">m_normalImpulse</span>;<span class="pl-smi">b</span>.<span class="pl-smi">tangentImpulse</span><span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-smi">m_tangentImpulse</span>;<span class="pl-smi">b</span>.<span class="pl-smi">localPoint</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">r</span>.<span class="pl-smi">m_localPoint</span>);r<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">rA</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-smi">s_worldManifold</span>.<span class="pl-smi">m_points</span>[g].<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span>;s<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">rA</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-smi">s_worldManifold</span>.<span class="pl-smi">m_points</span>[g].<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span>;<span class="pl-k">var</span> <span class="pl-c1">P</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">rB</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-smi">s_worldManifold</span>.<span class="pl-smi">m_points</span>[g].<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">f</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span>,<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">rB</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-smi">s_worldManifold</span>.<span class="pl-smi">m_points</span>[g].<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">f</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span>,$<span class="pl-k">=</span>r<span class="pl-k">*</span>a<span class="pl-k">-</span>s<span class="pl-k">*</span>c,ba<span class="pl-k">=</span><span class="pl-c1">P</span><span class="pl-k">*</span>a<span class="pl-k">-</span><span class="pl-c1">X</span><span class="pl-k">*</span>c;$<span class="pl-k">*=</span>$;ba<span class="pl-k">*=</span>ba;<span class="pl-smi">b</span>.<span class="pl-smi">normalMass</span><span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>(<span class="pl-smi">e</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">+</span><span class="pl-smi">f</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">+</span><span class="pl-smi">e</span>.<span class="pl-smi">m_invI</span><span class="pl-k">*</span>$<span class="pl-k">+</span><span class="pl-smi">f</span>.<span class="pl-smi">m_invI</span><span class="pl-k">*</span>ba);<span class="pl-k">var</span> ca<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">m_mass</span><span class="pl-k">*</span><span class="pl-smi">e</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">+</span><span class="pl-smi">f</span>.<span class="pl-smi">m_mass</span><span class="pl-k">*</span><span class="pl-smi">f</span>.<span class="pl-smi">m_invMass</span>;ca<span class="pl-k">+=</span><span class="pl-smi">e</span>.<span class="pl-smi">m_mass</span><span class="pl-k">*</span><span class="pl-smi">e</span>.<span class="pl-smi">m_invI</span><span class="pl-k">*</span>$<span class="pl-k">+</span><span class="pl-smi">f</span>.<span class="pl-smi">m_mass</span><span class="pl-k">*</span><span class="pl-smi">f</span>.<span class="pl-smi">m_invI</span><span class="pl-k">*</span>ba;</td>
      </tr>
      <tr>
        <td id="L266" class="blob-num js-line-number" data-line-number="266"></td>
        <td id="LC266" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>.<span class="pl-smi">equalizedMass</span><span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>ca;ba<span class="pl-k">=</span>a;ca<span class="pl-k">=</span><span class="pl-k">-</span>c;$<span class="pl-k">=</span>r<span class="pl-k">*</span>ca<span class="pl-k">-</span>s<span class="pl-k">*</span>ba;ba<span class="pl-k">=</span><span class="pl-c1">P</span><span class="pl-k">*</span>ca<span class="pl-k">-</span><span class="pl-c1">X</span><span class="pl-k">*</span>ba;$<span class="pl-k">*=</span>$;ba<span class="pl-k">*=</span>ba;<span class="pl-smi">b</span>.<span class="pl-smi">tangentMass</span><span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>(<span class="pl-smi">e</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">+</span><span class="pl-smi">f</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">+</span><span class="pl-smi">e</span>.<span class="pl-smi">m_invI</span><span class="pl-k">*</span>$<span class="pl-k">+</span><span class="pl-smi">f</span>.<span class="pl-smi">m_invI</span><span class="pl-k">*</span>ba);<span class="pl-smi">b</span>.<span class="pl-smi">velocityBias</span><span class="pl-k">=</span><span class="pl-c1">0</span>;r<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">normal</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>(x<span class="pl-k">+-</span><span class="pl-c1">T</span><span class="pl-k">*</span><span class="pl-c1">X</span><span class="pl-k">-</span>v<span class="pl-k">-</span> <span class="pl-k">-</span><span class="pl-c1">J</span><span class="pl-k">*</span>s)<span class="pl-k">+</span><span class="pl-smi">n</span>.<span class="pl-smi">normal</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>(<span class="pl-c1">C</span><span class="pl-k">+</span><span class="pl-c1">T</span><span class="pl-k">*</span><span class="pl-c1">P</span><span class="pl-k">-</span>t<span class="pl-k">-</span><span class="pl-c1">J</span><span class="pl-k">*</span>r);<span class="pl-k">if</span>(r<span class="pl-k">&lt;</span><span class="pl-k">-</span><span class="pl-c1">O</span>.<span class="pl-smi">b2_velocityThreshold</span>)<span class="pl-smi">b</span>.<span class="pl-smi">velocityBias</span><span class="pl-k">+=</span><span class="pl-k">-</span><span class="pl-smi">n</span>.<span class="pl-smi">restitution</span><span class="pl-k">*</span>r}<span class="pl-k">if</span>(<span class="pl-smi">n</span>.<span class="pl-smi">pointCount</span><span class="pl-k">==</span><span class="pl-c1">2</span>){<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">points</span>[<span class="pl-c1">0</span>];x<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">points</span>[<span class="pl-c1">1</span>];m<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">m_invMass</span>;e<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">m_invI</span>;v<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">m_invMass</span>;f<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">m_invI</span>;t<span class="pl-k">=</span><span class="pl-c1">C</span>.<span class="pl-smi">rA</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>a<span class="pl-k">-</span><span class="pl-c1">C</span>.<span class="pl-smi">rA</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>c;<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-c1">C</span>.<span class="pl-smi">rB</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>a<span class="pl-k">-</span><span class="pl-c1">C</span>.<span class="pl-smi">rB</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>c;<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-smi">x</span>.<span class="pl-smi">rA</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>a<span class="pl-k">-</span><span class="pl-smi">x</span>.<span class="pl-smi">rA</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>c;x<span class="pl-k">=</span><span class="pl-smi">x</span>.<span class="pl-smi">rB</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>a<span class="pl-k">-</span><span class="pl-smi">x</span>.<span class="pl-smi">rB</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>c;c<span class="pl-k">=</span>m<span class="pl-k">+</span>v<span class="pl-k">+</span>e<span class="pl-k">*</span>t<span class="pl-k">*</span>t<span class="pl-k">+</span>f<span class="pl-k">*</span><span class="pl-c1">C</span><span class="pl-k">*</span><span class="pl-c1">C</span>;a<span class="pl-k">=</span>m<span class="pl-k">+</span>v<span class="pl-k">+</span>e<span class="pl-k">*</span><span class="pl-c1">J</span><span class="pl-k">*</span><span class="pl-c1">J</span><span class="pl-k">+</span>f<span class="pl-k">*</span>x<span class="pl-k">*</span>x;f<span class="pl-k">=</span>m<span class="pl-k">+</span>v<span class="pl-k">+</span>e<span class="pl-k">*</span>t<span class="pl-k">*</span><span class="pl-c1">J</span><span class="pl-k">+</span>f<span class="pl-k">*</span><span class="pl-c1">C</span><span class="pl-k">*</span>x;<span class="pl-k">if</span>(c<span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L267" class="blob-num js-line-number" data-line-number="267"></td>
        <td id="LC267" class="blob-code blob-code-inner js-file-line">c<span class="pl-k">&lt;</span><span class="pl-c1">100</span><span class="pl-k">*</span>(c<span class="pl-k">*</span>a<span class="pl-k">-</span>f<span class="pl-k">*</span>f)){<span class="pl-smi">n</span>.<span class="pl-c1">K</span>.<span class="pl-smi">col1</span>.<span class="pl-en">Set</span>(c,f);<span class="pl-smi">n</span>.<span class="pl-c1">K</span>.<span class="pl-smi">col2</span>.<span class="pl-en">Set</span>(f,a);<span class="pl-smi">n</span>.<span class="pl-c1">K</span>.<span class="pl-en">GetInverse</span>(<span class="pl-smi">n</span>.<span class="pl-smi">normalMass</span>)}<span class="pl-k">else</span> <span class="pl-smi">n</span>.<span class="pl-smi">pointCount</span><span class="pl-k">=</span><span class="pl-c1">1</span>}}};<span class="pl-c1">L</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">InitVelocityConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">j</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> o<span class="pl-k">=</span><span class="pl-c1">0</span>;o<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_constraintCount</span>;<span class="pl-k">++</span>o){<span class="pl-k">var</span> q<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_constraints</span>[o],n<span class="pl-k">=</span><span class="pl-smi">q</span>.<span class="pl-smi">bodyA</span>,a<span class="pl-k">=</span><span class="pl-smi">q</span>.<span class="pl-smi">bodyB</span>,c<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">m_invMass</span>,g<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">m_invI</span>,b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">m_invMass</span>,e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">m_invI</span>,f<span class="pl-k">=</span><span class="pl-smi">q</span>.<span class="pl-smi">normal</span>.<span class="pl-c1">x</span>,m<span class="pl-k">=</span><span class="pl-smi">q</span>.<span class="pl-smi">normal</span>.<span class="pl-c1">y</span>,r<span class="pl-k">=</span>m,s<span class="pl-k">=</span><span class="pl-k">-</span>f,v<span class="pl-k">=</span><span class="pl-c1">0</span>,t<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-smi">j</span>.<span class="pl-smi">warmStarting</span>){t<span class="pl-k">=</span><span class="pl-smi">q</span>.<span class="pl-smi">pointCount</span>;<span class="pl-k">for</span>(v<span class="pl-k">=</span><span class="pl-c1">0</span>;v<span class="pl-k">&lt;</span>t;<span class="pl-k">++</span>v){<span class="pl-k">var</span> x<span class="pl-k">=</span><span class="pl-smi">q</span>.<span class="pl-smi">points</span>[v];<span class="pl-smi">x</span>.<span class="pl-smi">normalImpulse</span><span class="pl-k">*=</span><span class="pl-smi">j</span>.<span class="pl-smi">dtRatio</span>;<span class="pl-smi">x</span>.<span class="pl-smi">tangentImpulse</span><span class="pl-k">*=</span><span class="pl-smi">j</span>.<span class="pl-smi">dtRatio</span>;<span class="pl-k">var</span> <span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-smi">x</span>.<span class="pl-smi">normalImpulse</span><span class="pl-k">*</span>f<span class="pl-k">+</span><span class="pl-smi">x</span>.<span class="pl-smi">tangentImpulse</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L268" class="blob-num js-line-number" data-line-number="268"></td>
        <td id="LC268" class="blob-code blob-code-inner js-file-line">r,<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-smi">x</span>.<span class="pl-smi">normalImpulse</span><span class="pl-k">*</span>m<span class="pl-k">+</span><span class="pl-smi">x</span>.<span class="pl-smi">tangentImpulse</span><span class="pl-k">*</span>s;<span class="pl-smi">n</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">-=</span>g<span class="pl-k">*</span>(<span class="pl-smi">x</span>.<span class="pl-smi">rA</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">J</span><span class="pl-k">-</span><span class="pl-smi">x</span>.<span class="pl-smi">rA</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">C</span>);<span class="pl-smi">n</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span>c<span class="pl-k">*</span><span class="pl-c1">C</span>;<span class="pl-smi">n</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span>c<span class="pl-k">*</span><span class="pl-c1">J</span>;<span class="pl-smi">a</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">+=</span>e<span class="pl-k">*</span>(<span class="pl-smi">x</span>.<span class="pl-smi">rB</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">J</span><span class="pl-k">-</span><span class="pl-smi">x</span>.<span class="pl-smi">rB</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">C</span>);<span class="pl-smi">a</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span>b<span class="pl-k">*</span><span class="pl-c1">C</span>;<span class="pl-smi">a</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span>b<span class="pl-k">*</span><span class="pl-c1">J</span>}}<span class="pl-k">else</span>{t<span class="pl-k">=</span><span class="pl-smi">q</span>.<span class="pl-smi">pointCount</span>;<span class="pl-k">for</span>(v<span class="pl-k">=</span><span class="pl-c1">0</span>;v<span class="pl-k">&lt;</span>t;<span class="pl-k">++</span>v){n<span class="pl-k">=</span><span class="pl-smi">q</span>.<span class="pl-smi">points</span>[v];<span class="pl-smi">n</span>.<span class="pl-smi">normalImpulse</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-smi">n</span>.<span class="pl-smi">tangentImpulse</span><span class="pl-k">=</span><span class="pl-c1">0</span>}}}};<span class="pl-c1">L</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolveVelocityConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> j<span class="pl-k">=</span><span class="pl-c1">0</span>,o,q<span class="pl-k">=</span><span class="pl-c1">0</span>,n<span class="pl-k">=</span><span class="pl-c1">0</span>,a<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span>n<span class="pl-k">=</span>n<span class="pl-k">=</span>q<span class="pl-k">=</span>q<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span>q<span class="pl-k">=</span>q<span class="pl-k">=</span><span class="pl-c1">0</span>,b<span class="pl-k">=</span>q<span class="pl-k">=</span>a<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span><span class="pl-c1">0</span>,f,m<span class="pl-k">=</span><span class="pl-c1">0</span>;m<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_constraintCount</span>;<span class="pl-k">++</span>m){a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_constraints</span>[m];<span class="pl-k">var</span> r<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">bodyA</span>,</td>
      </tr>
      <tr>
        <td id="L269" class="blob-num js-line-number" data-line-number="269"></td>
        <td id="LC269" class="blob-code blob-code-inner js-file-line">s<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">bodyB</span>,v<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-smi">m_angularVelocity</span>,t<span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">m_angularVelocity</span>,x<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-smi">m_linearVelocity</span>,<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">m_linearVelocity</span>,<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-smi">m_invMass</span>,<span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-smi">m_invI</span>,<span class="pl-c1">P</span><span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">m_invMass</span>,<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">m_invI</span>;b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">normal</span>.<span class="pl-c1">x</span>;<span class="pl-k">var</span> $<span class="pl-k">=</span>e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">normal</span>.<span class="pl-c1">y</span>;f<span class="pl-k">=</span><span class="pl-k">-</span>b;g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">friction</span>;<span class="pl-k">for</span>(j<span class="pl-k">=</span><span class="pl-c1">0</span>;j<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-smi">pointCount</span>;j<span class="pl-k">++</span>){o<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">points</span>[j];q<span class="pl-k">=</span><span class="pl-c1">C</span>.<span class="pl-c1">x</span><span class="pl-k">-</span>t<span class="pl-k">*</span><span class="pl-smi">o</span>.<span class="pl-smi">rB</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">x</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>v<span class="pl-k">*</span><span class="pl-smi">o</span>.<span class="pl-smi">rA</span>.<span class="pl-c1">y</span>;n<span class="pl-k">=</span><span class="pl-c1">C</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>t<span class="pl-k">*</span><span class="pl-smi">o</span>.<span class="pl-smi">rB</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">x</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>v<span class="pl-k">*</span><span class="pl-smi">o</span>.<span class="pl-smi">rA</span>.<span class="pl-c1">x</span>;q<span class="pl-k">=</span>q<span class="pl-k">*</span>$<span class="pl-k">+</span>n<span class="pl-k">*</span>f;q<span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">tangentMass</span><span class="pl-k">*-</span>q;n<span class="pl-k">=</span>g<span class="pl-k">*</span><span class="pl-smi">o</span>.<span class="pl-smi">normalImpulse</span>;n<span class="pl-k">=</span><span class="pl-c1">R</span>.<span class="pl-en">Clamp</span>(<span class="pl-smi">o</span>.<span class="pl-smi">tangentImpulse</span><span class="pl-k">+</span>q,<span class="pl-k">-</span>n,n);q<span class="pl-k">=</span>n<span class="pl-k">-</span><span class="pl-smi">o</span>.<span class="pl-smi">tangentImpulse</span>;c<span class="pl-k">=</span>q<span class="pl-k">*</span>$;q<span class="pl-k">=</span>q<span class="pl-k">*</span>f;<span class="pl-smi">x</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span><span class="pl-c1">J</span><span class="pl-k">*</span>c;<span class="pl-smi">x</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span><span class="pl-c1">J</span><span class="pl-k">*</span>q;v<span class="pl-k">-=</span><span class="pl-c1">T</span><span class="pl-k">*</span>(<span class="pl-smi">o</span>.<span class="pl-smi">rA</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>q<span class="pl-k">-</span><span class="pl-smi">o</span>.<span class="pl-smi">rA</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>c);<span class="pl-c1">C</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-c1">P</span><span class="pl-k">*</span>c;<span class="pl-c1">C</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-c1">P</span><span class="pl-k">*</span>q;t<span class="pl-k">+=</span><span class="pl-c1">X</span><span class="pl-k">*</span>(<span class="pl-smi">o</span>.<span class="pl-smi">rB</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>q<span class="pl-k">-</span><span class="pl-smi">o</span>.<span class="pl-smi">rB</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>c);<span class="pl-smi">o</span>.<span class="pl-smi">tangentImpulse</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L270" class="blob-num js-line-number" data-line-number="270"></td>
        <td id="LC270" class="blob-code blob-code-inner js-file-line">n}<span class="pl-c1">parseInt</span>(<span class="pl-smi">a</span>.<span class="pl-smi">pointCount</span>);<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">pointCount</span><span class="pl-k">==</span><span class="pl-c1">1</span>){o<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">points</span>[<span class="pl-c1">0</span>];q<span class="pl-k">=</span><span class="pl-c1">C</span>.<span class="pl-c1">x</span><span class="pl-k">+-</span>t<span class="pl-k">*</span><span class="pl-smi">o</span>.<span class="pl-smi">rB</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">x</span>.<span class="pl-c1">x</span><span class="pl-k">-</span> <span class="pl-k">-</span>v<span class="pl-k">*</span><span class="pl-smi">o</span>.<span class="pl-smi">rA</span>.<span class="pl-c1">y</span>;n<span class="pl-k">=</span><span class="pl-c1">C</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>t<span class="pl-k">*</span><span class="pl-smi">o</span>.<span class="pl-smi">rB</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">x</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>v<span class="pl-k">*</span><span class="pl-smi">o</span>.<span class="pl-smi">rA</span>.<span class="pl-c1">x</span>;a<span class="pl-k">=</span>q<span class="pl-k">*</span>b<span class="pl-k">+</span>n<span class="pl-k">*</span>e;q<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-smi">o</span>.<span class="pl-smi">normalMass</span><span class="pl-k">*</span>(a<span class="pl-k">-</span><span class="pl-smi">o</span>.<span class="pl-smi">velocityBias</span>);n<span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">normalImpulse</span><span class="pl-k">+</span>q;n<span class="pl-k">=</span>n<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">?</span>n<span class="pl-k">:</span><span class="pl-c1">0</span>;q<span class="pl-k">=</span>n<span class="pl-k">-</span><span class="pl-smi">o</span>.<span class="pl-smi">normalImpulse</span>;c<span class="pl-k">=</span>q<span class="pl-k">*</span>b;q<span class="pl-k">=</span>q<span class="pl-k">*</span>e;<span class="pl-smi">x</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span><span class="pl-c1">J</span><span class="pl-k">*</span>c;<span class="pl-smi">x</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span><span class="pl-c1">J</span><span class="pl-k">*</span>q;v<span class="pl-k">-=</span><span class="pl-c1">T</span><span class="pl-k">*</span>(<span class="pl-smi">o</span>.<span class="pl-smi">rA</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>q<span class="pl-k">-</span><span class="pl-smi">o</span>.<span class="pl-smi">rA</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>c);<span class="pl-c1">C</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-c1">P</span><span class="pl-k">*</span>c;<span class="pl-c1">C</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-c1">P</span><span class="pl-k">*</span>q;t<span class="pl-k">+=</span><span class="pl-c1">X</span><span class="pl-k">*</span>(<span class="pl-smi">o</span>.<span class="pl-smi">rB</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>q<span class="pl-k">-</span><span class="pl-smi">o</span>.<span class="pl-smi">rB</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>c);<span class="pl-smi">o</span>.<span class="pl-smi">normalImpulse</span><span class="pl-k">=</span>n}<span class="pl-k">else</span>{o<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">points</span>[<span class="pl-c1">0</span>];j<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">points</span>[<span class="pl-c1">1</span>];q<span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">normalImpulse</span>;g<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">normalImpulse</span>;<span class="pl-k">var</span> ba<span class="pl-k">=</span>(<span class="pl-c1">C</span>.<span class="pl-c1">x</span><span class="pl-k">-</span>t<span class="pl-k">*</span><span class="pl-smi">o</span>.<span class="pl-smi">rB</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">x</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>v<span class="pl-k">*</span><span class="pl-smi">o</span>.<span class="pl-smi">rA</span>.<span class="pl-c1">y</span>)<span class="pl-k">*</span>b<span class="pl-k">+</span>(<span class="pl-c1">C</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>t<span class="pl-k">*</span><span class="pl-smi">o</span>.<span class="pl-smi">rB</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">x</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>v<span class="pl-k">*</span><span class="pl-smi">o</span>.<span class="pl-smi">rA</span>.<span class="pl-c1">x</span>)<span class="pl-k">*</span>e,ca<span class="pl-k">=</span>(<span class="pl-c1">C</span>.<span class="pl-c1">x</span><span class="pl-k">-</span>t<span class="pl-k">*</span><span class="pl-smi">j</span>.<span class="pl-smi">rB</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">x</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>v<span class="pl-k">*</span><span class="pl-smi">j</span>.<span class="pl-smi">rA</span>.<span class="pl-c1">y</span>)<span class="pl-k">*</span>b<span class="pl-k">+</span>(<span class="pl-c1">C</span>.<span class="pl-c1">y</span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L271" class="blob-num js-line-number" data-line-number="271"></td>
        <td id="LC271" class="blob-code blob-code-inner js-file-line">t<span class="pl-k">*</span><span class="pl-smi">j</span>.<span class="pl-smi">rB</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">x</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>v<span class="pl-k">*</span><span class="pl-smi">j</span>.<span class="pl-smi">rA</span>.<span class="pl-c1">x</span>)<span class="pl-k">*</span>e;n<span class="pl-k">=</span>ba<span class="pl-k">-</span><span class="pl-smi">o</span>.<span class="pl-smi">velocityBias</span>;c<span class="pl-k">=</span>ca<span class="pl-k">-</span><span class="pl-smi">j</span>.<span class="pl-smi">velocityBias</span>;f<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">K</span>;n<span class="pl-k">-=</span><span class="pl-smi">f</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>q<span class="pl-k">+</span><span class="pl-smi">f</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>g;<span class="pl-k">for</span>(c<span class="pl-k">-=</span><span class="pl-smi">f</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>q<span class="pl-k">+</span><span class="pl-smi">f</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>g;;){f<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">normalMass</span>;$<span class="pl-k">=</span><span class="pl-k">-</span>(<span class="pl-smi">f</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>n<span class="pl-k">+</span><span class="pl-smi">f</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>c);f<span class="pl-k">=</span><span class="pl-k">-</span>(<span class="pl-smi">f</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>n<span class="pl-k">+</span><span class="pl-smi">f</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>c);<span class="pl-k">if</span>($<span class="pl-k">&gt;=</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>f<span class="pl-k">&gt;=</span><span class="pl-c1">0</span>){q<span class="pl-k">=</span>$<span class="pl-k">-</span>q;g<span class="pl-k">=</span>f<span class="pl-k">-</span>g;a<span class="pl-k">=</span>q<span class="pl-k">*</span>b;q<span class="pl-k">=</span>q<span class="pl-k">*</span>e;b<span class="pl-k">=</span>g<span class="pl-k">*</span>b;e<span class="pl-k">=</span>g<span class="pl-k">*</span>e;<span class="pl-smi">x</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span><span class="pl-c1">J</span><span class="pl-k">*</span>(a<span class="pl-k">+</span>b);<span class="pl-smi">x</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span><span class="pl-c1">J</span><span class="pl-k">*</span>(q<span class="pl-k">+</span>e);v<span class="pl-k">-=</span><span class="pl-c1">T</span><span class="pl-k">*</span>(<span class="pl-smi">o</span>.<span class="pl-smi">rA</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>q<span class="pl-k">-</span><span class="pl-smi">o</span>.<span class="pl-smi">rA</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-smi">j</span>.<span class="pl-smi">rA</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>e<span class="pl-k">-</span><span class="pl-smi">j</span>.<span class="pl-smi">rA</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>b);<span class="pl-c1">C</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-c1">P</span><span class="pl-k">*</span>(a<span class="pl-k">+</span>b);<span class="pl-c1">C</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-c1">P</span><span class="pl-k">*</span>(q<span class="pl-k">+</span>e);t<span class="pl-k">+=</span><span class="pl-c1">X</span><span class="pl-k">*</span>(<span class="pl-smi">o</span>.<span class="pl-smi">rB</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>q<span class="pl-k">-</span><span class="pl-smi">o</span>.<span class="pl-smi">rB</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-smi">j</span>.<span class="pl-smi">rB</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>e<span class="pl-k">-</span><span class="pl-smi">j</span>.<span class="pl-smi">rB</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>b);<span class="pl-smi">o</span>.<span class="pl-smi">normalImpulse</span><span class="pl-k">=</span>$;<span class="pl-smi">j</span>.<span class="pl-smi">normalImpulse</span><span class="pl-k">=</span>f;<span class="pl-k">break</span>}$<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-smi">o</span>.<span class="pl-smi">normalMass</span><span class="pl-k">*</span>n;f<span class="pl-k">=</span><span class="pl-c1">0</span>;ca<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">K</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>$<span class="pl-k">+</span>c;<span class="pl-k">if</span>($<span class="pl-k">&gt;=</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>ca<span class="pl-k">&gt;=</span><span class="pl-c1">0</span>){q<span class="pl-k">=</span>$<span class="pl-k">-</span>q;g<span class="pl-k">=</span>f<span class="pl-k">-</span>g;a<span class="pl-k">=</span>q<span class="pl-k">*</span>b;</td>
      </tr>
      <tr>
        <td id="L272" class="blob-num js-line-number" data-line-number="272"></td>
        <td id="LC272" class="blob-code blob-code-inner js-file-line">q<span class="pl-k">=</span>q<span class="pl-k">*</span>e;b<span class="pl-k">=</span>g<span class="pl-k">*</span>b;e<span class="pl-k">=</span>g<span class="pl-k">*</span>e;<span class="pl-smi">x</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span><span class="pl-c1">J</span><span class="pl-k">*</span>(a<span class="pl-k">+</span>b);<span class="pl-smi">x</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span><span class="pl-c1">J</span><span class="pl-k">*</span>(q<span class="pl-k">+</span>e);v<span class="pl-k">-=</span><span class="pl-c1">T</span><span class="pl-k">*</span>(<span class="pl-smi">o</span>.<span class="pl-smi">rA</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>q<span class="pl-k">-</span><span class="pl-smi">o</span>.<span class="pl-smi">rA</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-smi">j</span>.<span class="pl-smi">rA</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>e<span class="pl-k">-</span><span class="pl-smi">j</span>.<span class="pl-smi">rA</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>b);<span class="pl-c1">C</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-c1">P</span><span class="pl-k">*</span>(a<span class="pl-k">+</span>b);<span class="pl-c1">C</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-c1">P</span><span class="pl-k">*</span>(q<span class="pl-k">+</span>e);t<span class="pl-k">+=</span><span class="pl-c1">X</span><span class="pl-k">*</span>(<span class="pl-smi">o</span>.<span class="pl-smi">rB</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>q<span class="pl-k">-</span><span class="pl-smi">o</span>.<span class="pl-smi">rB</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-smi">j</span>.<span class="pl-smi">rB</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>e<span class="pl-k">-</span><span class="pl-smi">j</span>.<span class="pl-smi">rB</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>b);<span class="pl-smi">o</span>.<span class="pl-smi">normalImpulse</span><span class="pl-k">=</span>$;<span class="pl-smi">j</span>.<span class="pl-smi">normalImpulse</span><span class="pl-k">=</span>f;<span class="pl-k">break</span>}$<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-smi">j</span>.<span class="pl-smi">normalMass</span><span class="pl-k">*</span>c;ba<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">K</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>f<span class="pl-k">+</span>n;<span class="pl-k">if</span>(f<span class="pl-k">&gt;=</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>ba<span class="pl-k">&gt;=</span><span class="pl-c1">0</span>){q<span class="pl-k">=</span>$<span class="pl-k">-</span>q;g<span class="pl-k">=</span>f<span class="pl-k">-</span>g;a<span class="pl-k">=</span>q<span class="pl-k">*</span>b;q<span class="pl-k">=</span>q<span class="pl-k">*</span>e;b<span class="pl-k">=</span>g<span class="pl-k">*</span>b;e<span class="pl-k">=</span>g<span class="pl-k">*</span>e;<span class="pl-smi">x</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span><span class="pl-c1">J</span><span class="pl-k">*</span>(a<span class="pl-k">+</span>b);<span class="pl-smi">x</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span><span class="pl-c1">J</span><span class="pl-k">*</span>(q<span class="pl-k">+</span>e);v<span class="pl-k">-=</span><span class="pl-c1">T</span><span class="pl-k">*</span>(<span class="pl-smi">o</span>.<span class="pl-smi">rA</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>q<span class="pl-k">-</span><span class="pl-smi">o</span>.<span class="pl-smi">rA</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-smi">j</span>.<span class="pl-smi">rA</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>e<span class="pl-k">-</span><span class="pl-smi">j</span>.<span class="pl-smi">rA</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>b);<span class="pl-c1">C</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-c1">P</span><span class="pl-k">*</span>(a<span class="pl-k">+</span>b);<span class="pl-c1">C</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-c1">P</span><span class="pl-k">*</span>(q<span class="pl-k">+</span>e);t<span class="pl-k">+=</span><span class="pl-c1">X</span><span class="pl-k">*</span>(<span class="pl-smi">o</span>.<span class="pl-smi">rB</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>q<span class="pl-k">-</span><span class="pl-smi">o</span>.<span class="pl-smi">rB</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-smi">j</span>.<span class="pl-smi">rB</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>e<span class="pl-k">-</span><span class="pl-smi">j</span>.<span class="pl-smi">rB</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>b);<span class="pl-smi">o</span>.<span class="pl-smi">normalImpulse</span><span class="pl-k">=</span>$;<span class="pl-smi">j</span>.<span class="pl-smi">normalImpulse</span><span class="pl-k">=</span>f;<span class="pl-k">break</span>}f<span class="pl-k">=</span>$<span class="pl-k">=</span><span class="pl-c1">0</span>;ba<span class="pl-k">=</span>n;ca<span class="pl-k">=</span>c;<span class="pl-k">if</span>(ba<span class="pl-k">&gt;=</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>ca<span class="pl-k">&gt;=</span><span class="pl-c1">0</span>){q<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L273" class="blob-num js-line-number" data-line-number="273"></td>
        <td id="LC273" class="blob-code blob-code-inner js-file-line">$<span class="pl-k">-</span>q;g<span class="pl-k">=</span>f<span class="pl-k">-</span>g;a<span class="pl-k">=</span>q<span class="pl-k">*</span>b;q<span class="pl-k">=</span>q<span class="pl-k">*</span>e;b<span class="pl-k">=</span>g<span class="pl-k">*</span>b;e<span class="pl-k">=</span>g<span class="pl-k">*</span>e;<span class="pl-smi">x</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span><span class="pl-c1">J</span><span class="pl-k">*</span>(a<span class="pl-k">+</span>b);<span class="pl-smi">x</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span><span class="pl-c1">J</span><span class="pl-k">*</span>(q<span class="pl-k">+</span>e);v<span class="pl-k">-=</span><span class="pl-c1">T</span><span class="pl-k">*</span>(<span class="pl-smi">o</span>.<span class="pl-smi">rA</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>q<span class="pl-k">-</span><span class="pl-smi">o</span>.<span class="pl-smi">rA</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-smi">j</span>.<span class="pl-smi">rA</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>e<span class="pl-k">-</span><span class="pl-smi">j</span>.<span class="pl-smi">rA</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>b);<span class="pl-c1">C</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-c1">P</span><span class="pl-k">*</span>(a<span class="pl-k">+</span>b);<span class="pl-c1">C</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-c1">P</span><span class="pl-k">*</span>(q<span class="pl-k">+</span>e);t<span class="pl-k">+=</span><span class="pl-c1">X</span><span class="pl-k">*</span>(<span class="pl-smi">o</span>.<span class="pl-smi">rB</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>q<span class="pl-k">-</span><span class="pl-smi">o</span>.<span class="pl-smi">rB</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-smi">j</span>.<span class="pl-smi">rB</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>e<span class="pl-k">-</span><span class="pl-smi">j</span>.<span class="pl-smi">rB</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>b);<span class="pl-smi">o</span>.<span class="pl-smi">normalImpulse</span><span class="pl-k">=</span>$;<span class="pl-smi">j</span>.<span class="pl-smi">normalImpulse</span><span class="pl-k">=</span>f;<span class="pl-k">break</span>}<span class="pl-k">break</span>}}<span class="pl-smi">r</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">=</span>v;<span class="pl-smi">s</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">=</span>t}};<span class="pl-c1">L</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">FinalizeVelocityConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> j<span class="pl-k">=</span><span class="pl-c1">0</span>;j<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_constraintCount</span>;<span class="pl-k">++</span>j)<span class="pl-k">for</span>(<span class="pl-k">var</span> o<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_constraints</span>[j],q<span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">manifold</span>,n<span class="pl-k">=</span><span class="pl-c1">0</span>;n<span class="pl-k">&lt;</span><span class="pl-smi">o</span>.<span class="pl-smi">pointCount</span>;<span class="pl-k">++</span>n){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-smi">q</span>.<span class="pl-smi">m_points</span>[n],c<span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">points</span>[n];<span class="pl-smi">a</span>.<span class="pl-smi">m_normalImpulse</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">normalImpulse</span>;<span class="pl-smi">a</span>.<span class="pl-smi">m_tangentImpulse</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L274" class="blob-num js-line-number" data-line-number="274"></td>
        <td id="LC274" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">c</span>.<span class="pl-smi">tangentImpulse</span>}};<span class="pl-c1">L</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolvePositionConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">j</span>){<span class="pl-k">if</span>(j<span class="pl-k">===</span><span class="pl-c1">undefined</span>)j<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> o<span class="pl-k">=</span><span class="pl-c1">0</span>,q<span class="pl-k">=</span><span class="pl-c1">0</span>;q<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_constraintCount</span>;q<span class="pl-k">++</span>){<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_constraints</span>[q],a<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">bodyA</span>,c<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">bodyB</span>,g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">m_mass</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">m_invMass</span>,b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">m_mass</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">m_invI</span>,e<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">m_mass</span><span class="pl-k">*</span><span class="pl-smi">c</span>.<span class="pl-smi">m_invMass</span>,f<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">m_mass</span><span class="pl-k">*</span><span class="pl-smi">c</span>.<span class="pl-smi">m_invI</span>;<span class="pl-c1">L</span>.<span class="pl-smi">s_psm</span>.<span class="pl-en">Initialize</span>(n);<span class="pl-k">for</span>(<span class="pl-k">var</span> m<span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-smi">s_psm</span>.<span class="pl-smi">m_normal</span>,r<span class="pl-k">=</span><span class="pl-c1">0</span>;r<span class="pl-k">&lt;</span><span class="pl-smi">n</span>.<span class="pl-smi">pointCount</span>;r<span class="pl-k">++</span>){<span class="pl-k">var</span> s<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">points</span>[r],v<span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-smi">s_psm</span>.<span class="pl-smi">m_points</span>[r],t<span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-smi">s_psm</span>.<span class="pl-smi">m_separations</span>[r],x<span class="pl-k">=</span><span class="pl-smi">v</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span>,<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-smi">v</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span>,<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-smi">v</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">c</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span>;v<span class="pl-k">=</span><span class="pl-smi">v</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">c</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span>;o<span class="pl-k">=</span>o<span class="pl-k">&lt;</span>t<span class="pl-k">?</span>o<span class="pl-k">:</span>t;t<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L275" class="blob-num js-line-number" data-line-number="275"></td>
        <td id="LC275" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">R</span>.<span class="pl-en">Clamp</span>(j<span class="pl-k">*</span>(t<span class="pl-k">+</span><span class="pl-c1">O</span>.<span class="pl-smi">b2_linearSlop</span>),<span class="pl-k">-</span><span class="pl-c1">O</span>.<span class="pl-smi">b2_maxLinearCorrection</span>,<span class="pl-c1">0</span>);t<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-smi">s</span>.<span class="pl-smi">equalizedMass</span><span class="pl-k">*</span>t;s<span class="pl-k">=</span>t<span class="pl-k">*</span><span class="pl-smi">m</span>.<span class="pl-c1">x</span>;t<span class="pl-k">=</span>t<span class="pl-k">*</span><span class="pl-smi">m</span>.<span class="pl-c1">y</span>;<span class="pl-smi">a</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span>g<span class="pl-k">*</span>s;<span class="pl-smi">a</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span>g<span class="pl-k">*</span>t;<span class="pl-smi">a</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a</span><span class="pl-k">-=</span>b<span class="pl-k">*</span>(x<span class="pl-k">*</span>t<span class="pl-k">-</span><span class="pl-c1">C</span><span class="pl-k">*</span>s);<span class="pl-smi">a</span>.<span class="pl-en">SynchronizeTransform</span>();<span class="pl-smi">c</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span>e<span class="pl-k">*</span>s;<span class="pl-smi">c</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span>e<span class="pl-k">*</span>t;<span class="pl-smi">c</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a</span><span class="pl-k">+=</span>f<span class="pl-k">*</span>(<span class="pl-c1">J</span><span class="pl-k">*</span>t<span class="pl-k">-</span>v<span class="pl-k">*</span>s);<span class="pl-smi">c</span>.<span class="pl-en">SynchronizeTransform</span>()}}<span class="pl-k">return</span> o<span class="pl-k">&gt;</span><span class="pl-k">-</span><span class="pl-c1">1.5</span><span class="pl-k">*</span><span class="pl-c1">O</span>.<span class="pl-smi">b2_linearSlop</span>};<span class="pl-smi">Box2D</span>.<span class="pl-smi">postDefs</span>.<span class="pl-c1">push</span>(<span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2ContactSolver</span>.<span class="pl-smi">s_worldManifold</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">l</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2ContactSolver</span>.<span class="pl-smi">s_psm</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">u</span>});<span class="pl-smi">Box2D</span>.<span class="pl-en">inherit</span>(<span class="pl-c1">I</span>,<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2Contact</span>);</td>
      </tr>
      <tr>
        <td id="L276" class="blob-num js-line-number" data-line-number="276"></td>
        <td id="LC276" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">I</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">__super</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2Contact</span>.<span class="pl-c1">prototype</span>;<span class="pl-c1">I</span>.<span class="pl-en">b2EdgeAndCircleContact</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2Contact</span>.<span class="pl-smi">b2Contact</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>)};<span class="pl-c1">I</span>.<span class="pl-en">Create</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">I</span>};<span class="pl-c1">I</span>.<span class="pl-en">Destroy</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">I</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Reset</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">j</span>,<span class="pl-smi">o</span>){<span class="pl-c1">this</span>.<span class="pl-smi">__super</span>.<span class="pl-smi">Reset</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,j,o)};<span class="pl-c1">I</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Evaluate</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> j<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureA</span>.<span class="pl-en">GetBody</span>(),o<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureB</span>.<span class="pl-en">GetBody</span>();<span class="pl-c1">this</span>.<span class="pl-en">b2CollideEdgeAndCircle</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_manifold</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureA</span>.<span class="pl-en">GetShape</span>()<span class="pl-k">instanceof</span> <span class="pl-c1">G</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureA</span>.<span class="pl-en">GetShape</span>()<span class="pl-k">:</span><span class="pl-c1">null</span>,<span class="pl-smi">j</span>.<span class="pl-smi">m_xf</span>,</td>
      </tr>
      <tr>
        <td id="L277" class="blob-num js-line-number" data-line-number="277"></td>
        <td id="LC277" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureB</span>.<span class="pl-en">GetShape</span>()<span class="pl-k">instanceof</span> <span class="pl-c1">F</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureB</span>.<span class="pl-en">GetShape</span>()<span class="pl-k">:</span><span class="pl-c1">null</span>,<span class="pl-smi">o</span>.<span class="pl-smi">m_xf</span>)};<span class="pl-c1">I</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2CollideEdgeAndCircle</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-smi">Box2D</span>.<span class="pl-en">inherit</span>(<span class="pl-c1">W</span>,<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2Contact</span>);<span class="pl-c1">W</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">__super</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2Contact</span>.<span class="pl-c1">prototype</span>;<span class="pl-c1">W</span>.<span class="pl-en">b2NullContact</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2Contact</span>.<span class="pl-smi">b2Contact</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>)};<span class="pl-c1">W</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2NullContact</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">__super</span>.<span class="pl-smi">b2Contact</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>)};<span class="pl-c1">W</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Evaluate</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-smi">Box2D</span>.<span class="pl-en">inherit</span>(<span class="pl-c1">Y</span>,<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2Contact</span>);<span class="pl-c1">Y</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">__super</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L278" class="blob-num js-line-number" data-line-number="278"></td>
        <td id="LC278" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2Contact</span>.<span class="pl-c1">prototype</span>;<span class="pl-c1">Y</span>.<span class="pl-en">b2PolyAndCircleContact</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2Contact</span>.<span class="pl-smi">b2Contact</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>)};<span class="pl-c1">Y</span>.<span class="pl-en">Create</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">Y</span>};<span class="pl-c1">Y</span>.<span class="pl-en">Destroy</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">Y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Reset</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">j</span>,<span class="pl-smi">o</span>){<span class="pl-c1">this</span>.<span class="pl-smi">__super</span>.<span class="pl-smi">Reset</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,j,o);<span class="pl-c1">O</span>.<span class="pl-en">b2Assert</span>(<span class="pl-smi">j</span>.<span class="pl-en">GetType</span>()<span class="pl-k">==</span><span class="pl-smi">y</span>.<span class="pl-smi">e_polygonShape</span>);<span class="pl-c1">O</span>.<span class="pl-en">b2Assert</span>(<span class="pl-smi">o</span>.<span class="pl-en">GetType</span>()<span class="pl-k">==</span><span class="pl-smi">y</span>.<span class="pl-smi">e_circleShape</span>)};<span class="pl-c1">Y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Evaluate</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> j<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureA</span>.<span class="pl-smi">m_body</span>,o<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureB</span>.<span class="pl-smi">m_body</span>;<span class="pl-c1">S</span>.<span class="pl-en">CollidePolygonAndCircle</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_manifold</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureA</span>.<span class="pl-en">GetShape</span>()<span class="pl-k">instanceof</span></td>
      </tr>
      <tr>
        <td id="L279" class="blob-num js-line-number" data-line-number="279"></td>
        <td id="LC279" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">K</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureA</span>.<span class="pl-en">GetShape</span>()<span class="pl-k">:</span><span class="pl-c1">null</span>,<span class="pl-smi">j</span>.<span class="pl-smi">m_xf</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureB</span>.<span class="pl-en">GetShape</span>()<span class="pl-k">instanceof</span> <span class="pl-c1">F</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureB</span>.<span class="pl-en">GetShape</span>()<span class="pl-k">:</span><span class="pl-c1">null</span>,<span class="pl-smi">o</span>.<span class="pl-smi">m_xf</span>)};<span class="pl-smi">Box2D</span>.<span class="pl-en">inherit</span>(k,<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2Contact</span>);<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">__super</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2Contact</span>.<span class="pl-c1">prototype</span>;<span class="pl-smi">k</span>.<span class="pl-en">b2PolyAndEdgeContact</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2Contact</span>.<span class="pl-smi">b2Contact</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>)};<span class="pl-smi">k</span>.<span class="pl-en">Create</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">k</span>};<span class="pl-smi">k</span>.<span class="pl-en">Destroy</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Reset</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">j</span>,<span class="pl-smi">o</span>){<span class="pl-c1">this</span>.<span class="pl-smi">__super</span>.<span class="pl-smi">Reset</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,j,o);<span class="pl-c1">O</span>.<span class="pl-en">b2Assert</span>(<span class="pl-smi">j</span>.<span class="pl-en">GetType</span>()<span class="pl-k">==</span><span class="pl-smi">y</span>.<span class="pl-smi">e_polygonShape</span>);</td>
      </tr>
      <tr>
        <td id="L280" class="blob-num js-line-number" data-line-number="280"></td>
        <td id="LC280" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">O</span>.<span class="pl-en">b2Assert</span>(<span class="pl-smi">o</span>.<span class="pl-en">GetType</span>()<span class="pl-k">==</span><span class="pl-smi">y</span>.<span class="pl-smi">e_edgeShape</span>)};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Evaluate</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> j<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureA</span>.<span class="pl-en">GetBody</span>(),o<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureB</span>.<span class="pl-en">GetBody</span>();<span class="pl-c1">this</span>.<span class="pl-en">b2CollidePolyAndEdge</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_manifold</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureA</span>.<span class="pl-en">GetShape</span>()<span class="pl-k">instanceof</span> <span class="pl-c1">K</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureA</span>.<span class="pl-en">GetShape</span>()<span class="pl-k">:</span><span class="pl-c1">null</span>,<span class="pl-smi">j</span>.<span class="pl-smi">m_xf</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureB</span>.<span class="pl-en">GetShape</span>()<span class="pl-k">instanceof</span> <span class="pl-c1">G</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureB</span>.<span class="pl-en">GetShape</span>()<span class="pl-k">:</span><span class="pl-c1">null</span>,<span class="pl-smi">o</span>.<span class="pl-smi">m_xf</span>)};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2CollidePolyAndEdge</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-smi">Box2D</span>.<span class="pl-en">inherit</span>(z,<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2Contact</span>);<span class="pl-smi">z</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">__super</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2Contact</span>.<span class="pl-c1">prototype</span>;<span class="pl-smi">z</span>.<span class="pl-smi">b2PolygonContact</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L281" class="blob-num js-line-number" data-line-number="281"></td>
        <td id="LC281" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2Contact</span>.<span class="pl-smi">b2Contact</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>)};<span class="pl-smi">z</span>.<span class="pl-en">Create</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">z</span>};<span class="pl-smi">z</span>.<span class="pl-en">Destroy</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-smi">z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Reset</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">j</span>,<span class="pl-smi">o</span>){<span class="pl-c1">this</span>.<span class="pl-smi">__super</span>.<span class="pl-smi">Reset</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,j,o)};<span class="pl-smi">z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Evaluate</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> j<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureA</span>.<span class="pl-en">GetBody</span>(),o<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureB</span>.<span class="pl-en">GetBody</span>();<span class="pl-c1">S</span>.<span class="pl-en">CollidePolygons</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_manifold</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureA</span>.<span class="pl-en">GetShape</span>()<span class="pl-k">instanceof</span> <span class="pl-c1">K</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureA</span>.<span class="pl-en">GetShape</span>()<span class="pl-k">:</span><span class="pl-c1">null</span>,<span class="pl-smi">j</span>.<span class="pl-smi">m_xf</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureB</span>.<span class="pl-en">GetShape</span>()<span class="pl-k">instanceof</span> <span class="pl-c1">K</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">m_fixtureB</span>.<span class="pl-en">GetShape</span>()<span class="pl-k">:</span><span class="pl-c1">null</span>,<span class="pl-smi">o</span>.<span class="pl-smi">m_xf</span>)};<span class="pl-smi">u</span>.<span class="pl-smi">b2PositionSolverManifold</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L282" class="blob-num js-line-number" data-line-number="282"></td>
        <td id="LC282" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(){};<span class="pl-smi">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2PositionSolverManifold</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">m_normal</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">N</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_separations</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector_a2j_Number</span>(<span class="pl-c1">O</span>.<span class="pl-smi">b2_maxManifoldPoints</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_points</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>(<span class="pl-c1">O</span>.<span class="pl-smi">b2_maxManifoldPoints</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> j<span class="pl-k">=</span><span class="pl-c1">0</span>;j<span class="pl-k">&lt;</span><span class="pl-c1">O</span>.<span class="pl-smi">b2_maxManifoldPoints</span>;j<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-smi">m_points</span>[j]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">N</span>};<span class="pl-smi">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Initialize</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">j</span>){<span class="pl-c1">O</span>.<span class="pl-en">b2Assert</span>(<span class="pl-smi">j</span>.<span class="pl-smi">pointCount</span><span class="pl-k">&gt;</span><span class="pl-c1">0</span>);<span class="pl-k">var</span> o<span class="pl-k">=</span><span class="pl-c1">0</span>,q<span class="pl-k">=</span><span class="pl-c1">0</span>,n<span class="pl-k">=</span><span class="pl-c1">0</span>,a,c<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">switch</span>(<span class="pl-smi">j</span>.<span class="pl-c1">type</span>){<span class="pl-k">case</span> <span class="pl-c1">Z</span>.<span class="pl-smi">e_circles</span>:a<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">bodyA</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;n<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">localPoint</span>;o<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">bodyA</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-smi">a</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-c1">y</span>);q<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">bodyA</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-smi">a</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L283" class="blob-num js-line-number" data-line-number="283"></td>
        <td id="LC283" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">n</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-c1">y</span>);a<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">bodyB</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;n<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">points</span>[<span class="pl-c1">0</span>].<span class="pl-smi">localPoint</span>;c<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">bodyB</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-smi">a</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-c1">y</span>);a<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">bodyB</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-smi">a</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-c1">y</span>);n<span class="pl-k">=</span>c<span class="pl-k">-</span>o;g<span class="pl-k">=</span>a<span class="pl-k">-</span>q;<span class="pl-k">var</span> b<span class="pl-k">=</span>n<span class="pl-k">*</span>n<span class="pl-k">+</span>g<span class="pl-k">*</span>g;<span class="pl-k">if</span>(b<span class="pl-k">&gt;</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span><span class="pl-k">*</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>){b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(b);<span class="pl-c1">this</span>.<span class="pl-smi">m_normal</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>n<span class="pl-k">/</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">m_normal</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>g<span class="pl-k">/</span>b}<span class="pl-k">else</span>{<span class="pl-c1">this</span>.<span class="pl-smi">m_normal</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_normal</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>}<span class="pl-c1">this</span>.<span class="pl-smi">m_points</span>[<span class="pl-c1">0</span>].<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(o<span class="pl-k">+</span>c);<span class="pl-c1">this</span>.<span class="pl-smi">m_points</span>[<span class="pl-c1">0</span>].<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(q<span class="pl-k">+</span>a);<span class="pl-c1">this</span>.<span class="pl-smi">m_separations</span>[<span class="pl-c1">0</span>]<span class="pl-k">=</span>n<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_normal</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>g<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_normal</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">j</span>.<span class="pl-smi">radius</span>;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">Z</span>.<span class="pl-smi">e_faceA</span>:a<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">bodyA</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;n<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">localPlaneNormal</span>;</td>
      </tr>
      <tr>
        <td id="L284" class="blob-num js-line-number" data-line-number="284"></td>
        <td id="LC284" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_normal</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_normal</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-c1">y</span>;a<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">bodyA</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;n<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">localPoint</span>;c<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">bodyA</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-smi">a</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-c1">y</span>);g<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">bodyA</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-smi">a</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-c1">y</span>);a<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">bodyB</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;<span class="pl-k">for</span>(o<span class="pl-k">=</span><span class="pl-c1">0</span>;o<span class="pl-k">&lt;</span><span class="pl-smi">j</span>.<span class="pl-smi">pointCount</span>;<span class="pl-k">++</span>o){n<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">points</span>[o].<span class="pl-smi">localPoint</span>;q<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">bodyB</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-smi">a</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-c1">y</span>);n<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">bodyB</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-smi">a</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-c1">y</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_separations</span>[o]<span class="pl-k">=</span>(q<span class="pl-k">-</span>c)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_normal</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(n<span class="pl-k">-</span>g)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_normal</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">j</span>.<span class="pl-smi">radius</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_points</span>[o].<span class="pl-c1">x</span><span class="pl-k">=</span>q;<span class="pl-c1">this</span>.<span class="pl-smi">m_points</span>[o].<span class="pl-c1">y</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L285" class="blob-num js-line-number" data-line-number="285"></td>
        <td id="LC285" class="blob-code blob-code-inner js-file-line">n}<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">Z</span>.<span class="pl-smi">e_faceB</span>:a<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">bodyB</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;n<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">localPlaneNormal</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_normal</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_normal</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-c1">y</span>;a<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">bodyB</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;n<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">localPoint</span>;c<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">bodyB</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-smi">a</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-c1">y</span>);g<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">bodyB</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-smi">a</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-c1">y</span>);a<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">bodyA</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;<span class="pl-k">for</span>(o<span class="pl-k">=</span><span class="pl-c1">0</span>;o<span class="pl-k">&lt;</span><span class="pl-smi">j</span>.<span class="pl-smi">pointCount</span>;<span class="pl-k">++</span>o){n<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">points</span>[o].<span class="pl-smi">localPoint</span>;q<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">bodyA</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-smi">a</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-c1">y</span>);n<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">bodyA</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-smi">a</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-c1">y</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_separations</span>[o]<span class="pl-k">=</span>(q<span class="pl-k">-</span>c)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_normal</span>.<span class="pl-c1">x</span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L286" class="blob-num js-line-number" data-line-number="286"></td>
        <td id="LC286" class="blob-code blob-code-inner js-file-line">(n<span class="pl-k">-</span>g)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_normal</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">j</span>.<span class="pl-smi">radius</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_points</span>[o].<span class="pl-en">Set</span>(q,n)}<span class="pl-c1">this</span>.<span class="pl-smi">m_normal</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span><span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_normal</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span><span class="pl-k">-</span><span class="pl-c1">1</span>}};<span class="pl-smi">Box2D</span>.<span class="pl-smi">postDefs</span>.<span class="pl-c1">push</span>(<span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2PositionSolverManifold</span>.<span class="pl-smi">circlePointA</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">N</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Contacts</span>.<span class="pl-smi">b2PositionSolverManifold</span>.<span class="pl-smi">circlePointB</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">N</span>})})();</td>
      </tr>
      <tr>
        <td id="L287" class="blob-num js-line-number" data-line-number="287"></td>
        <td id="LC287" class="blob-code blob-code-inner js-file-line">(<span class="pl-k">function</span>(){<span class="pl-k">var</span> <span class="pl-c1">F</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">Math</span>.<span class="pl-smi">b2Mat22</span>,<span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">Math</span>.<span class="pl-smi">b2Math</span>,<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">Math</span>.<span class="pl-smi">b2Vec2</span>,y<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">b2Color</span>,w<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Controllers</span>.<span class="pl-smi">b2BuoyancyController</span>,<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Controllers</span>.<span class="pl-smi">b2ConstantAccelController</span>,<span class="pl-c1">U</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Controllers</span>.<span class="pl-smi">b2ConstantForceController</span>,p<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Controllers</span>.<span class="pl-smi">b2Controller</span>,<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Controllers</span>.<span class="pl-smi">b2ControllerEdge</span>,<span class="pl-c1">Q</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Controllers</span>.<span class="pl-smi">b2GravityController</span>,<span class="pl-c1">V</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Controllers</span>.<span class="pl-smi">b2TensorDampingController</span>;<span class="pl-smi">Box2D</span>.<span class="pl-en">inherit</span>(w,<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Controllers</span>.<span class="pl-smi">b2Controller</span>);</td>
      </tr>
      <tr>
        <td id="L288" class="blob-num js-line-number" data-line-number="288"></td>
        <td id="LC288" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">w</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">__super</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Controllers</span>.<span class="pl-smi">b2Controller</span>.<span class="pl-c1">prototype</span>;<span class="pl-smi">w</span>.<span class="pl-en">b2BuoyancyController</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Controllers</span>.<span class="pl-smi">b2Controller</span>.<span class="pl-smi">b2Controller</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>);<span class="pl-c1">this</span>.<span class="pl-smi">normal</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">K</span>(<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-c1">this</span>.<span class="pl-smi">density</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">offset</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">velocity</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">K</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-smi">linearDrag</span><span class="pl-k">=</span><span class="pl-c1">2</span>;<span class="pl-c1">this</span>.<span class="pl-smi">angularDrag</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">useDensity</span><span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-c1">this</span>.<span class="pl-smi">useWorldGravity</span><span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-c1">this</span>.<span class="pl-smi">gravity</span><span class="pl-k">=</span><span class="pl-c1">null</span>};<span class="pl-smi">w</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Step</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_bodyList</span>){<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">useWorldGravity</span>)<span class="pl-c1">this</span>.<span class="pl-smi">gravity</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">GetWorld</span>().<span class="pl-en">GetGravity</span>().<span class="pl-en">Copy</span>();<span class="pl-k">for</span>(<span class="pl-k">var</span> <span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyList</span>;<span class="pl-c1">M</span>;<span class="pl-c1">M</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L289" class="blob-num js-line-number" data-line-number="289"></td>
        <td id="LC289" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">M</span>.<span class="pl-smi">nextBody</span>){<span class="pl-k">var</span> <span class="pl-c1">L</span><span class="pl-k">=</span><span class="pl-c1">M</span>.<span class="pl-c1">body</span>;<span class="pl-k">if</span>(<span class="pl-c1">L</span>.<span class="pl-en">IsAwake</span>()<span class="pl-k">!=</span><span class="pl-c1">false</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> <span class="pl-c1">I</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">K</span>,<span class="pl-c1">W</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">K</span>,<span class="pl-c1">Y</span><span class="pl-k">=</span><span class="pl-c1">0</span>,k<span class="pl-k">=</span><span class="pl-c1">0</span>,z<span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-en">GetFixtureList</span>();z;z<span class="pl-k">=</span><span class="pl-smi">z</span>.<span class="pl-en">GetNext</span>()){<span class="pl-k">var</span> u<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">K</span>,<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-smi">z</span>.<span class="pl-en">GetShape</span>().<span class="pl-en">ComputeSubmergedArea</span>(<span class="pl-c1">this</span>.<span class="pl-smi">normal</span>,<span class="pl-c1">this</span>.<span class="pl-smi">offset</span>,<span class="pl-c1">L</span>.<span class="pl-en">GetTransform</span>(),u);<span class="pl-c1">Y</span><span class="pl-k">+=</span><span class="pl-c1">D</span>;<span class="pl-c1">I</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-c1">D</span><span class="pl-k">*</span><span class="pl-smi">u</span>.<span class="pl-c1">x</span>;<span class="pl-c1">I</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-c1">D</span><span class="pl-k">*</span><span class="pl-smi">u</span>.<span class="pl-c1">y</span>;<span class="pl-k">var</span> <span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-c1">1</span>;k<span class="pl-k">+=</span><span class="pl-c1">D</span><span class="pl-k">*</span><span class="pl-c1">H</span>;<span class="pl-c1">W</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-c1">D</span><span class="pl-k">*</span><span class="pl-smi">u</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">H</span>;<span class="pl-c1">W</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-c1">D</span><span class="pl-k">*</span><span class="pl-smi">u</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">H</span>}<span class="pl-c1">I</span>.<span class="pl-c1">x</span><span class="pl-k">/=</span><span class="pl-c1">Y</span>;<span class="pl-c1">I</span>.<span class="pl-c1">y</span><span class="pl-k">/=</span><span class="pl-c1">Y</span>;<span class="pl-c1">W</span>.<span class="pl-c1">x</span><span class="pl-k">/=</span>k;<span class="pl-c1">W</span>.<span class="pl-c1">y</span><span class="pl-k">/=</span>k;<span class="pl-k">if</span>(<span class="pl-k">!</span>(<span class="pl-c1">Y</span><span class="pl-k">&lt;</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>)){k<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">gravity</span>.<span class="pl-en">GetNegative</span>();<span class="pl-smi">k</span>.<span class="pl-en">Multiply</span>(<span class="pl-c1">this</span>.<span class="pl-smi">density</span><span class="pl-k">*</span><span class="pl-c1">Y</span>);<span class="pl-c1">L</span>.<span class="pl-en">ApplyForce</span>(k,<span class="pl-c1">W</span>);<span class="pl-c1">W</span><span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-en">GetLinearVelocityFromWorldPoint</span>(<span class="pl-c1">I</span>);<span class="pl-c1">W</span>.<span class="pl-en">Subtract</span>(<span class="pl-c1">this</span>.<span class="pl-smi">velocity</span>);<span class="pl-c1">W</span>.<span class="pl-en">Multiply</span>(<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">linearDrag</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L290" class="blob-num js-line-number" data-line-number="290"></td>
        <td id="LC290" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">Y</span>);<span class="pl-c1">L</span>.<span class="pl-en">ApplyForce</span>(<span class="pl-c1">W</span>,<span class="pl-c1">I</span>);<span class="pl-c1">L</span>.<span class="pl-en">ApplyTorque</span>(<span class="pl-k">-</span><span class="pl-c1">L</span>.<span class="pl-en">GetInertia</span>()<span class="pl-k">/</span><span class="pl-c1">L</span>.<span class="pl-en">GetMass</span>()<span class="pl-k">*</span><span class="pl-c1">Y</span><span class="pl-k">*</span><span class="pl-c1">L</span>.<span class="pl-en">GetAngularVelocity</span>()<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">angularDrag</span>)}}}}};<span class="pl-smi">w</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Draw</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-c1">M</span>){<span class="pl-k">var</span> <span class="pl-c1">L</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">K</span>,<span class="pl-c1">I</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">K</span>;<span class="pl-c1">L</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">normal</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">offset</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">normal</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">1E3</span>;<span class="pl-c1">L</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">normal</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">offset</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">normal</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">1E3</span>;<span class="pl-c1">I</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">normal</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">offset</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">normal</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">1E3</span>;<span class="pl-c1">I</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">normal</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">offset</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">normal</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">1E3</span>;<span class="pl-k">var</span> <span class="pl-c1">W</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">y</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-c1">M</span>.<span class="pl-en">DrawSegment</span>(<span class="pl-c1">L</span>,<span class="pl-c1">I</span>,<span class="pl-c1">W</span>)};<span class="pl-smi">Box2D</span>.<span class="pl-en">inherit</span>(<span class="pl-c1">A</span>,<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Controllers</span>.<span class="pl-smi">b2Controller</span>);<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">__super</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Controllers</span>.<span class="pl-smi">b2Controller</span>.<span class="pl-c1">prototype</span>;</td>
      </tr>
      <tr>
        <td id="L291" class="blob-num js-line-number" data-line-number="291"></td>
        <td id="LC291" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">A</span>.<span class="pl-en">b2ConstantAccelController</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Controllers</span>.<span class="pl-smi">b2Controller</span>.<span class="pl-smi">b2Controller</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>);<span class="pl-c1">this</span>.<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">K</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>)};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Step</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-c1">M</span>){<span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">K</span>(<span class="pl-c1">this</span>.<span class="pl-c1">A</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">M</span>.<span class="pl-smi">dt</span>,<span class="pl-c1">this</span>.<span class="pl-c1">A</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">M</span>.<span class="pl-smi">dt</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> <span class="pl-c1">L</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyList</span>;<span class="pl-c1">L</span>;<span class="pl-c1">L</span><span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-smi">nextBody</span>){<span class="pl-k">var</span> <span class="pl-c1">I</span><span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-c1">body</span>;<span class="pl-c1">I</span>.<span class="pl-en">IsAwake</span>()<span class="pl-k">&amp;&amp;</span><span class="pl-c1">I</span>.<span class="pl-en">SetLinearVelocity</span>(<span class="pl-k">new</span> <span class="pl-en">K</span>(<span class="pl-c1">I</span>.<span class="pl-en">GetLinearVelocity</span>().<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">M</span>.<span class="pl-c1">x</span>,<span class="pl-c1">I</span>.<span class="pl-en">GetLinearVelocity</span>().<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">M</span>.<span class="pl-c1">y</span>))}};<span class="pl-smi">Box2D</span>.<span class="pl-en">inherit</span>(<span class="pl-c1">U</span>,<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Controllers</span>.<span class="pl-smi">b2Controller</span>);<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">__super</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Controllers</span>.<span class="pl-smi">b2Controller</span>.<span class="pl-c1">prototype</span>;<span class="pl-c1">U</span>.<span class="pl-smi">b2ConstantForceController</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L292" class="blob-num js-line-number" data-line-number="292"></td>
        <td id="LC292" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Controllers</span>.<span class="pl-smi">b2Controller</span>.<span class="pl-smi">b2Controller</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>);<span class="pl-c1">this</span>.<span class="pl-c1">F</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">K</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>)};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Step</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> <span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyList</span>;<span class="pl-c1">M</span>;<span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-c1">M</span>.<span class="pl-smi">nextBody</span>){<span class="pl-k">var</span> <span class="pl-c1">L</span><span class="pl-k">=</span><span class="pl-c1">M</span>.<span class="pl-c1">body</span>;<span class="pl-c1">L</span>.<span class="pl-en">IsAwake</span>()<span class="pl-k">&amp;&amp;</span><span class="pl-c1">L</span>.<span class="pl-en">ApplyForce</span>(<span class="pl-c1">this</span>.<span class="pl-c1">F</span>,<span class="pl-c1">L</span>.<span class="pl-en">GetWorldCenter</span>())}};<span class="pl-smi">p</span>.<span class="pl-en">b2Controller</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-smi">p</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Step</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-smi">p</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Draw</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-smi">p</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">AddBody</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-c1">M</span>){<span class="pl-k">var</span> <span class="pl-c1">L</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">B</span>;<span class="pl-c1">L</span>.<span class="pl-smi">controller</span><span class="pl-k">=</span><span class="pl-c1">this</span>;<span class="pl-c1">L</span>.<span class="pl-c1">body</span><span class="pl-k">=</span><span class="pl-c1">M</span>;<span class="pl-c1">L</span>.<span class="pl-smi">nextBody</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyList</span>;<span class="pl-c1">L</span>.<span class="pl-smi">prevBody</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_bodyList</span><span class="pl-k">=</span><span class="pl-c1">L</span>;<span class="pl-k">if</span>(<span class="pl-c1">L</span>.<span class="pl-smi">nextBody</span>)<span class="pl-c1">L</span>.<span class="pl-smi">nextBody</span>.<span class="pl-smi">prevBody</span><span class="pl-k">=</span><span class="pl-c1">L</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_bodyCount</span><span class="pl-k">++</span>;</td>
      </tr>
      <tr>
        <td id="L293" class="blob-num js-line-number" data-line-number="293"></td>
        <td id="LC293" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">L</span>.<span class="pl-smi">nextController</span><span class="pl-k">=</span><span class="pl-c1">M</span>.<span class="pl-smi">m_controllerList</span>;<span class="pl-c1">L</span>.<span class="pl-smi">prevController</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">M</span>.<span class="pl-smi">m_controllerList</span><span class="pl-k">=</span><span class="pl-c1">L</span>;<span class="pl-k">if</span>(<span class="pl-c1">L</span>.<span class="pl-smi">nextController</span>)<span class="pl-c1">L</span>.<span class="pl-smi">nextController</span>.<span class="pl-smi">prevController</span><span class="pl-k">=</span><span class="pl-c1">L</span>;<span class="pl-c1">M</span>.<span class="pl-smi">m_controllerCount</span><span class="pl-k">++</span>};<span class="pl-smi">p</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">RemoveBody</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-c1">M</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> <span class="pl-c1">L</span><span class="pl-k">=</span><span class="pl-c1">M</span>.<span class="pl-smi">m_controllerList</span>;<span class="pl-c1">L</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">L</span>.<span class="pl-smi">controller</span><span class="pl-k">!=</span><span class="pl-c1">this</span>;)<span class="pl-c1">L</span><span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-smi">nextController</span>;<span class="pl-k">if</span>(<span class="pl-c1">L</span>.<span class="pl-smi">prevBody</span>)<span class="pl-c1">L</span>.<span class="pl-smi">prevBody</span>.<span class="pl-smi">nextBody</span><span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-smi">nextBody</span>;<span class="pl-k">if</span>(<span class="pl-c1">L</span>.<span class="pl-smi">nextBody</span>)<span class="pl-c1">L</span>.<span class="pl-smi">nextBody</span>.<span class="pl-smi">prevBody</span><span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-smi">prevBody</span>;<span class="pl-k">if</span>(<span class="pl-c1">L</span>.<span class="pl-smi">nextController</span>)<span class="pl-c1">L</span>.<span class="pl-smi">nextController</span>.<span class="pl-smi">prevController</span><span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-smi">prevController</span>;<span class="pl-k">if</span>(<span class="pl-c1">L</span>.<span class="pl-smi">prevController</span>)<span class="pl-c1">L</span>.<span class="pl-smi">prevController</span>.<span class="pl-smi">nextController</span><span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-smi">nextController</span>;<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_bodyList</span><span class="pl-k">==</span></td>
      </tr>
      <tr>
        <td id="L294" class="blob-num js-line-number" data-line-number="294"></td>
        <td id="LC294" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">L</span>)<span class="pl-c1">this</span>.<span class="pl-smi">m_bodyList</span><span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-smi">nextBody</span>;<span class="pl-k">if</span>(<span class="pl-c1">M</span>.<span class="pl-smi">m_controllerList</span><span class="pl-k">==</span><span class="pl-c1">L</span>)<span class="pl-c1">M</span>.<span class="pl-smi">m_controllerList</span><span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-smi">nextController</span>;<span class="pl-c1">M</span>.<span class="pl-smi">m_controllerCount</span><span class="pl-k">--</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_bodyCount</span><span class="pl-k">--</span>};<span class="pl-smi">p</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Clear</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(;<span class="pl-c1">this</span>.<span class="pl-smi">m_bodyList</span>;)<span class="pl-c1">this</span>.<span class="pl-en">RemoveBody</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_bodyList</span>.<span class="pl-c1">body</span>)};<span class="pl-smi">p</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetNext</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_next</span>};<span class="pl-smi">p</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetWorld</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_world</span>};<span class="pl-smi">p</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetBodyList</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_bodyList</span>};<span class="pl-c1">B</span>.<span class="pl-en">b2ControllerEdge</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-smi">Box2D</span>.<span class="pl-en">inherit</span>(<span class="pl-c1">Q</span>,<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Controllers</span>.<span class="pl-smi">b2Controller</span>);<span class="pl-c1">Q</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">__super</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Controllers</span>.<span class="pl-smi">b2Controller</span>.<span class="pl-c1">prototype</span>;</td>
      </tr>
      <tr>
        <td id="L295" class="blob-num js-line-number" data-line-number="295"></td>
        <td id="LC295" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">Q</span>.<span class="pl-en">b2GravityController</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Controllers</span>.<span class="pl-smi">b2Controller</span>.<span class="pl-smi">b2Controller</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>);<span class="pl-c1">this</span>.<span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">invSqr</span><span class="pl-k">=</span><span class="pl-c1">true</span>};<span class="pl-c1">Q</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Step</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> <span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-c1">null</span>,<span class="pl-c1">L</span><span class="pl-k">=</span><span class="pl-c1">null</span>,<span class="pl-c1">I</span><span class="pl-k">=</span><span class="pl-c1">null</span>,<span class="pl-c1">W</span><span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">Y</span><span class="pl-k">=</span><span class="pl-c1">null</span>,k<span class="pl-k">=</span><span class="pl-c1">null</span>,z<span class="pl-k">=</span><span class="pl-c1">null</span>,u<span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-c1">0</span>;u<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">invSqr</span>)<span class="pl-k">for</span>(<span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyList</span>;<span class="pl-c1">M</span>;<span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-c1">M</span>.<span class="pl-smi">nextBody</span>){<span class="pl-c1">L</span><span class="pl-k">=</span><span class="pl-c1">M</span>.<span class="pl-c1">body</span>;<span class="pl-c1">I</span><span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-en">GetWorldCenter</span>();<span class="pl-c1">W</span><span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-en">GetMass</span>();<span class="pl-k">for</span>(<span class="pl-c1">Y</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyList</span>;<span class="pl-c1">Y</span><span class="pl-k">!=</span><span class="pl-c1">M</span>;<span class="pl-c1">Y</span><span class="pl-k">=</span><span class="pl-c1">Y</span>.<span class="pl-smi">nextBody</span>){k<span class="pl-k">=</span><span class="pl-c1">Y</span>.<span class="pl-c1">body</span>;z<span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-en">GetWorldCenter</span>();u<span class="pl-k">=</span><span class="pl-smi">z</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">I</span>.<span class="pl-c1">x</span>;<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-smi">z</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">I</span>.<span class="pl-c1">y</span>;<span class="pl-c1">H</span><span class="pl-k">=</span>u<span class="pl-k">*</span>u<span class="pl-k">+</span><span class="pl-c1">D</span><span class="pl-k">*</span><span class="pl-c1">D</span>;<span class="pl-k">if</span>(<span class="pl-k">!</span>(<span class="pl-c1">H</span><span class="pl-k">&lt;</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>)){u<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">K</span>(u,<span class="pl-c1">D</span>);<span class="pl-smi">u</span>.<span class="pl-en">Multiply</span>(<span class="pl-c1">this</span>.<span class="pl-c1">G</span><span class="pl-k">/</span><span class="pl-c1">H</span><span class="pl-k">/</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">H</span>)<span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L296" class="blob-num js-line-number" data-line-number="296"></td>
        <td id="LC296" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">W</span><span class="pl-k">*</span><span class="pl-smi">k</span>.<span class="pl-en">GetMass</span>());<span class="pl-c1">L</span>.<span class="pl-en">IsAwake</span>()<span class="pl-k">&amp;&amp;</span><span class="pl-c1">L</span>.<span class="pl-en">ApplyForce</span>(u,<span class="pl-c1">I</span>);<span class="pl-smi">u</span>.<span class="pl-en">Multiply</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-smi">k</span>.<span class="pl-en">IsAwake</span>()<span class="pl-k">&amp;&amp;</span><span class="pl-smi">k</span>.<span class="pl-en">ApplyForce</span>(u,z)}}}<span class="pl-k">else</span> <span class="pl-k">for</span>(<span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyList</span>;<span class="pl-c1">M</span>;<span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-c1">M</span>.<span class="pl-smi">nextBody</span>){<span class="pl-c1">L</span><span class="pl-k">=</span><span class="pl-c1">M</span>.<span class="pl-c1">body</span>;<span class="pl-c1">I</span><span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-en">GetWorldCenter</span>();<span class="pl-c1">W</span><span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-en">GetMass</span>();<span class="pl-k">for</span>(<span class="pl-c1">Y</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyList</span>;<span class="pl-c1">Y</span><span class="pl-k">!=</span><span class="pl-c1">M</span>;<span class="pl-c1">Y</span><span class="pl-k">=</span><span class="pl-c1">Y</span>.<span class="pl-smi">nextBody</span>){k<span class="pl-k">=</span><span class="pl-c1">Y</span>.<span class="pl-c1">body</span>;z<span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-en">GetWorldCenter</span>();u<span class="pl-k">=</span><span class="pl-smi">z</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">I</span>.<span class="pl-c1">x</span>;<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-smi">z</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">I</span>.<span class="pl-c1">y</span>;<span class="pl-c1">H</span><span class="pl-k">=</span>u<span class="pl-k">*</span>u<span class="pl-k">+</span><span class="pl-c1">D</span><span class="pl-k">*</span><span class="pl-c1">D</span>;<span class="pl-k">if</span>(<span class="pl-k">!</span>(<span class="pl-c1">H</span><span class="pl-k">&lt;</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>)){u<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">K</span>(u,<span class="pl-c1">D</span>);<span class="pl-smi">u</span>.<span class="pl-en">Multiply</span>(<span class="pl-c1">this</span>.<span class="pl-c1">G</span><span class="pl-k">/</span><span class="pl-c1">H</span><span class="pl-k">*</span><span class="pl-c1">W</span><span class="pl-k">*</span><span class="pl-smi">k</span>.<span class="pl-en">GetMass</span>());<span class="pl-c1">L</span>.<span class="pl-en">IsAwake</span>()<span class="pl-k">&amp;&amp;</span><span class="pl-c1">L</span>.<span class="pl-en">ApplyForce</span>(u,<span class="pl-c1">I</span>);<span class="pl-smi">u</span>.<span class="pl-en">Multiply</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-smi">k</span>.<span class="pl-en">IsAwake</span>()<span class="pl-k">&amp;&amp;</span><span class="pl-smi">k</span>.<span class="pl-en">ApplyForce</span>(u,z)}}}};<span class="pl-smi">Box2D</span>.<span class="pl-en">inherit</span>(<span class="pl-c1">V</span>,<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Controllers</span>.<span class="pl-smi">b2Controller</span>);<span class="pl-c1">V</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">__super</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L297" class="blob-num js-line-number" data-line-number="297"></td>
        <td id="LC297" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Controllers</span>.<span class="pl-smi">b2Controller</span>.<span class="pl-c1">prototype</span>;<span class="pl-c1">V</span>.<span class="pl-en">b2TensorDampingController</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Controllers</span>.<span class="pl-smi">b2Controller</span>.<span class="pl-smi">b2Controller</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>);<span class="pl-c1">this</span>.<span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">F</span>;<span class="pl-c1">this</span>.<span class="pl-smi">maxTimestep</span><span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">V</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetAxisAligned</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-c1">M</span>,<span class="pl-c1">L</span>){<span class="pl-k">if</span>(<span class="pl-c1">M</span><span class="pl-k">===</span><span class="pl-c1">undefined</span>)<span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-c1">L</span><span class="pl-k">===</span><span class="pl-c1">undefined</span>)<span class="pl-c1">L</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-c1">T</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">M</span>;<span class="pl-c1">this</span>.<span class="pl-c1">T</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-c1">T</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-c1">T</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">L</span>;<span class="pl-c1">this</span>.<span class="pl-smi">maxTimestep</span><span class="pl-k">=</span><span class="pl-c1">M</span><span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">||</span><span class="pl-c1">L</span><span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">M</span>,<span class="pl-c1">L</span>)<span class="pl-k">:</span><span class="pl-c1">0</span>};<span class="pl-c1">V</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Step</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-c1">M</span>){<span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-c1">M</span>.<span class="pl-smi">dt</span>;<span class="pl-k">if</span>(<span class="pl-k">!</span>(<span class="pl-c1">M</span><span class="pl-k">&lt;=</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>)){<span class="pl-k">if</span>(<span class="pl-c1">M</span><span class="pl-k">&gt;</span><span class="pl-c1">this</span>.<span class="pl-smi">maxTimestep</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">maxTimestep</span><span class="pl-k">&gt;</span><span class="pl-c1">0</span>)<span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">maxTimestep</span>;</td>
      </tr>
      <tr>
        <td id="L298" class="blob-num js-line-number" data-line-number="298"></td>
        <td id="LC298" class="blob-code blob-code-inner js-file-line"><span class="pl-k">for</span>(<span class="pl-k">var</span> <span class="pl-c1">L</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyList</span>;<span class="pl-c1">L</span>;<span class="pl-c1">L</span><span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-smi">nextBody</span>){<span class="pl-k">var</span> <span class="pl-c1">I</span><span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-c1">body</span>;<span class="pl-k">if</span>(<span class="pl-c1">I</span>.<span class="pl-en">IsAwake</span>()){<span class="pl-k">var</span> <span class="pl-c1">W</span><span class="pl-k">=</span><span class="pl-c1">I</span>.<span class="pl-en">GetWorldVector</span>(<span class="pl-c1">G</span>.<span class="pl-en">MulMV</span>(<span class="pl-c1">this</span>.<span class="pl-c1">T</span>,<span class="pl-c1">I</span>.<span class="pl-en">GetLocalVector</span>(<span class="pl-c1">I</span>.<span class="pl-en">GetLinearVelocity</span>())));<span class="pl-c1">I</span>.<span class="pl-en">SetLinearVelocity</span>(<span class="pl-k">new</span> <span class="pl-en">K</span>(<span class="pl-c1">I</span>.<span class="pl-en">GetLinearVelocity</span>().<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">W</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">M</span>,<span class="pl-c1">I</span>.<span class="pl-en">GetLinearVelocity</span>().<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">W</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">M</span>))}}}}})();</td>
      </tr>
      <tr>
        <td id="L299" class="blob-num js-line-number" data-line-number="299"></td>
        <td id="LC299" class="blob-code blob-code-inner js-file-line">(<span class="pl-k">function</span>(){<span class="pl-k">var</span> <span class="pl-c1">F</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">b2Settings</span>,<span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">Math</span>.<span class="pl-smi">b2Mat22</span>,<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">Math</span>.<span class="pl-smi">b2Mat33</span>,y<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">Math</span>.<span class="pl-smi">b2Math</span>,w<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">Math</span>.<span class="pl-smi">b2Vec2</span>,<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Common</span>.<span class="pl-smi">Math</span>.<span class="pl-smi">b2Vec3</span>,<span class="pl-c1">U</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2DistanceJoint</span>,p<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2DistanceJointDef</span>,<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2FrictionJoint</span>,<span class="pl-c1">Q</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2FrictionJointDef</span>,<span class="pl-c1">V</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2GearJoint</span>,<span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2GearJointDef</span>,<span class="pl-c1">L</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2Jacobian</span>,<span class="pl-c1">I</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2Joint</span>,<span class="pl-c1">W</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2JointDef</span>,</td>
      </tr>
      <tr>
        <td id="L300" class="blob-num js-line-number" data-line-number="300"></td>
        <td id="LC300" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">Y</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2JointEdge</span>,k<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2LineJoint</span>,z<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2LineJointDef</span>,u<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2MouseJoint</span>,<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2MouseJointDef</span>,<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2PrismaticJoint</span>,<span class="pl-c1">O</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2PrismaticJointDef</span>,<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2PulleyJoint</span>,<span class="pl-c1">R</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2PulleyJointDef</span>,<span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2RevoluteJoint</span>,<span class="pl-c1">S</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2RevoluteJointDef</span>,aa<span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2WeldJoint</span>,<span class="pl-c1">Z</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2WeldJointDef</span>;</td>
      </tr>
      <tr>
        <td id="L301" class="blob-num js-line-number" data-line-number="301"></td>
        <td id="LC301" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">Box2D</span>.<span class="pl-en">inherit</span>(<span class="pl-c1">U</span>,<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2Joint</span>);<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">__super</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-c1">prototype</span>;<span class="pl-c1">U</span>.<span class="pl-en">b2DistanceJoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_u</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAnchorA</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>.<span class="pl-en">GetWorldPoint</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>)};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAnchorB</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>.<span class="pl-en">GetWorldPoint</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>)};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetReactionForce</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L302" class="blob-num js-line-number" data-line-number="302"></td>
        <td id="LC302" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">w</span>(d<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u</span>.<span class="pl-c1">x</span>,d<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u</span>.<span class="pl-c1">y</span>)};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetReactionTorque</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">0</span>};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetLength</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_length</span>};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetLength</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_length</span><span class="pl-k">=</span>d};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetFrequency</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_frequencyHz</span>};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetFrequency</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_frequencyHz</span><span class="pl-k">=</span>d};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetDampingRatio</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_dampingRatio</span>};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetDampingRatio</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L303" class="blob-num js-line-number" data-line-number="303"></td>
        <td id="LC303" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_dampingRatio</span><span class="pl-k">=</span>d};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2DistanceJoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-c1">this</span>.<span class="pl-smi">__super</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,d);<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">d</span>.<span class="pl-smi">localAnchorA</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">d</span>.<span class="pl-smi">localAnchorB</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_length</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">length</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_frequencyHz</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">frequencyHz</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_dampingRatio</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">dampingRatio</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_bias</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_gamma</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span><span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">InitVelocityConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">var</span> h,l<span class="pl-k">=</span><span class="pl-c1">0</span>,j<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>,o<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>;h<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;<span class="pl-k">var</span> q<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">j</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">x</span>,n<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>.<span class="pl-c1">y</span><span class="pl-k">-</span></td>
      </tr>
      <tr>
        <td id="L304" class="blob-num js-line-number" data-line-number="304"></td>
        <td id="LC304" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">j</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">y</span>;l<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>q<span class="pl-k">+</span><span class="pl-smi">h</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>n;n<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>q<span class="pl-k">+</span><span class="pl-smi">h</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>n;q<span class="pl-k">=</span>l;h<span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">o</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">x</span>,c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">o</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">y</span>;l<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-smi">h</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>c;c<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-smi">h</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>c;a<span class="pl-k">=</span>l;<span class="pl-c1">this</span>.<span class="pl-smi">m_u</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>a<span class="pl-k">-</span><span class="pl-smi">j</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">-</span>q;<span class="pl-c1">this</span>.<span class="pl-smi">m_u</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>c<span class="pl-k">-</span><span class="pl-smi">j</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>n;l<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_u</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u</span>.<span class="pl-c1">y</span>);l<span class="pl-k">&gt;</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_linearSlop</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u</span>.<span class="pl-en">Multiply</span>(<span class="pl-c1">1</span><span class="pl-k">/</span>l)<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u</span>.<span class="pl-en">SetZero</span>();h<span class="pl-k">=</span>q<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>n<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u</span>.<span class="pl-c1">x</span>;<span class="pl-k">var</span> g<span class="pl-k">=</span>a<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>c<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u</span>.<span class="pl-c1">x</span>;</td>
      </tr>
      <tr>
        <td id="L305" class="blob-num js-line-number" data-line-number="305"></td>
        <td id="LC305" class="blob-code blob-code-inner js-file-line">h<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">+</span><span class="pl-smi">j</span>.<span class="pl-smi">m_invI</span><span class="pl-k">*</span>h<span class="pl-k">*</span>h<span class="pl-k">+</span><span class="pl-smi">o</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">+</span><span class="pl-smi">o</span>.<span class="pl-smi">m_invI</span><span class="pl-k">*</span>g<span class="pl-k">*</span>g;<span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span><span class="pl-k">=</span>h<span class="pl-k">!=</span><span class="pl-c1">0</span><span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">/</span>h<span class="pl-k">:</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_frequencyHz</span><span class="pl-k">&gt;</span><span class="pl-c1">0</span>){l<span class="pl-k">=</span>l<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_length</span>;g<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_frequencyHz</span>;<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span><span class="pl-k">*</span>g<span class="pl-k">*</span>g;<span class="pl-c1">this</span>.<span class="pl-smi">m_gamma</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">dt</span><span class="pl-k">*</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_dampingRatio</span><span class="pl-k">*</span>g<span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-smi">dt</span><span class="pl-k">*</span>b);<span class="pl-c1">this</span>.<span class="pl-smi">m_gamma</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_gamma</span><span class="pl-k">!=</span><span class="pl-c1">0</span><span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">m_gamma</span><span class="pl-k">:</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_bias</span><span class="pl-k">=</span>l<span class="pl-k">*</span><span class="pl-smi">d</span>.<span class="pl-smi">dt</span><span class="pl-k">*</span>b<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_gamma</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span><span class="pl-k">=</span>h<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_gamma</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span><span class="pl-k">!=</span><span class="pl-c1">0</span><span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span><span class="pl-k">:</span><span class="pl-c1">0</span>}<span class="pl-k">if</span>(<span class="pl-smi">d</span>.<span class="pl-smi">warmStarting</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span><span class="pl-k">*=</span><span class="pl-smi">d</span>.<span class="pl-smi">dtRatio</span>;d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u</span>.<span class="pl-c1">x</span>;h<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u</span>.<span class="pl-c1">y</span>;<span class="pl-smi">j</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span></td>
      </tr>
      <tr>
        <td id="L306" class="blob-num js-line-number" data-line-number="306"></td>
        <td id="LC306" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">j</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span>d;<span class="pl-smi">j</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span><span class="pl-smi">j</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span>h;<span class="pl-smi">j</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">-=</span><span class="pl-smi">j</span>.<span class="pl-smi">m_invI</span><span class="pl-k">*</span>(q<span class="pl-k">*</span>h<span class="pl-k">-</span>n<span class="pl-k">*</span>d);<span class="pl-smi">o</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-smi">o</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span>d;<span class="pl-smi">o</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-smi">o</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span>h;<span class="pl-smi">o</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">+=</span><span class="pl-smi">o</span>.<span class="pl-smi">m_invI</span><span class="pl-k">*</span>(a<span class="pl-k">*</span>h<span class="pl-k">-</span>c<span class="pl-k">*</span>d)}<span class="pl-k">else</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span><span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolveVelocityConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> d,h<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>,l<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>;d<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;<span class="pl-k">var</span> j<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">x</span>,o<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">y</span>,q<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>j<span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>o;o<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>j<span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>o;j<span class="pl-k">=</span>q;d<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>.<span class="pl-c1">x</span><span class="pl-k">-</span></td>
      </tr>
      <tr>
        <td id="L307" class="blob-num js-line-number" data-line-number="307"></td>
        <td id="LC307" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">x</span>,a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">y</span>;q<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>n<span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>a;a<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>n<span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>a;n<span class="pl-k">=</span>q;q<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span><span class="pl-k">*</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_u</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>(<span class="pl-smi">l</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span><span class="pl-k">+-</span><span class="pl-smi">l</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">*</span>a<span class="pl-k">-</span>(<span class="pl-smi">h</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span><span class="pl-k">+-</span><span class="pl-smi">h</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">*</span>o))<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>(<span class="pl-smi">l</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-smi">l</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">*</span>n<span class="pl-k">-</span>(<span class="pl-smi">h</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-smi">h</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">*</span>j))<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bias</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_gamma</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span><span class="pl-k">+=</span>q;d<span class="pl-k">=</span>q<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u</span>.<span class="pl-c1">x</span>;q<span class="pl-k">=</span>q<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u</span>.<span class="pl-c1">y</span>;<span class="pl-smi">h</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span>d;<span class="pl-smi">h</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L308" class="blob-num js-line-number" data-line-number="308"></td>
        <td id="LC308" class="blob-code blob-code-inner js-file-line">q;<span class="pl-smi">h</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">-=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_invI</span><span class="pl-k">*</span>(j<span class="pl-k">*</span>q<span class="pl-k">-</span>o<span class="pl-k">*</span>d);<span class="pl-smi">l</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span>d;<span class="pl-smi">l</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span>q;<span class="pl-smi">l</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">+=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_invI</span><span class="pl-k">*</span>(n<span class="pl-k">*</span>q<span class="pl-k">-</span>a<span class="pl-k">*</span>d)};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolvePositionConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> d;<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_frequencyHz</span><span class="pl-k">&gt;</span><span class="pl-c1">0</span>)<span class="pl-k">return</span> <span class="pl-c1">true</span>;<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>,l<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>;d<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;<span class="pl-k">var</span> j<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">x</span>,o<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">y</span>,q<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>j<span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>o;o<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>j<span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>o;j<span class="pl-k">=</span>q;d<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">x</span>,</td>
      </tr>
      <tr>
        <td id="L309" class="blob-num js-line-number" data-line-number="309"></td>
        <td id="LC309" class="blob-code blob-code-inner js-file-line">a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">y</span>;q<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>n<span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>a;a<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>n<span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>a;n<span class="pl-k">=</span>q;q<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>n<span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">-</span>j;<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>a<span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>o;d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(q<span class="pl-k">*</span>q<span class="pl-k">+</span>c<span class="pl-k">*</span>c);q<span class="pl-k">/=</span>d;c<span class="pl-k">/=</span>d;d<span class="pl-k">=</span>d<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_length</span>;d<span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-en">Clamp</span>(d,<span class="pl-k">-</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_maxLinearCorrection</span>,<span class="pl-c1">F</span>.<span class="pl-smi">b2_maxLinearCorrection</span>);<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span><span class="pl-k">*</span>d;<span class="pl-c1">this</span>.<span class="pl-smi">m_u</span>.<span class="pl-en">Set</span>(q,c);q<span class="pl-k">=</span>g<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u</span>.<span class="pl-c1">x</span>;c<span class="pl-k">=</span>g<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u</span>.<span class="pl-c1">y</span>;<span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span>q;<span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span>c;<span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a</span><span class="pl-k">-=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_invI</span><span class="pl-k">*</span>(j<span class="pl-k">*</span>c<span class="pl-k">-</span>o<span class="pl-k">*</span>q);<span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span>q;<span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span>c;</td>
      </tr>
      <tr>
        <td id="L310" class="blob-num js-line-number" data-line-number="310"></td>
        <td id="LC310" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a</span><span class="pl-k">+=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_invI</span><span class="pl-k">*</span>(n<span class="pl-k">*</span>c<span class="pl-k">-</span>a<span class="pl-k">*</span>q);<span class="pl-smi">h</span>.<span class="pl-en">SynchronizeTransform</span>();<span class="pl-smi">l</span>.<span class="pl-en">SynchronizeTransform</span>();<span class="pl-k">return</span> <span class="pl-smi">y</span>.<span class="pl-en">Abs</span>(d)<span class="pl-k">&lt;</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_linearSlop</span>};<span class="pl-smi">Box2D</span>.<span class="pl-en">inherit</span>(p,<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2JointDef</span>);<span class="pl-smi">p</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">__super</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2JointDef</span>.<span class="pl-c1">prototype</span>;<span class="pl-smi">p</span>.<span class="pl-en">b2DistanceJointDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2JointDef</span>.<span class="pl-smi">b2JointDef</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>);<span class="pl-c1">this</span>.<span class="pl-smi">localAnchorA</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-c1">this</span>.<span class="pl-smi">localAnchorB</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>};<span class="pl-smi">p</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2DistanceJointDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">__super</span>.<span class="pl-smi">b2JointDef</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-c1">I</span>.<span class="pl-smi">e_distanceJoint</span>;<span class="pl-c1">this</span>.<span class="pl-c1">length</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">dampingRatio</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L311" class="blob-num js-line-number" data-line-number="311"></td>
        <td id="LC311" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">frequencyHz</span><span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-smi">p</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Initialize</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>,<span class="pl-smi">h</span>,<span class="pl-smi">l</span>,<span class="pl-smi">j</span>){<span class="pl-c1">this</span>.<span class="pl-smi">bodyA</span><span class="pl-k">=</span>d;<span class="pl-c1">this</span>.<span class="pl-smi">bodyB</span><span class="pl-k">=</span>h;<span class="pl-c1">this</span>.<span class="pl-smi">localAnchorA</span>.<span class="pl-en">SetV</span>(<span class="pl-c1">this</span>.<span class="pl-smi">bodyA</span>.<span class="pl-en">GetLocalPoint</span>(l));<span class="pl-c1">this</span>.<span class="pl-smi">localAnchorB</span>.<span class="pl-en">SetV</span>(<span class="pl-c1">this</span>.<span class="pl-smi">bodyB</span>.<span class="pl-en">GetLocalPoint</span>(j));d<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">l</span>.<span class="pl-c1">x</span>;l<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">l</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-c1">length</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(d<span class="pl-k">*</span>d<span class="pl-k">+</span>l<span class="pl-k">*</span>l);<span class="pl-c1">this</span>.<span class="pl-smi">dampingRatio</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">frequencyHz</span><span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-smi">Box2D</span>.<span class="pl-en">inherit</span>(<span class="pl-c1">B</span>,<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2Joint</span>);<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">__super</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-c1">prototype</span>;<span class="pl-c1">B</span>.<span class="pl-en">b2FrictionJoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchorA</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;</td>
      </tr>
      <tr>
        <td id="L312" class="blob-num js-line-number" data-line-number="312"></td>
        <td id="LC312" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchorB</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_linearMass</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">G</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_linearImpulse</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAnchorA</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>.<span class="pl-en">GetWorldPoint</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchorA</span>)};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAnchorB</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>.<span class="pl-en">GetWorldPoint</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchorB</span>)};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetReactionForce</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">w</span>(d<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_linearImpulse</span>.<span class="pl-c1">x</span>,d<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_linearImpulse</span>.<span class="pl-c1">y</span>)};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetReactionTorque</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> d<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_angularImpulse</span>};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">SetMaxForce</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L313" class="blob-num js-line-number" data-line-number="313"></td>
        <td id="LC313" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_maxForce</span><span class="pl-k">=</span>d};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetMaxForce</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_maxForce</span>};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetMaxTorque</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_maxTorque</span><span class="pl-k">=</span>d};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetMaxTorque</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_maxTorque</span>};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2FrictionJoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-c1">this</span>.<span class="pl-smi">__super</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,d);<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchorA</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">d</span>.<span class="pl-smi">localAnchorA</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchorB</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">d</span>.<span class="pl-smi">localAnchorB</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_linearMass</span>.<span class="pl-en">SetZero</span>();<span class="pl-c1">this</span>.<span class="pl-smi">m_angularMass</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_linearImpulse</span>.<span class="pl-en">SetZero</span>();<span class="pl-c1">this</span>.<span class="pl-smi">m_angularImpulse</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L314" class="blob-num js-line-number" data-line-number="314"></td>
        <td id="LC314" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_maxForce</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">maxForce</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_maxTorque</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">maxTorque</span>};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">InitVelocityConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">var</span> h,l<span class="pl-k">=</span><span class="pl-c1">0</span>,j<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>,o<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>;h<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;<span class="pl-k">var</span> q<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchorA</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">j</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">x</span>,n<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchorA</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">j</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">y</span>;l<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>q<span class="pl-k">+</span><span class="pl-smi">h</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>n;n<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>q<span class="pl-k">+</span><span class="pl-smi">h</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>n;q<span class="pl-k">=</span>l;h<span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchorB</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">o</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">x</span>,c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchorB</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">o</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">y</span>;l<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-smi">h</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>c;c<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-smi">h</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>c;a<span class="pl-k">=</span>l;h<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">m_invMass</span>;l<span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">m_invMass</span>;</td>
      </tr>
      <tr>
        <td id="L315" class="blob-num js-line-number" data-line-number="315"></td>
        <td id="LC315" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">m_invI</span>,b<span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">m_invI</span>,e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">G</span>;<span class="pl-smi">e</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>h<span class="pl-k">+</span>l;<span class="pl-smi">e</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-smi">e</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-smi">e</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>h<span class="pl-k">+</span>l;<span class="pl-smi">e</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span>g<span class="pl-k">*</span>n<span class="pl-k">*</span>n;<span class="pl-smi">e</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-k">-</span>g<span class="pl-k">*</span>q<span class="pl-k">*</span>n;<span class="pl-smi">e</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-k">-</span>g<span class="pl-k">*</span>q<span class="pl-k">*</span>n;<span class="pl-smi">e</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span>g<span class="pl-k">*</span>q<span class="pl-k">*</span>q;<span class="pl-smi">e</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span>b<span class="pl-k">*</span>c<span class="pl-k">*</span>c;<span class="pl-smi">e</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-k">-</span>b<span class="pl-k">*</span>a<span class="pl-k">*</span>c;<span class="pl-smi">e</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-k">-</span>b<span class="pl-k">*</span>a<span class="pl-k">*</span>c;<span class="pl-smi">e</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span>b<span class="pl-k">*</span>a<span class="pl-k">*</span>a;<span class="pl-smi">e</span>.<span class="pl-en">GetInverse</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_linearMass</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_angularMass</span><span class="pl-k">=</span>g<span class="pl-k">+</span>b;<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_angularMass</span><span class="pl-k">&gt;</span><span class="pl-c1">0</span>)<span class="pl-c1">this</span>.<span class="pl-smi">m_angularMass</span><span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">m_angularMass</span>;<span class="pl-k">if</span>(<span class="pl-smi">d</span>.<span class="pl-smi">warmStarting</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_linearImpulse</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span><span class="pl-smi">d</span>.<span class="pl-smi">dtRatio</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_linearImpulse</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span><span class="pl-smi">d</span>.<span class="pl-smi">dtRatio</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_angularImpulse</span><span class="pl-k">*=</span><span class="pl-smi">d</span>.<span class="pl-smi">dtRatio</span>;d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_linearImpulse</span>;<span class="pl-smi">j</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span>h<span class="pl-k">*</span><span class="pl-smi">d</span>.<span class="pl-c1">x</span>;</td>
      </tr>
      <tr>
        <td id="L316" class="blob-num js-line-number" data-line-number="316"></td>
        <td id="LC316" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">j</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span>h<span class="pl-k">*</span><span class="pl-smi">d</span>.<span class="pl-c1">y</span>;<span class="pl-smi">j</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">-=</span>g<span class="pl-k">*</span>(q<span class="pl-k">*</span><span class="pl-smi">d</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>n<span class="pl-k">*</span><span class="pl-smi">d</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_angularImpulse</span>);<span class="pl-smi">o</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span>l<span class="pl-k">*</span><span class="pl-smi">d</span>.<span class="pl-c1">x</span>;<span class="pl-smi">o</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span>l<span class="pl-k">*</span><span class="pl-smi">d</span>.<span class="pl-c1">y</span>;<span class="pl-smi">o</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">+=</span>b<span class="pl-k">*</span>(a<span class="pl-k">*</span><span class="pl-smi">d</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>c<span class="pl-k">*</span><span class="pl-smi">d</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_angularImpulse</span>)}<span class="pl-k">else</span>{<span class="pl-c1">this</span>.<span class="pl-smi">m_linearImpulse</span>.<span class="pl-en">SetZero</span>();<span class="pl-c1">this</span>.<span class="pl-smi">m_angularImpulse</span><span class="pl-k">=</span><span class="pl-c1">0</span>}};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolveVelocityConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">var</span> h,l<span class="pl-k">=</span><span class="pl-c1">0</span>,j<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>,o<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>,q<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">m_linearVelocity</span>,n<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">m_angularVelocity</span>,a<span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">m_linearVelocity</span>,c<span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">m_angularVelocity</span>,g<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">m_invMass</span>,b<span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">m_invMass</span>,e<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">m_invI</span>,f<span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">m_invI</span>;h<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;<span class="pl-k">var</span> m<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L317" class="blob-num js-line-number" data-line-number="317"></td>
        <td id="LC317" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchorA</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">j</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">x</span>,r<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchorA</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">j</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">y</span>;l<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>m<span class="pl-k">+</span><span class="pl-smi">h</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>r;r<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>m<span class="pl-k">+</span><span class="pl-smi">h</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>r;m<span class="pl-k">=</span>l;h<span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;<span class="pl-k">var</span> s<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchorB</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">o</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">x</span>,v<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchorB</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">o</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">y</span>;l<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>s<span class="pl-k">+</span><span class="pl-smi">h</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>v;v<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>s<span class="pl-k">+</span><span class="pl-smi">h</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>v;s<span class="pl-k">=</span>l;h<span class="pl-k">=</span><span class="pl-c1">0</span>;l<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_angularMass</span><span class="pl-k">*</span>(c<span class="pl-k">-</span>n);<span class="pl-k">var</span> t<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_angularImpulse</span>;h<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">dt</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_maxTorque</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_angularImpulse</span><span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-en">Clamp</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_angularImpulse</span><span class="pl-k">+</span>l,<span class="pl-k">-</span>h,h);l<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_angularImpulse</span><span class="pl-k">-</span>t;n<span class="pl-k">-=</span>e<span class="pl-k">*</span>l;c<span class="pl-k">+=</span>f<span class="pl-k">*</span>l;h<span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-en">MulMV</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_linearMass</span>,</td>
      </tr>
      <tr>
        <td id="L318" class="blob-num js-line-number" data-line-number="318"></td>
        <td id="LC318" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">w</span>(<span class="pl-k">-</span>(<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">-</span>c<span class="pl-k">*</span>v<span class="pl-k">-</span><span class="pl-smi">q</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>n<span class="pl-k">*</span>r),<span class="pl-k">-</span>(<span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>c<span class="pl-k">*</span>s<span class="pl-k">-</span><span class="pl-smi">q</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>n<span class="pl-k">*</span>m)));l<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_linearImpulse</span>.<span class="pl-en">Copy</span>();<span class="pl-c1">this</span>.<span class="pl-smi">m_linearImpulse</span>.<span class="pl-en">Add</span>(h);h<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">dt</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_maxForce</span>;<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_linearImpulse</span>.<span class="pl-en">LengthSquared</span>()<span class="pl-k">&gt;</span>h<span class="pl-k">*</span>h){<span class="pl-c1">this</span>.<span class="pl-smi">m_linearImpulse</span>.<span class="pl-en">Normalize</span>();<span class="pl-c1">this</span>.<span class="pl-smi">m_linearImpulse</span>.<span class="pl-en">Multiply</span>(h)}h<span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-en">SubtractVV</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_linearImpulse</span>,l);<span class="pl-smi">q</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span>g<span class="pl-k">*</span><span class="pl-smi">h</span>.<span class="pl-c1">x</span>;<span class="pl-smi">q</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span>g<span class="pl-k">*</span><span class="pl-smi">h</span>.<span class="pl-c1">y</span>;n<span class="pl-k">-=</span>e<span class="pl-k">*</span>(m<span class="pl-k">*</span><span class="pl-smi">h</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>r<span class="pl-k">*</span><span class="pl-smi">h</span>.<span class="pl-c1">x</span>);<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span>b<span class="pl-k">*</span><span class="pl-smi">h</span>.<span class="pl-c1">x</span>;<span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span>b<span class="pl-k">*</span><span class="pl-smi">h</span>.<span class="pl-c1">y</span>;c<span class="pl-k">+=</span>f<span class="pl-k">*</span>(s<span class="pl-k">*</span><span class="pl-smi">h</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>v<span class="pl-k">*</span><span class="pl-smi">h</span>.<span class="pl-c1">x</span>);<span class="pl-smi">j</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">=</span>n;<span class="pl-smi">o</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">=</span>c};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolvePositionConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">true</span>};<span class="pl-smi">Box2D</span>.<span class="pl-en">inherit</span>(<span class="pl-c1">Q</span>,<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2JointDef</span>);</td>
      </tr>
      <tr>
        <td id="L319" class="blob-num js-line-number" data-line-number="319"></td>
        <td id="LC319" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">Q</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">__super</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2JointDef</span>.<span class="pl-c1">prototype</span>;<span class="pl-c1">Q</span>.<span class="pl-en">b2FrictionJointDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2JointDef</span>.<span class="pl-smi">b2JointDef</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>);<span class="pl-c1">this</span>.<span class="pl-smi">localAnchorA</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-c1">this</span>.<span class="pl-smi">localAnchorB</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>};<span class="pl-c1">Q</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2FrictionJointDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">__super</span>.<span class="pl-smi">b2JointDef</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-c1">I</span>.<span class="pl-smi">e_frictionJoint</span>;<span class="pl-c1">this</span>.<span class="pl-smi">maxTorque</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">maxForce</span><span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">Q</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Initialize</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>,<span class="pl-smi">h</span>,<span class="pl-smi">l</span>){<span class="pl-c1">this</span>.<span class="pl-smi">bodyA</span><span class="pl-k">=</span>d;<span class="pl-c1">this</span>.<span class="pl-smi">bodyB</span><span class="pl-k">=</span>h;<span class="pl-c1">this</span>.<span class="pl-smi">localAnchorA</span>.<span class="pl-en">SetV</span>(<span class="pl-c1">this</span>.<span class="pl-smi">bodyA</span>.<span class="pl-en">GetLocalPoint</span>(l));<span class="pl-c1">this</span>.<span class="pl-smi">localAnchorB</span>.<span class="pl-en">SetV</span>(<span class="pl-c1">this</span>.<span class="pl-smi">bodyB</span>.<span class="pl-en">GetLocalPoint</span>(l))};</td>
      </tr>
      <tr>
        <td id="L320" class="blob-num js-line-number" data-line-number="320"></td>
        <td id="LC320" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">Box2D</span>.<span class="pl-en">inherit</span>(<span class="pl-c1">V</span>,<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2Joint</span>);<span class="pl-c1">V</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">__super</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-c1">prototype</span>;<span class="pl-c1">V</span>.<span class="pl-en">b2GearJoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_groundAnchor1</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_groundAnchor2</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_J</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">L</span>};<span class="pl-c1">V</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAnchorA</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>.<span class="pl-en">GetWorldPoint</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>)};<span class="pl-c1">V</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAnchorB</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>.<span class="pl-en">GetWorldPoint</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>)};<span class="pl-c1">V</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">GetReactionForce</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L321" class="blob-num js-line-number" data-line-number="321"></td>
        <td id="LC321" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">w</span>(d<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_J</span>.<span class="pl-smi">linearB</span>.<span class="pl-c1">x</span>,d<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_J</span>.<span class="pl-smi">linearB</span>.<span class="pl-c1">y</span>)};<span class="pl-c1">V</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetReactionTorque</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>,l<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">x</span>,j<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">y</span>,o<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>l<span class="pl-k">+</span><span class="pl-smi">h</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>j;j<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>l<span class="pl-k">+</span><span class="pl-smi">h</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>j;l<span class="pl-k">=</span>o;<span class="pl-k">return</span> d<span class="pl-k">*</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_J</span>.<span class="pl-smi">angularB</span><span class="pl-k">-</span>l<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_J</span>.<span class="pl-smi">linearB</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>j<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_J</span>.<span class="pl-smi">linearB</span>.<span class="pl-c1">x</span>)};<span class="pl-c1">V</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">GetRatio</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L322" class="blob-num js-line-number" data-line-number="322"></td>
        <td id="LC322" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_ratio</span>};<span class="pl-c1">V</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetRatio</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_ratio</span><span class="pl-k">=</span>d};<span class="pl-c1">V</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2GearJoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-c1">this</span>.<span class="pl-smi">__super</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,d);<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(<span class="pl-smi">d</span>.<span class="pl-smi">joint1</span>.<span class="pl-smi">m_type</span>),l<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(<span class="pl-smi">d</span>.<span class="pl-smi">joint2</span>.<span class="pl-smi">m_type</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_prismatic2</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_revolute2</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_prismatic1</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_revolute1</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">var</span> j<span class="pl-k">=</span><span class="pl-c1">0</span>,o<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_ground1</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">joint1</span>.<span class="pl-en">GetBodyA</span>();<span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">joint1</span>.<span class="pl-en">GetBodyB</span>();<span class="pl-k">if</span>(h<span class="pl-k">==</span><span class="pl-c1">I</span>.<span class="pl-smi">e_revoluteJoint</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_revolute1</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">joint1</span> <span class="pl-k">instanceof</span> <span class="pl-c1">N</span><span class="pl-k">?</span><span class="pl-smi">d</span>.<span class="pl-smi">joint1</span><span class="pl-k">:</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_groundAnchor1</span>.<span class="pl-en">SetV</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_revolute1</span>.<span class="pl-smi">m_localAnchor1</span>);</td>
      </tr>
      <tr>
        <td id="L323" class="blob-num js-line-number" data-line-number="323"></td>
        <td id="LC323" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>.<span class="pl-en">SetV</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_revolute1</span>.<span class="pl-smi">m_localAnchor2</span>);j<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_revolute1</span>.<span class="pl-en">GetJointAngle</span>()}<span class="pl-k">else</span>{<span class="pl-c1">this</span>.<span class="pl-smi">m_prismatic1</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">joint1</span> <span class="pl-k">instanceof</span> <span class="pl-c1">H</span><span class="pl-k">?</span><span class="pl-smi">d</span>.<span class="pl-smi">joint1</span><span class="pl-k">:</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_groundAnchor1</span>.<span class="pl-en">SetV</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_prismatic1</span>.<span class="pl-smi">m_localAnchor1</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>.<span class="pl-en">SetV</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_prismatic1</span>.<span class="pl-smi">m_localAnchor2</span>);j<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_prismatic1</span>.<span class="pl-en">GetJointTranslation</span>()}<span class="pl-c1">this</span>.<span class="pl-smi">m_ground2</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">joint2</span>.<span class="pl-en">GetBodyA</span>();<span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">joint2</span>.<span class="pl-en">GetBodyB</span>();<span class="pl-k">if</span>(l<span class="pl-k">==</span><span class="pl-c1">I</span>.<span class="pl-smi">e_revoluteJoint</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_revolute2</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">joint2</span> <span class="pl-k">instanceof</span> <span class="pl-c1">N</span><span class="pl-k">?</span><span class="pl-smi">d</span>.<span class="pl-smi">joint2</span><span class="pl-k">:</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_groundAnchor2</span>.<span class="pl-en">SetV</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_revolute2</span>.<span class="pl-smi">m_localAnchor1</span>);</td>
      </tr>
      <tr>
        <td id="L324" class="blob-num js-line-number" data-line-number="324"></td>
        <td id="LC324" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>.<span class="pl-en">SetV</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_revolute2</span>.<span class="pl-smi">m_localAnchor2</span>);o<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_revolute2</span>.<span class="pl-en">GetJointAngle</span>()}<span class="pl-k">else</span>{<span class="pl-c1">this</span>.<span class="pl-smi">m_prismatic2</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">joint2</span> <span class="pl-k">instanceof</span> <span class="pl-c1">H</span><span class="pl-k">?</span><span class="pl-smi">d</span>.<span class="pl-smi">joint2</span><span class="pl-k">:</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_groundAnchor2</span>.<span class="pl-en">SetV</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_prismatic2</span>.<span class="pl-smi">m_localAnchor1</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>.<span class="pl-en">SetV</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_prismatic2</span>.<span class="pl-smi">m_localAnchor2</span>);o<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_prismatic2</span>.<span class="pl-en">GetJointTranslation</span>()}<span class="pl-c1">this</span>.<span class="pl-smi">m_ratio</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">ratio</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_constant</span><span class="pl-k">=</span>j<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_ratio</span><span class="pl-k">*</span>o;<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span><span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">V</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">InitVelocityConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_ground1</span>,l<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_ground2</span>,j<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>,o<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>,</td>
      </tr>
      <tr>
        <td id="L325" class="blob-num js-line-number" data-line-number="325"></td>
        <td id="LC325" class="blob-code blob-code-inner js-file-line">q<span class="pl-k">=</span><span class="pl-c1">0</span>,n<span class="pl-k">=</span><span class="pl-c1">0</span>,a<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span>a<span class="pl-k">=</span><span class="pl-c1">0</span>,b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_J</span>.<span class="pl-en">SetZero</span>();<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_revolute1</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_J</span>.<span class="pl-smi">angularA</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>;b<span class="pl-k">+=</span><span class="pl-smi">j</span>.<span class="pl-smi">m_invI</span>}<span class="pl-k">else</span>{h<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;n<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_prismatic1</span>.<span class="pl-smi">m_localXAxis1</span>;q<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">h</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-c1">y</span>;n<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">h</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-c1">y</span>;h<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">j</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">x</span>;c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">j</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">y</span>;g<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-smi">h</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>c;c<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-smi">h</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>c;a<span class="pl-k">=</span>g;a<span class="pl-k">=</span>a<span class="pl-k">*</span>n<span class="pl-k">-</span>c<span class="pl-k">*</span>q;<span class="pl-c1">this</span>.<span class="pl-smi">m_J</span>.<span class="pl-smi">linearA</span>.<span class="pl-en">Set</span>(<span class="pl-k">-</span>q,<span class="pl-k">-</span>n);<span class="pl-c1">this</span>.<span class="pl-smi">m_J</span>.<span class="pl-smi">angularA</span><span class="pl-k">=</span><span class="pl-k">-</span>a;b<span class="pl-k">+=</span><span class="pl-smi">j</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">+</span><span class="pl-smi">j</span>.<span class="pl-smi">m_invI</span><span class="pl-k">*</span>a<span class="pl-k">*</span>a}<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_revolute2</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_J</span>.<span class="pl-smi">angularB</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_ratio</span>;</td>
      </tr>
      <tr>
        <td id="L326" class="blob-num js-line-number" data-line-number="326"></td>
        <td id="LC326" class="blob-code blob-code-inner js-file-line">b<span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_ratio</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_ratio</span><span class="pl-k">*</span><span class="pl-smi">o</span>.<span class="pl-smi">m_invI</span>}<span class="pl-k">else</span>{h<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;n<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_prismatic2</span>.<span class="pl-smi">m_localXAxis1</span>;q<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">h</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-c1">y</span>;n<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">h</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-c1">y</span>;h<span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">o</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">x</span>;c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">o</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">y</span>;g<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-smi">h</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>c;c<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-smi">h</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>c;a<span class="pl-k">=</span>g;a<span class="pl-k">=</span>a<span class="pl-k">*</span>n<span class="pl-k">-</span>c<span class="pl-k">*</span>q;<span class="pl-c1">this</span>.<span class="pl-smi">m_J</span>.<span class="pl-smi">linearB</span>.<span class="pl-en">Set</span>(<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_ratio</span><span class="pl-k">*</span>q,<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_ratio</span><span class="pl-k">*</span>n);<span class="pl-c1">this</span>.<span class="pl-smi">m_J</span>.<span class="pl-smi">angularB</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_ratio</span><span class="pl-k">*</span>a;b<span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_ratio</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_ratio</span><span class="pl-k">*</span>(<span class="pl-smi">o</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">+</span><span class="pl-smi">o</span>.<span class="pl-smi">m_invI</span><span class="pl-k">*</span>a<span class="pl-k">*</span>a)}<span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span><span class="pl-k">=</span>b<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">/</span>b<span class="pl-k">:</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-smi">d</span>.<span class="pl-smi">warmStarting</span>){<span class="pl-smi">j</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span></td>
      </tr>
      <tr>
        <td id="L327" class="blob-num js-line-number" data-line-number="327"></td>
        <td id="LC327" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">j</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_J</span>.<span class="pl-smi">linearA</span>.<span class="pl-c1">x</span>;<span class="pl-smi">j</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-smi">j</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_J</span>.<span class="pl-smi">linearA</span>.<span class="pl-c1">y</span>;<span class="pl-smi">j</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">+=</span><span class="pl-smi">j</span>.<span class="pl-smi">m_invI</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_J</span>.<span class="pl-smi">angularA</span>;<span class="pl-smi">o</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-smi">o</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_J</span>.<span class="pl-smi">linearB</span>.<span class="pl-c1">x</span>;<span class="pl-smi">o</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-smi">o</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_J</span>.<span class="pl-smi">linearB</span>.<span class="pl-c1">y</span>;<span class="pl-smi">o</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">+=</span><span class="pl-smi">o</span>.<span class="pl-smi">m_invI</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_J</span>.<span class="pl-smi">angularB</span>}<span class="pl-k">else</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span><span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">V</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolveVelocityConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>,h<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>,l<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_J</span>.<span class="pl-en">Compute</span>(<span class="pl-smi">d</span>.<span class="pl-smi">m_linearVelocity</span>,</td>
      </tr>
      <tr>
        <td id="L328" class="blob-num js-line-number" data-line-number="328"></td>
        <td id="LC328" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">d</span>.<span class="pl-smi">m_angularVelocity</span>,<span class="pl-smi">h</span>.<span class="pl-smi">m_linearVelocity</span>,<span class="pl-smi">h</span>.<span class="pl-smi">m_angularVelocity</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span><span class="pl-k">+=</span>l;<span class="pl-smi">d</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-smi">d</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span>l<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_J</span>.<span class="pl-smi">linearA</span>.<span class="pl-c1">x</span>;<span class="pl-smi">d</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-smi">d</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span>l<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_J</span>.<span class="pl-smi">linearA</span>.<span class="pl-c1">y</span>;<span class="pl-smi">d</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">+=</span><span class="pl-smi">d</span>.<span class="pl-smi">m_invI</span><span class="pl-k">*</span>l<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_J</span>.<span class="pl-smi">angularA</span>;<span class="pl-smi">h</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span>l<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_J</span>.<span class="pl-smi">linearB</span>.<span class="pl-c1">x</span>;<span class="pl-smi">h</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span>l<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_J</span>.<span class="pl-smi">linearB</span>.<span class="pl-c1">y</span>;<span class="pl-smi">h</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">+=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_invI</span><span class="pl-k">*</span>l<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_J</span>.<span class="pl-smi">angularB</span>};<span class="pl-c1">V</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolvePositionConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>,h<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>,l<span class="pl-k">=</span><span class="pl-c1">0</span>,j<span class="pl-k">=</span><span class="pl-c1">0</span>;l<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_revolute1</span><span class="pl-k">?</span></td>
      </tr>
      <tr>
        <td id="L329" class="blob-num js-line-number" data-line-number="329"></td>
        <td id="LC329" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_revolute1</span>.<span class="pl-en">GetJointAngle</span>()<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-smi">m_prismatic1</span>.<span class="pl-en">GetJointTranslation</span>();j<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_revolute2</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">m_revolute2</span>.<span class="pl-en">GetJointAngle</span>()<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-smi">m_prismatic2</span>.<span class="pl-en">GetJointTranslation</span>();l<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span><span class="pl-k">*</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_constant</span><span class="pl-k">-</span>(l<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_ratio</span><span class="pl-k">*</span>j));<span class="pl-smi">d</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-smi">d</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span>l<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_J</span>.<span class="pl-smi">linearA</span>.<span class="pl-c1">x</span>;<span class="pl-smi">d</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-smi">d</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span>l<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_J</span>.<span class="pl-smi">linearA</span>.<span class="pl-c1">y</span>;<span class="pl-smi">d</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a</span><span class="pl-k">+=</span><span class="pl-smi">d</span>.<span class="pl-smi">m_invI</span><span class="pl-k">*</span>l<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_J</span>.<span class="pl-smi">angularA</span>;<span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span>l<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_J</span>.<span class="pl-smi">linearB</span>.<span class="pl-c1">x</span>;<span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span>l<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_J</span>.<span class="pl-smi">linearB</span>.<span class="pl-c1">y</span>;<span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a</span><span class="pl-k">+=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_invI</span><span class="pl-k">*</span>l<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_J</span>.<span class="pl-smi">angularB</span>;<span class="pl-smi">d</span>.<span class="pl-en">SynchronizeTransform</span>();</td>
      </tr>
      <tr>
        <td id="L330" class="blob-num js-line-number" data-line-number="330"></td>
        <td id="LC330" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">h</span>.<span class="pl-en">SynchronizeTransform</span>();<span class="pl-k">return</span> <span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_linearSlop</span>};<span class="pl-smi">Box2D</span>.<span class="pl-en">inherit</span>(<span class="pl-c1">M</span>,<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2JointDef</span>);<span class="pl-c1">M</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">__super</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2JointDef</span>.<span class="pl-c1">prototype</span>;<span class="pl-c1">M</span>.<span class="pl-en">b2GearJointDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2JointDef</span>.<span class="pl-smi">b2JointDef</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>)};<span class="pl-c1">M</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2GearJointDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">__super</span>.<span class="pl-smi">b2JointDef</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-c1">I</span>.<span class="pl-smi">e_gearJoint</span>;<span class="pl-c1">this</span>.<span class="pl-smi">joint2</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">joint1</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">ratio</span><span class="pl-k">=</span><span class="pl-c1">1</span>};<span class="pl-c1">L</span>.<span class="pl-en">b2Jacobian</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">linearA</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-c1">this</span>.<span class="pl-smi">linearB</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>};<span class="pl-c1">L</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetZero</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">linearA</span>.<span class="pl-en">SetZero</span>();</td>
      </tr>
      <tr>
        <td id="L331" class="blob-num js-line-number" data-line-number="331"></td>
        <td id="LC331" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">angularA</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">linearB</span>.<span class="pl-en">SetZero</span>();<span class="pl-c1">this</span>.<span class="pl-smi">angularB</span><span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">L</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Set</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>,<span class="pl-smi">h</span>,<span class="pl-smi">l</span>,<span class="pl-smi">j</span>){<span class="pl-k">if</span>(h<span class="pl-k">===</span><span class="pl-c1">undefined</span>)h<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(j<span class="pl-k">===</span><span class="pl-c1">undefined</span>)j<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">linearA</span>.<span class="pl-en">SetV</span>(d);<span class="pl-c1">this</span>.<span class="pl-smi">angularA</span><span class="pl-k">=</span>h;<span class="pl-c1">this</span>.<span class="pl-smi">linearB</span>.<span class="pl-en">SetV</span>(l);<span class="pl-c1">this</span>.<span class="pl-smi">angularB</span><span class="pl-k">=</span>j};<span class="pl-c1">L</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Compute</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>,<span class="pl-smi">h</span>,<span class="pl-smi">l</span>,<span class="pl-smi">j</span>){<span class="pl-k">if</span>(h<span class="pl-k">===</span><span class="pl-c1">undefined</span>)h<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(j<span class="pl-k">===</span><span class="pl-c1">undefined</span>)j<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">linearA</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">d</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">linearA</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">d</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">angularA</span><span class="pl-k">*</span>h<span class="pl-k">+</span>(<span class="pl-c1">this</span>.<span class="pl-smi">linearB</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">l</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">linearB</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">l</span>.<span class="pl-c1">y</span>)<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">angularB</span><span class="pl-k">*</span>j};<span class="pl-c1">I</span>.<span class="pl-en">b2Joint</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">m_edgeA</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_edgeB</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_localCenterA</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_localCenterB</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L332" class="blob-num js-line-number" data-line-number="332"></td>
        <td id="LC332" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">w</span>};<span class="pl-c1">I</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetType</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_type</span>};<span class="pl-c1">I</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAnchorA</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">null</span>};<span class="pl-c1">I</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAnchorB</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">null</span>};<span class="pl-c1">I</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetReactionForce</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">null</span>};<span class="pl-c1">I</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetReactionTorque</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">0</span>};<span class="pl-c1">I</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetBodyA</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>};<span class="pl-c1">I</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetBodyB</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>};<span class="pl-c1">I</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetNext</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_next</span>};<span class="pl-c1">I</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetUserData</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_userData</span>};<span class="pl-c1">I</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetUserData</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_userData</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L333" class="blob-num js-line-number" data-line-number="333"></td>
        <td id="LC333" class="blob-code blob-code-inner js-file-line">d};<span class="pl-c1">I</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">IsActive</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>.<span class="pl-en">IsActive</span>()<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>.<span class="pl-en">IsActive</span>()};<span class="pl-c1">I</span>.<span class="pl-en">Create</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">switch</span>(<span class="pl-smi">d</span>.<span class="pl-c1">type</span>){<span class="pl-k">case</span> <span class="pl-c1">I</span>.<span class="pl-smi">e_distanceJoint</span>:h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">U</span>(d <span class="pl-k">instanceof</span> p<span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">null</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">I</span>.<span class="pl-smi">e_mouseJoint</span>:h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">u</span>(d <span class="pl-k">instanceof</span> <span class="pl-c1">D</span><span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">null</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">I</span>.<span class="pl-smi">e_prismaticJoint</span>:h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">H</span>(d <span class="pl-k">instanceof</span> <span class="pl-c1">O</span><span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">null</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">I</span>.<span class="pl-smi">e_revoluteJoint</span>:h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">N</span>(d <span class="pl-k">instanceof</span> <span class="pl-c1">S</span><span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">null</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">I</span>.<span class="pl-smi">e_pulleyJoint</span>:h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">E</span>(d <span class="pl-k">instanceof</span> <span class="pl-c1">R</span><span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">null</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">I</span>.<span class="pl-smi">e_gearJoint</span>:h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">V</span>(d <span class="pl-k">instanceof</span> <span class="pl-c1">M</span><span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">null</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">I</span>.<span class="pl-smi">e_lineJoint</span>:h<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L334" class="blob-num js-line-number" data-line-number="334"></td>
        <td id="LC334" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">k</span>(d <span class="pl-k">instanceof</span> z<span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">null</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">I</span>.<span class="pl-smi">e_weldJoint</span>:h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">aa</span>(d <span class="pl-k">instanceof</span> <span class="pl-c1">Z</span><span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">null</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">I</span>.<span class="pl-smi">e_frictionJoint</span>:h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">B</span>(d <span class="pl-k">instanceof</span> <span class="pl-c1">Q</span><span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">null</span>)}<span class="pl-k">return</span> h};<span class="pl-c1">I</span>.<span class="pl-en">Destroy</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">I</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2Joint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-c1">F</span>.<span class="pl-en">b2Assert</span>(<span class="pl-smi">d</span>.<span class="pl-smi">bodyA</span><span class="pl-k">!=</span><span class="pl-smi">d</span>.<span class="pl-smi">bodyB</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_type</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">type</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_next</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_prev</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">bodyA</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">bodyB</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_collideConnected</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">collideConnected</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_islandFlag</span><span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_userData</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">userData</span>};<span class="pl-c1">I</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">InitVelocityConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">I</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">SolveVelocityConstraints</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L335" class="blob-num js-line-number" data-line-number="335"></td>
        <td id="LC335" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(){};<span class="pl-c1">I</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">FinalizeVelocityConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">I</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolvePositionConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">false</span>};<span class="pl-smi">Box2D</span>.<span class="pl-smi">postDefs</span>.<span class="pl-c1">push</span>(<span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-smi">e_unknownJoint</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-smi">e_revoluteJoint</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-smi">e_prismaticJoint</span><span class="pl-k">=</span><span class="pl-c1">2</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-smi">e_distanceJoint</span><span class="pl-k">=</span><span class="pl-c1">3</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-smi">e_pulleyJoint</span><span class="pl-k">=</span><span class="pl-c1">4</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-smi">e_mouseJoint</span><span class="pl-k">=</span><span class="pl-c1">5</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-smi">e_gearJoint</span><span class="pl-k">=</span><span class="pl-c1">6</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-smi">e_lineJoint</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L336" class="blob-num js-line-number" data-line-number="336"></td>
        <td id="LC336" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">7</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-smi">e_weldJoint</span><span class="pl-k">=</span><span class="pl-c1">8</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-smi">e_frictionJoint</span><span class="pl-k">=</span><span class="pl-c1">9</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-smi">e_inactiveLimit</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-smi">e_atLowerLimit</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-smi">e_atUpperLimit</span><span class="pl-k">=</span><span class="pl-c1">2</span>;<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-smi">e_equalLimits</span><span class="pl-k">=</span><span class="pl-c1">3</span>});<span class="pl-c1">W</span>.<span class="pl-en">b2JointDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">W</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2JointDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-c1">I</span>.<span class="pl-smi">e_unknownJoint</span>;<span class="pl-c1">this</span>.<span class="pl-smi">bodyB</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">bodyA</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">userData</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">collideConnected</span><span class="pl-k">=</span><span class="pl-c1">false</span>};<span class="pl-c1">Y</span>.<span class="pl-en">b2JointEdge</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-smi">Box2D</span>.<span class="pl-en">inherit</span>(k,<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2Joint</span>);</td>
      </tr>
      <tr>
        <td id="L337" class="blob-num js-line-number" data-line-number="337"></td>
        <td id="LC337" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">__super</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-c1">prototype</span>;<span class="pl-smi">k</span>.<span class="pl-en">b2LineJoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_localXAxis1</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_localYAxis1</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_K</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">G</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAnchorA</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>.<span class="pl-en">GetWorldPoint</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>)};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAnchorB</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>.<span class="pl-en">GetWorldPoint</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>)};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">GetReactionForce</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L338" class="blob-num js-line-number" data-line-number="338"></td>
        <td id="LC338" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">w</span>(d<span class="pl-k">*</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_motorImpulse</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">y</span>)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">x</span>),d<span class="pl-k">*</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_motorImpulse</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">y</span>)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">y</span>))};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetReactionTorque</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> d<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">y</span>};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetJointTranslation</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>,h<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>,l<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-en">GetWorldPoint</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>),j<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-en">GetWorldPoint</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>);h<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">l</span>.<span class="pl-c1">x</span>;l<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">l</span>.<span class="pl-c1">y</span>;d<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-en">GetWorldVector</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_localXAxis1</span>);</td>
      </tr>
      <tr>
        <td id="L339" class="blob-num js-line-number" data-line-number="339"></td>
        <td id="LC339" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> <span class="pl-smi">d</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>h<span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>l};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetJointSpeed</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>,h<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>,l;l<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;<span class="pl-k">var</span> j<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">d</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">x</span>,o<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">d</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">y</span>,q<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>j<span class="pl-k">+</span><span class="pl-smi">l</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>o;o<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>j<span class="pl-k">+</span><span class="pl-smi">l</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>o;j<span class="pl-k">=</span>q;l<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">x</span>,a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">y</span>;q<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>n<span class="pl-k">+</span><span class="pl-smi">l</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>a;a<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>n<span class="pl-k">+</span><span class="pl-smi">l</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>a;n<span class="pl-k">=</span>q;l<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>n<span class="pl-k">-</span>(<span class="pl-smi">d</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>j);q<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>a<span class="pl-k">-</span>(<span class="pl-smi">d</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>o);<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-en">GetWorldVector</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_localXAxis1</span>),</td>
      </tr>
      <tr>
        <td id="L340" class="blob-num js-line-number" data-line-number="340"></td>
        <td id="LC340" class="blob-code blob-code-inner js-file-line">g<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">m_linearVelocity</span>,b<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_linearVelocity</span>;d<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">m_angularVelocity</span>;h<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_angularVelocity</span>;<span class="pl-k">return</span> l<span class="pl-k">*-</span>d<span class="pl-k">*</span><span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>q<span class="pl-k">*</span>d<span class="pl-k">*</span><span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>(<span class="pl-smi">b</span>.<span class="pl-c1">x</span><span class="pl-k">+-</span>h<span class="pl-k">*</span>a<span class="pl-k">-</span><span class="pl-smi">g</span>.<span class="pl-c1">x</span><span class="pl-k">-</span> <span class="pl-k">-</span>d<span class="pl-k">*</span>o)<span class="pl-k">+</span><span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>(<span class="pl-smi">b</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>h<span class="pl-k">*</span>n<span class="pl-k">-</span><span class="pl-smi">g</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>d<span class="pl-k">*</span>j))};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">IsLimitEnabled</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_enableLimit</span>};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">EnableLimit</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>.<span class="pl-en">SetAwake</span>(<span class="pl-c1">true</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>.<span class="pl-en">SetAwake</span>(<span class="pl-c1">true</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_enableLimit</span><span class="pl-k">=</span>d};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetLowerLimit</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_lowerTranslation</span>};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetUpperLimit</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_upperTranslation</span>};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetLimits</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>,</td>
      </tr>
      <tr>
        <td id="L341" class="blob-num js-line-number" data-line-number="341"></td>
        <td id="LC341" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">h</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(h<span class="pl-k">===</span><span class="pl-c1">undefined</span>)h<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>.<span class="pl-en">SetAwake</span>(<span class="pl-c1">true</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>.<span class="pl-en">SetAwake</span>(<span class="pl-c1">true</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_lowerTranslation</span><span class="pl-k">=</span>d;<span class="pl-c1">this</span>.<span class="pl-smi">m_upperTranslation</span><span class="pl-k">=</span>h};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">IsMotorEnabled</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_enableMotor</span>};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">EnableMotor</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>.<span class="pl-en">SetAwake</span>(<span class="pl-c1">true</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>.<span class="pl-en">SetAwake</span>(<span class="pl-c1">true</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_enableMotor</span><span class="pl-k">=</span>d};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetMotorSpeed</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>.<span class="pl-en">SetAwake</span>(<span class="pl-c1">true</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>.<span class="pl-en">SetAwake</span>(<span class="pl-c1">true</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_motorSpeed</span><span class="pl-k">=</span>d};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetMotorSpeed</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_motorSpeed</span>};</td>
      </tr>
      <tr>
        <td id="L342" class="blob-num js-line-number" data-line-number="342"></td>
        <td id="LC342" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetMaxMotorForce</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>.<span class="pl-en">SetAwake</span>(<span class="pl-c1">true</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>.<span class="pl-en">SetAwake</span>(<span class="pl-c1">true</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_maxMotorForce</span><span class="pl-k">=</span>d};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetMaxMotorForce</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_maxMotorForce</span>};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetMotorForce</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_motorImpulse</span>};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2LineJoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-c1">this</span>.<span class="pl-smi">__super</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,d);<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">d</span>.<span class="pl-smi">localAnchorA</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">d</span>.<span class="pl-smi">localAnchorB</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_localXAxis1</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">d</span>.<span class="pl-smi">localAxisA</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_localYAxis1</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localXAxis1</span>.<span class="pl-c1">y</span>;</td>
      </tr>
      <tr>
        <td id="L343" class="blob-num js-line-number" data-line-number="343"></td>
        <td id="LC343" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_localYAxis1</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localXAxis1</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-en">SetZero</span>();<span class="pl-c1">this</span>.<span class="pl-smi">m_motorImpulse</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_motorMass</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_lowerTranslation</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">lowerTranslation</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_upperTranslation</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">upperTranslation</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_maxMotorForce</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">maxMotorForce</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_motorSpeed</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">motorSpeed</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_enableLimit</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">enableLimit</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_enableMotor</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">enableMotor</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_limitState</span><span class="pl-k">=</span><span class="pl-c1">I</span>.<span class="pl-smi">e_inactiveLimit</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-en">SetZero</span>();<span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-en">SetZero</span>()};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">InitVelocityConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>,l<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>,j,o<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_localCenterA</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">h</span>.<span class="pl-en">GetLocalCenter</span>());</td>
      </tr>
      <tr>
        <td id="L344" class="blob-num js-line-number" data-line-number="344"></td>
        <td id="LC344" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_localCenterB</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">l</span>.<span class="pl-en">GetLocalCenter</span>());<span class="pl-k">var</span> q<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-en">GetTransform</span>();<span class="pl-smi">l</span>.<span class="pl-en">GetTransform</span>();j<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localCenterA</span>.<span class="pl-c1">x</span>,a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localCenterA</span>.<span class="pl-c1">y</span>;o<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>n<span class="pl-k">+</span><span class="pl-smi">j</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>a;a<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>n<span class="pl-k">+</span><span class="pl-smi">j</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>a;n<span class="pl-k">=</span>o;j<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localCenterB</span>.<span class="pl-c1">x</span>,g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localCenterB</span>.<span class="pl-c1">y</span>;o<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>c<span class="pl-k">+</span><span class="pl-smi">j</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>g;g<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>c<span class="pl-k">+</span><span class="pl-smi">j</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>g;c<span class="pl-k">=</span>o;j<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>c<span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">-</span>n;o<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>g<span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">m_invMassA</span><span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_invMass</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_invMassB</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L345" class="blob-num js-line-number" data-line-number="345"></td>
        <td id="LC345" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">l</span>.<span class="pl-smi">m_invMass</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_invIA</span><span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_invI</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_invIB</span><span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_invI</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">y</span>.<span class="pl-en">MulMV</span>(<span class="pl-smi">q</span>.<span class="pl-c1">R</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_localXAxis1</span>));<span class="pl-c1">this</span>.<span class="pl-smi">m_a1</span><span class="pl-k">=</span>(j<span class="pl-k">+</span>n)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>(o<span class="pl-k">+</span>a)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_a2</span><span class="pl-k">=</span>c<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>g<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_motorMass</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassA</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassB</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invIA</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a1</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a1</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invIB</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a2</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a2</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_motorMass</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_motorMass</span><span class="pl-k">&gt;</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span><span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">m_motorMass</span><span class="pl-k">:</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">y</span>.<span class="pl-en">MulMV</span>(<span class="pl-smi">q</span>.<span class="pl-c1">R</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_localYAxis1</span>));<span class="pl-c1">this</span>.<span class="pl-smi">m_s1</span><span class="pl-k">=</span>(j<span class="pl-k">+</span>n)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>(o<span class="pl-k">+</span>a)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_s2</span><span class="pl-k">=</span>c<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-c1">y</span><span class="pl-k">-</span></td>
      </tr>
      <tr>
        <td id="L346" class="blob-num js-line-number" data-line-number="346"></td>
        <td id="LC346" class="blob-code blob-code-inner js-file-line">g<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-c1">x</span>;q<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassA</span>;n<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassB</span>;a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invIA</span>;c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invIB</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>q<span class="pl-k">+</span>n<span class="pl-k">+</span>a<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s1</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s1</span><span class="pl-k">+</span>c<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s2</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s2</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s1</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a1</span><span class="pl-k">+</span>c<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s2</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a2</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>q<span class="pl-k">+</span>n<span class="pl-k">+</span>a<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a1</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a1</span><span class="pl-k">+</span>c<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a2</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a2</span>;<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_enableLimit</span>){j<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>j<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>o;<span class="pl-k">if</span>(<span class="pl-smi">y</span>.<span class="pl-en">Abs</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_upperTranslation</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_lowerTranslation</span>)<span class="pl-k">&lt;</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_linearSlop</span>)<span class="pl-c1">this</span>.<span class="pl-smi">m_limitState</span><span class="pl-k">=</span><span class="pl-c1">I</span>.<span class="pl-smi">e_equalLimits</span>;<span class="pl-k">else</span> <span class="pl-k">if</span>(j<span class="pl-k">&lt;=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_lowerTranslation</span>){<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_limitState</span><span class="pl-k">!=</span></td>
      </tr>
      <tr>
        <td id="L347" class="blob-num js-line-number" data-line-number="347"></td>
        <td id="LC347" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">I</span>.<span class="pl-smi">e_atLowerLimit</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_limitState</span><span class="pl-k">=</span><span class="pl-c1">I</span>.<span class="pl-smi">e_atLowerLimit</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>}}<span class="pl-k">else</span> <span class="pl-k">if</span>(j<span class="pl-k">&gt;=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_upperTranslation</span>){<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_limitState</span><span class="pl-k">!=</span><span class="pl-c1">I</span>.<span class="pl-smi">e_atUpperLimit</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_limitState</span><span class="pl-k">=</span><span class="pl-c1">I</span>.<span class="pl-smi">e_atUpperLimit</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>}}<span class="pl-k">else</span>{<span class="pl-c1">this</span>.<span class="pl-smi">m_limitState</span><span class="pl-k">=</span><span class="pl-c1">I</span>.<span class="pl-smi">e_inactiveLimit</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>}}<span class="pl-k">else</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_limitState</span><span class="pl-k">=</span><span class="pl-c1">I</span>.<span class="pl-smi">e_inactiveLimit</span>;<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_enableMotor</span><span class="pl-k">==</span><span class="pl-c1">false</span>)<span class="pl-c1">this</span>.<span class="pl-smi">m_motorImpulse</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-smi">d</span>.<span class="pl-smi">warmStarting</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span><span class="pl-smi">d</span>.<span class="pl-smi">dtRatio</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span><span class="pl-smi">d</span>.<span class="pl-smi">dtRatio</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_motorImpulse</span><span class="pl-k">*=</span><span class="pl-smi">d</span>.<span class="pl-smi">dtRatio</span>;d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_motorImpulse</span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L348" class="blob-num js-line-number" data-line-number="348"></td>
        <td id="LC348" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">y</span>)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">x</span>;j<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_motorImpulse</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">y</span>)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">y</span>;o<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s1</span><span class="pl-k">+</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_motorImpulse</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">y</span>)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a1</span>;q<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s2</span><span class="pl-k">+</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_motorImpulse</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">y</span>)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a2</span>;<span class="pl-smi">h</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassA</span><span class="pl-k">*</span>d;<span class="pl-smi">h</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassA</span><span class="pl-k">*</span>j;<span class="pl-smi">h</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">-=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invIA</span><span class="pl-k">*</span>o;<span class="pl-smi">l</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassB</span><span class="pl-k">*</span>d;<span class="pl-smi">l</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassB</span><span class="pl-k">*</span>j;<span class="pl-smi">l</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invIB</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L349" class="blob-num js-line-number" data-line-number="349"></td>
        <td id="LC349" class="blob-code blob-code-inner js-file-line">q}<span class="pl-k">else</span>{<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-en">SetZero</span>();<span class="pl-c1">this</span>.<span class="pl-smi">m_motorImpulse</span><span class="pl-k">=</span><span class="pl-c1">0</span>}};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolveVelocityConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>,l<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>,j<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_linearVelocity</span>,o<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_angularVelocity</span>,q<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_linearVelocity</span>,n<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_angularVelocity</span>,a<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span><span class="pl-c1">0</span>,b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_enableMotor</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_limitState</span><span class="pl-k">!=</span><span class="pl-c1">I</span>.<span class="pl-smi">e_equalLimits</span>){b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_motorMass</span><span class="pl-k">*</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_motorSpeed</span><span class="pl-k">-</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>(<span class="pl-smi">q</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">j</span>.<span class="pl-c1">x</span>)<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>(<span class="pl-smi">q</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">j</span>.<span class="pl-c1">y</span>)<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a2</span><span class="pl-k">*</span>n<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a1</span><span class="pl-k">*</span>o));a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_motorImpulse</span>;c<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">dt</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_maxMotorForce</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_motorImpulse</span><span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-en">Clamp</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_motorImpulse</span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L350" class="blob-num js-line-number" data-line-number="350"></td>
        <td id="LC350" class="blob-code blob-code-inner js-file-line">b,<span class="pl-k">-</span>c,c);b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_motorImpulse</span><span class="pl-k">-</span>a;a<span class="pl-k">=</span>b<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">x</span>;c<span class="pl-k">=</span>b<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">y</span>;g<span class="pl-k">=</span>b<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a1</span>;b<span class="pl-k">=</span>b<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a2</span>;<span class="pl-smi">j</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassA</span><span class="pl-k">*</span>a;<span class="pl-smi">j</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassA</span><span class="pl-k">*</span>c;o<span class="pl-k">-=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invIA</span><span class="pl-k">*</span>g;<span class="pl-smi">q</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassB</span><span class="pl-k">*</span>a;<span class="pl-smi">q</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassB</span><span class="pl-k">*</span>c;n<span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invIB</span><span class="pl-k">*</span>b}c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>(<span class="pl-smi">q</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">j</span>.<span class="pl-c1">x</span>)<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>(<span class="pl-smi">q</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">j</span>.<span class="pl-c1">y</span>)<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s2</span><span class="pl-k">*</span>n<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s1</span><span class="pl-k">*</span>o;<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_enableLimit</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_limitState</span><span class="pl-k">!=</span><span class="pl-c1">I</span>.<span class="pl-smi">e_inactiveLimit</span>){g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>(<span class="pl-smi">q</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">j</span>.<span class="pl-c1">x</span>)<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>(<span class="pl-smi">q</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">j</span>.<span class="pl-c1">y</span>)<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a2</span><span class="pl-k">*</span>n<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a1</span><span class="pl-k">*</span>o;a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-en">Copy</span>();d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-en">Solve</span>(<span class="pl-k">new</span> <span class="pl-en">w</span>,<span class="pl-k">-</span>c,<span class="pl-k">-</span>g);<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-en">Add</span>(d);</td>
      </tr>
      <tr>
        <td id="L351" class="blob-num js-line-number" data-line-number="351"></td>
        <td id="LC351" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_limitState</span><span class="pl-k">==</span><span class="pl-c1">I</span>.<span class="pl-smi">e_atLowerLimit</span>)<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-en">Max</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">y</span>,<span class="pl-c1">0</span>);<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_limitState</span><span class="pl-k">==</span><span class="pl-c1">I</span>.<span class="pl-smi">e_atUpperLimit</span>)<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-en">Min</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">y</span>,<span class="pl-c1">0</span>);c<span class="pl-k">=</span><span class="pl-k">-</span>c<span class="pl-k">-</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span>;g<span class="pl-k">=</span><span class="pl-c1">0</span>;g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">!=</span><span class="pl-c1">0</span><span class="pl-k">?</span>c<span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>g;<span class="pl-smi">d</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>;<span class="pl-smi">d</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>;a<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">x</span>;c<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">y</span>;g<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s1</span><span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a1</span>;b<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s2</span><span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a2</span>}<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">!=</span><span class="pl-c1">0</span><span class="pl-k">?</span><span class="pl-k">-</span>c<span class="pl-k">/</span></td>
      </tr>
      <tr>
        <td id="L352" class="blob-num js-line-number" data-line-number="352"></td>
        <td id="LC352" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">:</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span>d;a<span class="pl-k">=</span>d<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-c1">x</span>;c<span class="pl-k">=</span>d<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-c1">y</span>;g<span class="pl-k">=</span>d<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s1</span>;b<span class="pl-k">=</span>d<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s2</span>}<span class="pl-smi">j</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassA</span><span class="pl-k">*</span>a;<span class="pl-smi">j</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassA</span><span class="pl-k">*</span>c;o<span class="pl-k">-=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invIA</span><span class="pl-k">*</span>g;<span class="pl-smi">q</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassB</span><span class="pl-k">*</span>a;<span class="pl-smi">q</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassB</span><span class="pl-k">*</span>c;n<span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invIB</span><span class="pl-k">*</span>b;<span class="pl-smi">h</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-en">SetV</span>(j);<span class="pl-smi">h</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">=</span>o;<span class="pl-smi">l</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-en">SetV</span>(q);<span class="pl-smi">l</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">=</span>n};<span class="pl-smi">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolvePositionConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>,h<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>,l<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>,j<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a</span>,o<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>,q<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a</span>,n,a<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span><span class="pl-c1">0</span>,b<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span>n<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">=</span><span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L353" class="blob-num js-line-number" data-line-number="353"></td>
        <td id="LC353" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> m<span class="pl-k">=</span><span class="pl-c1">0</span>,r<span class="pl-k">=</span><span class="pl-c1">G</span>.<span class="pl-en">FromAngle</span>(j);g<span class="pl-k">=</span><span class="pl-c1">G</span>.<span class="pl-en">FromAngle</span>(q);n<span class="pl-k">=</span>r;f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localCenterA</span>.<span class="pl-c1">x</span>;<span class="pl-k">var</span> s<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localCenterA</span>.<span class="pl-c1">y</span>;a<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>f<span class="pl-k">+</span><span class="pl-smi">n</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>s;s<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>f<span class="pl-k">+</span><span class="pl-smi">n</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>s;f<span class="pl-k">=</span>a;n<span class="pl-k">=</span>g;g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localCenterB</span>.<span class="pl-c1">x</span>;b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localCenterB</span>.<span class="pl-c1">y</span>;a<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>g<span class="pl-k">+</span><span class="pl-smi">n</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>b;b<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>g<span class="pl-k">+</span><span class="pl-smi">n</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>b;g<span class="pl-k">=</span>a;n<span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>g<span class="pl-k">-</span><span class="pl-smi">l</span>.<span class="pl-c1">x</span><span class="pl-k">-</span>f;a<span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>b<span class="pl-k">-</span><span class="pl-smi">l</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>s;<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_enableLimit</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span><span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-en">MulMV</span>(r,<span class="pl-c1">this</span>.<span class="pl-smi">m_localXAxis1</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_a1</span><span class="pl-k">=</span>(n<span class="pl-k">+</span>f)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>(a<span class="pl-k">+</span>s)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_a2</span><span class="pl-k">=</span>g<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">y</span><span class="pl-k">-</span></td>
      </tr>
      <tr>
        <td id="L354" class="blob-num js-line-number" data-line-number="354"></td>
        <td id="LC354" class="blob-code blob-code-inner js-file-line">b<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">x</span>;<span class="pl-k">var</span> v<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>n<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>a;<span class="pl-k">if</span>(<span class="pl-smi">y</span>.<span class="pl-en">Abs</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_upperTranslation</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_lowerTranslation</span>)<span class="pl-k">&lt;</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_linearSlop</span>){m<span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-en">Clamp</span>(v,<span class="pl-k">-</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_maxLinearCorrection</span>,<span class="pl-c1">F</span>.<span class="pl-smi">b2_maxLinearCorrection</span>);e<span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-en">Abs</span>(v);c<span class="pl-k">=</span><span class="pl-c1">true</span>}<span class="pl-k">else</span> <span class="pl-k">if</span>(v<span class="pl-k">&lt;=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_lowerTranslation</span>){m<span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-en">Clamp</span>(v<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_lowerTranslation</span><span class="pl-k">+</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_linearSlop</span>,<span class="pl-k">-</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_maxLinearCorrection</span>,<span class="pl-c1">0</span>);e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_lowerTranslation</span><span class="pl-k">-</span>v;c<span class="pl-k">=</span><span class="pl-c1">true</span>}<span class="pl-k">else</span> <span class="pl-k">if</span>(v<span class="pl-k">&gt;=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_upperTranslation</span>){m<span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-en">Clamp</span>(v<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_upperTranslation</span><span class="pl-k">+</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_linearSlop</span>,<span class="pl-c1">0</span>,<span class="pl-c1">F</span>.<span class="pl-smi">b2_maxLinearCorrection</span>);e<span class="pl-k">=</span>v<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_upperTranslation</span>;</td>
      </tr>
      <tr>
        <td id="L355" class="blob-num js-line-number" data-line-number="355"></td>
        <td id="LC355" class="blob-code blob-code-inner js-file-line">c<span class="pl-k">=</span><span class="pl-c1">true</span>}}<span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span><span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-en">MulMV</span>(r,<span class="pl-c1">this</span>.<span class="pl-smi">m_localYAxis1</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_s1</span><span class="pl-k">=</span>(n<span class="pl-k">+</span>f)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>(a<span class="pl-k">+</span>s)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_s2</span><span class="pl-k">=</span>g<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>b<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-c1">x</span>;r<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;s<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>n<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>a;e<span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-en">Max</span>(e,<span class="pl-smi">y</span>.<span class="pl-en">Abs</span>(s));f<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(c){c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassA</span>;g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassB</span>;b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invIA</span>;n<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invIB</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>c<span class="pl-k">+</span>g<span class="pl-k">+</span>b<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s1</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s1</span><span class="pl-k">+</span>n<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s2</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s2</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>b<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s1</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a1</span><span class="pl-k">+</span>n<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s2</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a2</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>c<span class="pl-k">+</span>g<span class="pl-k">+</span>b<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a1</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a1</span><span class="pl-k">+</span>n<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a2</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a2</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-en">Solve</span>(r,</td>
      </tr>
      <tr>
        <td id="L356" class="blob-num js-line-number" data-line-number="356"></td>
        <td id="LC356" class="blob-code blob-code-inner js-file-line"><span class="pl-k">-</span>s,<span class="pl-k">-</span>m)}<span class="pl-k">else</span>{c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassA</span>;g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassB</span>;b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invIA</span>;n<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invIB</span>;m<span class="pl-k">=</span>c<span class="pl-k">+</span>g<span class="pl-k">+</span>b<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s1</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s1</span><span class="pl-k">+</span>n<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s2</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s2</span>;c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">=</span>m<span class="pl-k">!=</span><span class="pl-c1">0</span><span class="pl-k">?</span><span class="pl-k">-</span>s<span class="pl-k">/</span>m<span class="pl-k">:</span><span class="pl-c1">0</span>;<span class="pl-smi">r</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>c;<span class="pl-smi">r</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>}m<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">r</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">x</span>;c<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-smi">r</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">y</span>;s<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s1</span><span class="pl-k">+</span><span class="pl-smi">r</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a1</span>;r<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s2</span><span class="pl-k">+</span><span class="pl-smi">r</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a2</span>;<span class="pl-smi">l</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassA</span><span class="pl-k">*</span>m;<span class="pl-smi">l</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassA</span><span class="pl-k">*</span>c;j<span class="pl-k">-=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invIA</span><span class="pl-k">*</span>s;<span class="pl-smi">o</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassB</span><span class="pl-k">*</span>m;<span class="pl-smi">o</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassB</span><span class="pl-k">*</span>c;q<span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invIB</span><span class="pl-k">*</span>r;<span class="pl-smi">d</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a</span><span class="pl-k">=</span>j;<span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a</span><span class="pl-k">=</span>q;<span class="pl-smi">d</span>.<span class="pl-en">SynchronizeTransform</span>();<span class="pl-smi">h</span>.<span class="pl-en">SynchronizeTransform</span>();<span class="pl-k">return</span> e<span class="pl-k">&lt;=</span></td>
      </tr>
      <tr>
        <td id="L357" class="blob-num js-line-number" data-line-number="357"></td>
        <td id="LC357" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">F</span>.<span class="pl-smi">b2_linearSlop</span><span class="pl-k">&amp;&amp;</span>f<span class="pl-k">&lt;=</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_angularSlop</span>};<span class="pl-smi">Box2D</span>.<span class="pl-en">inherit</span>(z,<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2JointDef</span>);<span class="pl-smi">z</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">__super</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2JointDef</span>.<span class="pl-c1">prototype</span>;<span class="pl-smi">z</span>.<span class="pl-en">b2LineJointDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2JointDef</span>.<span class="pl-smi">b2JointDef</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>);<span class="pl-c1">this</span>.<span class="pl-smi">localAnchorA</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-c1">this</span>.<span class="pl-smi">localAnchorB</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-c1">this</span>.<span class="pl-smi">localAxisA</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>};<span class="pl-smi">z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2LineJointDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">__super</span>.<span class="pl-smi">b2JointDef</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-c1">I</span>.<span class="pl-smi">e_lineJoint</span>;<span class="pl-c1">this</span>.<span class="pl-smi">localAxisA</span>.<span class="pl-en">Set</span>(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-smi">enableLimit</span><span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-c1">this</span>.<span class="pl-smi">upperTranslation</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">lowerTranslation</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L358" class="blob-num js-line-number" data-line-number="358"></td>
        <td id="LC358" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">enableMotor</span><span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-c1">this</span>.<span class="pl-smi">motorSpeed</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">maxMotorForce</span><span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-smi">z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Initialize</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>,<span class="pl-smi">h</span>,<span class="pl-smi">l</span>,<span class="pl-smi">j</span>){<span class="pl-c1">this</span>.<span class="pl-smi">bodyA</span><span class="pl-k">=</span>d;<span class="pl-c1">this</span>.<span class="pl-smi">bodyB</span><span class="pl-k">=</span>h;<span class="pl-c1">this</span>.<span class="pl-smi">localAnchorA</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">bodyA</span>.<span class="pl-en">GetLocalPoint</span>(l);<span class="pl-c1">this</span>.<span class="pl-smi">localAnchorB</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">bodyB</span>.<span class="pl-en">GetLocalPoint</span>(l);<span class="pl-c1">this</span>.<span class="pl-smi">localAxisA</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">bodyA</span>.<span class="pl-en">GetLocalVector</span>(j)};<span class="pl-smi">Box2D</span>.<span class="pl-en">inherit</span>(u,<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2Joint</span>);<span class="pl-smi">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">__super</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-c1">prototype</span>;<span class="pl-smi">u</span>.<span class="pl-en">b2MouseJoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>);<span class="pl-c1">this</span>.<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">G</span>;<span class="pl-c1">this</span>.<span class="pl-c1">K1</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">G</span>;<span class="pl-c1">this</span>.<span class="pl-c1">K2</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">G</span>;</td>
      </tr>
      <tr>
        <td id="L359" class="blob-num js-line-number" data-line-number="359"></td>
        <td id="LC359" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_target</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">G</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_C</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>};<span class="pl-smi">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAnchorA</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_target</span>};<span class="pl-smi">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAnchorB</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>.<span class="pl-en">GetWorldPoint</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor</span>)};<span class="pl-smi">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetReactionForce</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">w</span>(d<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">x</span>,d<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">y</span>)};<span class="pl-smi">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetReactionTorque</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">0</span>};<span class="pl-smi">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetTarget</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_target</span>};<span class="pl-smi">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetTarget</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>.<span class="pl-en">IsAwake</span>()<span class="pl-k">==</span></td>
      </tr>
      <tr>
        <td id="L360" class="blob-num js-line-number" data-line-number="360"></td>
        <td id="LC360" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">false</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>.<span class="pl-en">SetAwake</span>(<span class="pl-c1">true</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_target</span><span class="pl-k">=</span>d};<span class="pl-smi">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetMaxForce</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_maxForce</span>};<span class="pl-smi">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetMaxForce</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_maxForce</span><span class="pl-k">=</span>d};<span class="pl-smi">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetFrequency</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_frequencyHz</span>};<span class="pl-smi">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetFrequency</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_frequencyHz</span><span class="pl-k">=</span>d};<span class="pl-smi">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetDampingRatio</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_dampingRatio</span>};<span class="pl-smi">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetDampingRatio</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_dampingRatio</span><span class="pl-k">=</span>d};<span class="pl-smi">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">b2MouseJoint</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L361" class="blob-num js-line-number" data-line-number="361"></td>
        <td id="LC361" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-c1">this</span>.<span class="pl-smi">__super</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,d);<span class="pl-c1">this</span>.<span class="pl-smi">m_target</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">d</span>.<span class="pl-c1">target</span>);<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_target</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span>,l<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_target</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span>,j<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>h<span class="pl-k">*</span><span class="pl-smi">j</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>l<span class="pl-k">*</span><span class="pl-smi">j</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>h<span class="pl-k">*</span><span class="pl-smi">j</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>l<span class="pl-k">*</span><span class="pl-smi">j</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_maxForce</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">maxForce</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-en">SetZero</span>();<span class="pl-c1">this</span>.<span class="pl-smi">m_frequencyHz</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">frequencyHz</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_dampingRatio</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">dampingRatio</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_gamma</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_beta</span><span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-smi">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">InitVelocityConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>,l<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-en">GetMass</span>(),</td>
      </tr>
      <tr>
        <td id="L362" class="blob-num js-line-number" data-line-number="362"></td>
        <td id="LC362" class="blob-code blob-code-inner js-file-line">j<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_frequencyHz</span>,o<span class="pl-k">=</span>l<span class="pl-k">*</span>j<span class="pl-k">*</span>j;<span class="pl-c1">this</span>.<span class="pl-smi">m_gamma</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">dt</span><span class="pl-k">*</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>l<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_dampingRatio</span><span class="pl-k">*</span>j<span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-smi">dt</span><span class="pl-k">*</span>o);<span class="pl-c1">this</span>.<span class="pl-smi">m_gamma</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_gamma</span><span class="pl-k">!=</span><span class="pl-c1">0</span><span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">m_gamma</span><span class="pl-k">:</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_beta</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">dt</span><span class="pl-k">*</span>o<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_gamma</span>;o<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;l<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">x</span>;j<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">y</span>;<span class="pl-k">var</span> q<span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>l<span class="pl-k">+</span><span class="pl-smi">o</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>j;j<span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>l<span class="pl-k">+</span><span class="pl-smi">o</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>j;l<span class="pl-k">=</span>q;o<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_invMass</span>;q<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_invI</span>;<span class="pl-c1">this</span>.<span class="pl-c1">K1</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>o;<span class="pl-c1">this</span>.<span class="pl-c1">K1</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-c1">K1</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-c1">K1</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>o;<span class="pl-c1">this</span>.<span class="pl-c1">K2</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>q<span class="pl-k">*</span>j<span class="pl-k">*</span>j;<span class="pl-c1">this</span>.<span class="pl-c1">K2</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-k">-</span>q<span class="pl-k">*</span>l<span class="pl-k">*</span>j;<span class="pl-c1">this</span>.<span class="pl-c1">K2</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-k">-</span>q<span class="pl-k">*</span>l<span class="pl-k">*</span>j;<span class="pl-c1">this</span>.<span class="pl-c1">K2</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L363" class="blob-num js-line-number" data-line-number="363"></td>
        <td id="LC363" class="blob-code blob-code-inner js-file-line">q<span class="pl-k">*</span>l<span class="pl-k">*</span>l;<span class="pl-c1">this</span>.<span class="pl-c1">K</span>.<span class="pl-en">SetM</span>(<span class="pl-c1">this</span>.<span class="pl-c1">K1</span>);<span class="pl-c1">this</span>.<span class="pl-c1">K</span>.<span class="pl-en">AddM</span>(<span class="pl-c1">this</span>.<span class="pl-c1">K2</span>);<span class="pl-c1">this</span>.<span class="pl-c1">K</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_gamma</span>;<span class="pl-c1">this</span>.<span class="pl-c1">K</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_gamma</span>;<span class="pl-c1">this</span>.<span class="pl-c1">K</span>.<span class="pl-en">GetInverse</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_C</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>l<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_target</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_C</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>j<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_target</span>.<span class="pl-c1">y</span>;<span class="pl-smi">h</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">*=</span><span class="pl-c1">0.98</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span><span class="pl-smi">d</span>.<span class="pl-smi">dtRatio</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span><span class="pl-smi">d</span>.<span class="pl-smi">dtRatio</span>;<span class="pl-smi">h</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span>o<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">x</span>;<span class="pl-smi">h</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span>o<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">y</span>;<span class="pl-smi">h</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">+=</span>q<span class="pl-k">*</span>(l<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>j<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">x</span>)};<span class="pl-smi">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolveVelocityConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">var</span> h<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L364" class="blob-num js-line-number" data-line-number="364"></td>
        <td id="LC364" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>,l,j<span class="pl-k">=</span><span class="pl-c1">0</span>,o<span class="pl-k">=</span><span class="pl-c1">0</span>;l<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;<span class="pl-k">var</span> q<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">x</span>,n<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">y</span>;j<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>q<span class="pl-k">+</span><span class="pl-smi">l</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>n;n<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>q<span class="pl-k">+</span><span class="pl-smi">l</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>n;q<span class="pl-k">=</span>j;j<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span><span class="pl-k">+-</span><span class="pl-smi">h</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">*</span>n;<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-smi">h</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">*</span>q;l<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>;j<span class="pl-k">=</span>j<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_beta</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_C</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_gamma</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">x</span>;o<span class="pl-k">=</span>a<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_beta</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_C</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_gamma</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">y</span>;a<span class="pl-k">=</span><span class="pl-k">-</span>(<span class="pl-smi">l</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>j<span class="pl-k">+</span><span class="pl-smi">l</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>o);o<span class="pl-k">=</span><span class="pl-k">-</span>(<span class="pl-smi">l</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>j<span class="pl-k">+</span><span class="pl-smi">l</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>o);l<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">x</span>;j<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span></td>
      </tr>
      <tr>
        <td id="L365" class="blob-num js-line-number" data-line-number="365"></td>
        <td id="LC365" class="blob-code blob-code-inner js-file-line">a;<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span>o;d<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">dt</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_maxForce</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-en">LengthSquared</span>()<span class="pl-k">&gt;</span>d<span class="pl-k">*</span>d<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-en">Multiply</span>(d<span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-en">Length</span>());a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">x</span><span class="pl-k">-</span>l;o<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>j;<span class="pl-smi">h</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span>a;<span class="pl-smi">h</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span>o;<span class="pl-smi">h</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">+=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_invI</span><span class="pl-k">*</span>(q<span class="pl-k">*</span>o<span class="pl-k">-</span>n<span class="pl-k">*</span>a)};<span class="pl-smi">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolvePositionConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">true</span>};<span class="pl-smi">Box2D</span>.<span class="pl-en">inherit</span>(<span class="pl-c1">D</span>,<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2JointDef</span>);<span class="pl-c1">D</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">__super</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2JointDef</span>.<span class="pl-c1">prototype</span>;<span class="pl-c1">D</span>.<span class="pl-en">b2MouseJointDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2JointDef</span>.<span class="pl-smi">b2JointDef</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,</td>
      </tr>
      <tr>
        <td id="L366" class="blob-num js-line-number" data-line-number="366"></td>
        <td id="LC366" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">arguments</span>);<span class="pl-c1">this</span>.<span class="pl-c1">target</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>};<span class="pl-c1">D</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2MouseJointDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">__super</span>.<span class="pl-smi">b2JointDef</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-c1">I</span>.<span class="pl-smi">e_mouseJoint</span>;<span class="pl-c1">this</span>.<span class="pl-smi">maxForce</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">frequencyHz</span><span class="pl-k">=</span><span class="pl-c1">5</span>;<span class="pl-c1">this</span>.<span class="pl-smi">dampingRatio</span><span class="pl-k">=</span><span class="pl-c1">0.7</span>};<span class="pl-smi">Box2D</span>.<span class="pl-en">inherit</span>(<span class="pl-c1">H</span>,<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2Joint</span>);<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">__super</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-c1">prototype</span>;<span class="pl-c1">H</span>.<span class="pl-en">b2PrismaticJoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_localXAxis1</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_localYAxis1</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;</td>
      </tr>
      <tr>
        <td id="L367" class="blob-num js-line-number" data-line-number="367"></td>
        <td id="LC367" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_K</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">K</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">A</span>};<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAnchorA</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>.<span class="pl-en">GetWorldPoint</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>)};<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAnchorB</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>.<span class="pl-en">GetWorldPoint</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>)};<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetReactionForce</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">w</span>(d<span class="pl-k">*</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_motorImpulse</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">z</span>)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">x</span>),d<span class="pl-k">*</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_motorImpulse</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">z</span>)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">y</span>))};<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">GetReactionTorque</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L368" class="blob-num js-line-number" data-line-number="368"></td>
        <td id="LC368" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> d<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">y</span>};<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetJointTranslation</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>,h<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>,l<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-en">GetWorldPoint</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>),j<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-en">GetWorldPoint</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>);h<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">l</span>.<span class="pl-c1">x</span>;l<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">l</span>.<span class="pl-c1">y</span>;d<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-en">GetWorldVector</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_localXAxis1</span>);<span class="pl-k">return</span> <span class="pl-smi">d</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>h<span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>l};<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetJointSpeed</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>,h<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>,l;l<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;<span class="pl-k">var</span> j<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">d</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">x</span>,o<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">d</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">y</span>,q<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>j<span class="pl-k">+</span><span class="pl-smi">l</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>o;</td>
      </tr>
      <tr>
        <td id="L369" class="blob-num js-line-number" data-line-number="369"></td>
        <td id="LC369" class="blob-code blob-code-inner js-file-line">o<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>j<span class="pl-k">+</span><span class="pl-smi">l</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>o;j<span class="pl-k">=</span>q;l<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">x</span>,a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">y</span>;q<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>n<span class="pl-k">+</span><span class="pl-smi">l</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>a;a<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>n<span class="pl-k">+</span><span class="pl-smi">l</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>a;n<span class="pl-k">=</span>q;l<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>n<span class="pl-k">-</span>(<span class="pl-smi">d</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>j);q<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>a<span class="pl-k">-</span>(<span class="pl-smi">d</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>o);<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-en">GetWorldVector</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_localXAxis1</span>),g<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">m_linearVelocity</span>,b<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_linearVelocity</span>;d<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">m_angularVelocity</span>;h<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_angularVelocity</span>;<span class="pl-k">return</span> l<span class="pl-k">*-</span>d<span class="pl-k">*</span><span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>q<span class="pl-k">*</span>d<span class="pl-k">*</span><span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>(<span class="pl-smi">b</span>.<span class="pl-c1">x</span><span class="pl-k">+-</span>h<span class="pl-k">*</span>a<span class="pl-k">-</span><span class="pl-smi">g</span>.<span class="pl-c1">x</span><span class="pl-k">-</span> <span class="pl-k">-</span>d<span class="pl-k">*</span>o)<span class="pl-k">+</span><span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>(<span class="pl-smi">b</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>h<span class="pl-k">*</span>n<span class="pl-k">-</span><span class="pl-smi">g</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>d<span class="pl-k">*</span>j))};<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">IsLimitEnabled</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_enableLimit</span>};</td>
      </tr>
      <tr>
        <td id="L370" class="blob-num js-line-number" data-line-number="370"></td>
        <td id="LC370" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">EnableLimit</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>.<span class="pl-en">SetAwake</span>(<span class="pl-c1">true</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>.<span class="pl-en">SetAwake</span>(<span class="pl-c1">true</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_enableLimit</span><span class="pl-k">=</span>d};<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetLowerLimit</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_lowerTranslation</span>};<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetUpperLimit</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_upperTranslation</span>};<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetLimits</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>,<span class="pl-smi">h</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(h<span class="pl-k">===</span><span class="pl-c1">undefined</span>)h<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>.<span class="pl-en">SetAwake</span>(<span class="pl-c1">true</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>.<span class="pl-en">SetAwake</span>(<span class="pl-c1">true</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_lowerTranslation</span><span class="pl-k">=</span>d;<span class="pl-c1">this</span>.<span class="pl-smi">m_upperTranslation</span><span class="pl-k">=</span>h};<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">IsMotorEnabled</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_enableMotor</span>};</td>
      </tr>
      <tr>
        <td id="L371" class="blob-num js-line-number" data-line-number="371"></td>
        <td id="LC371" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">EnableMotor</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>.<span class="pl-en">SetAwake</span>(<span class="pl-c1">true</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>.<span class="pl-en">SetAwake</span>(<span class="pl-c1">true</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_enableMotor</span><span class="pl-k">=</span>d};<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetMotorSpeed</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>.<span class="pl-en">SetAwake</span>(<span class="pl-c1">true</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>.<span class="pl-en">SetAwake</span>(<span class="pl-c1">true</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_motorSpeed</span><span class="pl-k">=</span>d};<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetMotorSpeed</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_motorSpeed</span>};<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetMaxMotorForce</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>.<span class="pl-en">SetAwake</span>(<span class="pl-c1">true</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>.<span class="pl-en">SetAwake</span>(<span class="pl-c1">true</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_maxMotorForce</span><span class="pl-k">=</span>d};<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetMotorForce</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_motorImpulse</span>};</td>
      </tr>
      <tr>
        <td id="L372" class="blob-num js-line-number" data-line-number="372"></td>
        <td id="LC372" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2PrismaticJoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-c1">this</span>.<span class="pl-smi">__super</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,d);<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">d</span>.<span class="pl-smi">localAnchorA</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">d</span>.<span class="pl-smi">localAnchorB</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_localXAxis1</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">d</span>.<span class="pl-smi">localAxisA</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_localYAxis1</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localXAxis1</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_localYAxis1</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localXAxis1</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_refAngle</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">referenceAngle</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-en">SetZero</span>();<span class="pl-c1">this</span>.<span class="pl-smi">m_motorImpulse</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_motorMass</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_lowerTranslation</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">lowerTranslation</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_upperTranslation</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">upperTranslation</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_maxMotorForce</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">maxMotorForce</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_motorSpeed</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L373" class="blob-num js-line-number" data-line-number="373"></td>
        <td id="LC373" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">d</span>.<span class="pl-smi">motorSpeed</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_enableLimit</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">enableLimit</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_enableMotor</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">enableMotor</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_limitState</span><span class="pl-k">=</span><span class="pl-c1">I</span>.<span class="pl-smi">e_inactiveLimit</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-en">SetZero</span>();<span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-en">SetZero</span>()};<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">InitVelocityConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>,l<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>,j,o<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_localCenterA</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">h</span>.<span class="pl-en">GetLocalCenter</span>());<span class="pl-c1">this</span>.<span class="pl-smi">m_localCenterB</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">l</span>.<span class="pl-en">GetLocalCenter</span>());<span class="pl-k">var</span> q<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-en">GetTransform</span>();<span class="pl-smi">l</span>.<span class="pl-en">GetTransform</span>();j<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localCenterA</span>.<span class="pl-c1">x</span>,a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localCenterA</span>.<span class="pl-c1">y</span>;o<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>n<span class="pl-k">+</span><span class="pl-smi">j</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L374" class="blob-num js-line-number" data-line-number="374"></td>
        <td id="LC374" class="blob-code blob-code-inner js-file-line">a;a<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>n<span class="pl-k">+</span><span class="pl-smi">j</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>a;n<span class="pl-k">=</span>o;j<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localCenterB</span>.<span class="pl-c1">x</span>,g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localCenterB</span>.<span class="pl-c1">y</span>;o<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>c<span class="pl-k">+</span><span class="pl-smi">j</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>g;g<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>c<span class="pl-k">+</span><span class="pl-smi">j</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>g;c<span class="pl-k">=</span>o;j<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>c<span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">-</span>n;o<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>g<span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">m_invMassA</span><span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_invMass</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_invMassB</span><span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_invMass</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_invIA</span><span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_invI</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_invIB</span><span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_invI</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">y</span>.<span class="pl-en">MulMV</span>(<span class="pl-smi">q</span>.<span class="pl-c1">R</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_localXAxis1</span>));<span class="pl-c1">this</span>.<span class="pl-smi">m_a1</span><span class="pl-k">=</span>(j<span class="pl-k">+</span>n)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>(o<span class="pl-k">+</span>a)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_a2</span><span class="pl-k">=</span>c<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>g<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_motorMass</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L375" class="blob-num js-line-number" data-line-number="375"></td>
        <td id="LC375" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassA</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassB</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invIA</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a1</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a1</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invIB</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a2</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a2</span>;<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_motorMass</span><span class="pl-k">&gt;</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>)<span class="pl-c1">this</span>.<span class="pl-smi">m_motorMass</span><span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">m_motorMass</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">y</span>.<span class="pl-en">MulMV</span>(<span class="pl-smi">q</span>.<span class="pl-c1">R</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_localYAxis1</span>));<span class="pl-c1">this</span>.<span class="pl-smi">m_s1</span><span class="pl-k">=</span>(j<span class="pl-k">+</span>n)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>(o<span class="pl-k">+</span>a)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_s2</span><span class="pl-k">=</span>c<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>g<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-c1">x</span>;q<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassA</span>;n<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassB</span>;a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invIA</span>;c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invIB</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>q<span class="pl-k">+</span>n<span class="pl-k">+</span>a<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s1</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s1</span><span class="pl-k">+</span>c<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s2</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s2</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s1</span><span class="pl-k">+</span>c<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s2</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>a<span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L376" class="blob-num js-line-number" data-line-number="376"></td>
        <td id="LC376" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_s1</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a1</span><span class="pl-k">+</span>c<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s2</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a2</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a<span class="pl-k">+</span>c;<span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>a<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a1</span><span class="pl-k">+</span>c<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a2</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-smi">col3</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">z</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-smi">col3</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">z</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-smi">col3</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>q<span class="pl-k">+</span>n<span class="pl-k">+</span>a<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a1</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a1</span><span class="pl-k">+</span>c<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a2</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a2</span>;<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_enableLimit</span>){j<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>j<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>o;<span class="pl-k">if</span>(<span class="pl-smi">y</span>.<span class="pl-en">Abs</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_upperTranslation</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_lowerTranslation</span>)<span class="pl-k">&lt;</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_linearSlop</span>)<span class="pl-c1">this</span>.<span class="pl-smi">m_limitState</span><span class="pl-k">=</span><span class="pl-c1">I</span>.<span class="pl-smi">e_equalLimits</span>;<span class="pl-k">else</span> <span class="pl-k">if</span>(j<span class="pl-k">&lt;=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_lowerTranslation</span>){<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_limitState</span><span class="pl-k">!=</span><span class="pl-c1">I</span>.<span class="pl-smi">e_atLowerLimit</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_limitState</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L377" class="blob-num js-line-number" data-line-number="377"></td>
        <td id="LC377" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">I</span>.<span class="pl-smi">e_atLowerLimit</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0</span>}}<span class="pl-k">else</span> <span class="pl-k">if</span>(j<span class="pl-k">&gt;=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_upperTranslation</span>){<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_limitState</span><span class="pl-k">!=</span><span class="pl-c1">I</span>.<span class="pl-smi">e_atUpperLimit</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_limitState</span><span class="pl-k">=</span><span class="pl-c1">I</span>.<span class="pl-smi">e_atUpperLimit</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0</span>}}<span class="pl-k">else</span>{<span class="pl-c1">this</span>.<span class="pl-smi">m_limitState</span><span class="pl-k">=</span><span class="pl-c1">I</span>.<span class="pl-smi">e_inactiveLimit</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0</span>}}<span class="pl-k">else</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_limitState</span><span class="pl-k">=</span><span class="pl-c1">I</span>.<span class="pl-smi">e_inactiveLimit</span>;<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_enableMotor</span><span class="pl-k">==</span><span class="pl-c1">false</span>)<span class="pl-c1">this</span>.<span class="pl-smi">m_motorImpulse</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-smi">d</span>.<span class="pl-smi">warmStarting</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span><span class="pl-smi">d</span>.<span class="pl-smi">dtRatio</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span><span class="pl-smi">d</span>.<span class="pl-smi">dtRatio</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_motorImpulse</span><span class="pl-k">*=</span><span class="pl-smi">d</span>.<span class="pl-smi">dtRatio</span>;d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_motorImpulse</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">z</span>)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">x</span>;</td>
      </tr>
      <tr>
        <td id="L378" class="blob-num js-line-number" data-line-number="378"></td>
        <td id="LC378" class="blob-code blob-code-inner js-file-line">j<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_motorImpulse</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">z</span>)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">y</span>;o<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s1</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_motorImpulse</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">z</span>)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a1</span>;q<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s2</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_motorImpulse</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">z</span>)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a2</span>;<span class="pl-smi">h</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassA</span><span class="pl-k">*</span>d;<span class="pl-smi">h</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassA</span><span class="pl-k">*</span>j;<span class="pl-smi">h</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">-=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invIA</span><span class="pl-k">*</span>o;<span class="pl-smi">l</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassB</span><span class="pl-k">*</span>d;<span class="pl-smi">l</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassB</span><span class="pl-k">*</span>j;<span class="pl-smi">l</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invIB</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L379" class="blob-num js-line-number" data-line-number="379"></td>
        <td id="LC379" class="blob-code blob-code-inner js-file-line">q}<span class="pl-k">else</span>{<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-en">SetZero</span>();<span class="pl-c1">this</span>.<span class="pl-smi">m_motorImpulse</span><span class="pl-k">=</span><span class="pl-c1">0</span>}};<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolveVelocityConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>,l<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>,j<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_linearVelocity</span>,o<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_angularVelocity</span>,q<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_linearVelocity</span>,n<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_angularVelocity</span>,a<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span><span class="pl-c1">0</span>,b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_enableMotor</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_limitState</span><span class="pl-k">!=</span><span class="pl-c1">I</span>.<span class="pl-smi">e_equalLimits</span>){b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_motorMass</span><span class="pl-k">*</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_motorSpeed</span><span class="pl-k">-</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>(<span class="pl-smi">q</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">j</span>.<span class="pl-c1">x</span>)<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>(<span class="pl-smi">q</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">j</span>.<span class="pl-c1">y</span>)<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a2</span><span class="pl-k">*</span>n<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a1</span><span class="pl-k">*</span>o));a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_motorImpulse</span>;d<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">dt</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_maxMotorForce</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_motorImpulse</span><span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-en">Clamp</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_motorImpulse</span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L380" class="blob-num js-line-number" data-line-number="380"></td>
        <td id="LC380" class="blob-code blob-code-inner js-file-line">b,<span class="pl-k">-</span>d,d);b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_motorImpulse</span><span class="pl-k">-</span>a;a<span class="pl-k">=</span>b<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">x</span>;c<span class="pl-k">=</span>b<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">y</span>;g<span class="pl-k">=</span>b<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a1</span>;b<span class="pl-k">=</span>b<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a2</span>;<span class="pl-smi">j</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassA</span><span class="pl-k">*</span>a;<span class="pl-smi">j</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassA</span><span class="pl-k">*</span>c;o<span class="pl-k">-=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invIA</span><span class="pl-k">*</span>g;<span class="pl-smi">q</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassB</span><span class="pl-k">*</span>a;<span class="pl-smi">q</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassB</span><span class="pl-k">*</span>c;n<span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invIB</span><span class="pl-k">*</span>b}g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>(<span class="pl-smi">q</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">j</span>.<span class="pl-c1">x</span>)<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>(<span class="pl-smi">q</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">j</span>.<span class="pl-c1">y</span>)<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s2</span><span class="pl-k">*</span>n<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s1</span><span class="pl-k">*</span>o;c<span class="pl-k">=</span>n<span class="pl-k">-</span>o;<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_enableLimit</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_limitState</span><span class="pl-k">!=</span><span class="pl-c1">I</span>.<span class="pl-smi">e_inactiveLimit</span>){d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>(<span class="pl-smi">q</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">j</span>.<span class="pl-c1">x</span>)<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>(<span class="pl-smi">q</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">j</span>.<span class="pl-c1">y</span>)<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a2</span><span class="pl-k">*</span>n<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a1</span><span class="pl-k">*</span>o;a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-en">Copy</span>();d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-en">Solve33</span>(<span class="pl-k">new</span> <span class="pl-en">A</span>,<span class="pl-k">-</span>g,<span class="pl-k">-</span>c,<span class="pl-k">-</span>d);<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-en">Add</span>(d);</td>
      </tr>
      <tr>
        <td id="L381" class="blob-num js-line-number" data-line-number="381"></td>
        <td id="LC381" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_limitState</span><span class="pl-k">==</span><span class="pl-c1">I</span>.<span class="pl-smi">e_atLowerLimit</span>)<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-en">Max</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">z</span>,<span class="pl-c1">0</span>);<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_limitState</span><span class="pl-k">==</span><span class="pl-c1">I</span>.<span class="pl-smi">e_atUpperLimit</span>)<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-en">Min</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">z</span>,<span class="pl-c1">0</span>);g<span class="pl-k">=</span><span class="pl-k">-</span>g<span class="pl-k">-</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">z</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-smi">col3</span>.<span class="pl-c1">x</span>;c<span class="pl-k">=</span><span class="pl-k">-</span>c<span class="pl-k">-</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">z</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-smi">col3</span>.<span class="pl-c1">y</span>;c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-en">Solve22</span>(<span class="pl-k">new</span> <span class="pl-en">w</span>,g,c);<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>;<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">y</span>;<span class="pl-smi">d</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>;<span class="pl-smi">d</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>;<span class="pl-smi">d</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">z</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>;a<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">x</span>;c<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">y</span>;g<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">x</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L382" class="blob-num js-line-number" data-line-number="382"></td>
        <td id="LC382" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_s1</span><span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a1</span>;b<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s2</span><span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a2</span>}<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-en">Solve22</span>(<span class="pl-k">new</span> <span class="pl-en">w</span>,<span class="pl-k">-</span>g,<span class="pl-k">-</span>c);<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-smi">d</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-smi">d</span>.<span class="pl-c1">y</span>;a<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-c1">x</span>;c<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-c1">y</span>;g<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s1</span><span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-c1">y</span>;b<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s2</span><span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-c1">y</span>}<span class="pl-smi">j</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassA</span><span class="pl-k">*</span>a;<span class="pl-smi">j</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassA</span><span class="pl-k">*</span>c;o<span class="pl-k">-=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invIA</span><span class="pl-k">*</span>g;<span class="pl-smi">q</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassB</span><span class="pl-k">*</span>a;<span class="pl-smi">q</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassB</span><span class="pl-k">*</span>c;n<span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invIB</span><span class="pl-k">*</span>b;<span class="pl-smi">h</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-en">SetV</span>(j);<span class="pl-smi">h</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">=</span>o;<span class="pl-smi">l</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-en">SetV</span>(q);<span class="pl-smi">l</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">=</span>n};<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolvePositionConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> d<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L383" class="blob-num js-line-number" data-line-number="383"></td>
        <td id="LC383" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>,h<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>,l<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>,j<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a</span>,o<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>,q<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a</span>,n,a<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span><span class="pl-c1">0</span>,b<span class="pl-k">=</span>a<span class="pl-k">=</span>n<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-c1">0</span>,m<span class="pl-k">=</span><span class="pl-c1">G</span>.<span class="pl-en">FromAngle</span>(j),r<span class="pl-k">=</span><span class="pl-c1">G</span>.<span class="pl-en">FromAngle</span>(q);n<span class="pl-k">=</span>m;e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localCenterA</span>.<span class="pl-c1">x</span>;<span class="pl-k">var</span> s<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localCenterA</span>.<span class="pl-c1">y</span>;a<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>e<span class="pl-k">+</span><span class="pl-smi">n</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>s;s<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>e<span class="pl-k">+</span><span class="pl-smi">n</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>s;e<span class="pl-k">=</span>a;n<span class="pl-k">=</span>r;r<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localCenterB</span>.<span class="pl-c1">x</span>;g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localCenterB</span>.<span class="pl-c1">y</span>;a<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>r<span class="pl-k">+</span><span class="pl-smi">n</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>g;g<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>r<span class="pl-k">+</span><span class="pl-smi">n</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>g;r<span class="pl-k">=</span>a;n<span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>r<span class="pl-k">-</span><span class="pl-smi">l</span>.<span class="pl-c1">x</span><span class="pl-k">-</span>e;a<span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>g<span class="pl-k">-</span><span class="pl-smi">l</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>s;<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_enableLimit</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L384" class="blob-num js-line-number" data-line-number="384"></td>
        <td id="LC384" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">y</span>.<span class="pl-en">MulMV</span>(m,<span class="pl-c1">this</span>.<span class="pl-smi">m_localXAxis1</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_a1</span><span class="pl-k">=</span>(n<span class="pl-k">+</span>e)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>(a<span class="pl-k">+</span>s)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_a2</span><span class="pl-k">=</span>r<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>g<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">x</span>;<span class="pl-k">var</span> v<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>n<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>a;<span class="pl-k">if</span>(<span class="pl-smi">y</span>.<span class="pl-en">Abs</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_upperTranslation</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_lowerTranslation</span>)<span class="pl-k">&lt;</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_linearSlop</span>){f<span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-en">Clamp</span>(v,<span class="pl-k">-</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_maxLinearCorrection</span>,<span class="pl-c1">F</span>.<span class="pl-smi">b2_maxLinearCorrection</span>);b<span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-en">Abs</span>(v);c<span class="pl-k">=</span><span class="pl-c1">true</span>}<span class="pl-k">else</span> <span class="pl-k">if</span>(v<span class="pl-k">&lt;=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_lowerTranslation</span>){f<span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-en">Clamp</span>(v<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_lowerTranslation</span><span class="pl-k">+</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_linearSlop</span>,<span class="pl-k">-</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_maxLinearCorrection</span>,<span class="pl-c1">0</span>);b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_lowerTranslation</span><span class="pl-k">-</span>v;c<span class="pl-k">=</span><span class="pl-c1">true</span>}<span class="pl-k">else</span> <span class="pl-k">if</span>(v<span class="pl-k">&gt;=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_upperTranslation</span>){f<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L385" class="blob-num js-line-number" data-line-number="385"></td>
        <td id="LC385" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">y</span>.<span class="pl-en">Clamp</span>(v<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_upperTranslation</span><span class="pl-k">+</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_linearSlop</span>,<span class="pl-c1">0</span>,<span class="pl-c1">F</span>.<span class="pl-smi">b2_maxLinearCorrection</span>);b<span class="pl-k">=</span>v<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_upperTranslation</span>;c<span class="pl-k">=</span><span class="pl-c1">true</span>}}<span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span><span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-en">MulMV</span>(m,<span class="pl-c1">this</span>.<span class="pl-smi">m_localYAxis1</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_s1</span><span class="pl-k">=</span>(n<span class="pl-k">+</span>e)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>(a<span class="pl-k">+</span>s)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_s2</span><span class="pl-k">=</span>r<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>g<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-c1">x</span>;m<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">A</span>;s<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>n<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>a;r<span class="pl-k">=</span>q<span class="pl-k">-</span>j<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_refAngle</span>;b<span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-en">Max</span>(b,<span class="pl-smi">y</span>.<span class="pl-en">Abs</span>(s));e<span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-en">Abs</span>(r);<span class="pl-k">if</span>(c){c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassA</span>;g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassB</span>;n<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invIA</span>;a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invIB</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>c<span class="pl-k">+</span>g<span class="pl-k">+</span>n<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s1</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s1</span><span class="pl-k">+</span>a<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s2</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s2</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>n<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s1</span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L386" class="blob-num js-line-number" data-line-number="386"></td>
        <td id="LC386" class="blob-code blob-code-inner js-file-line">a<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s2</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>n<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s1</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a1</span><span class="pl-k">+</span>a<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s2</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a2</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>n<span class="pl-k">+</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>n<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a1</span><span class="pl-k">+</span>a<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a2</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-smi">col3</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">z</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-smi">col3</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">z</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-smi">col3</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>c<span class="pl-k">+</span>g<span class="pl-k">+</span>n<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a1</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a1</span><span class="pl-k">+</span>a<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a2</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a2</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-en">Solve33</span>(m,<span class="pl-k">-</span>s,<span class="pl-k">-</span>r,<span class="pl-k">-</span>f)}<span class="pl-k">else</span>{c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassA</span>;g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassB</span>;n<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invIA</span>;a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invIB</span>;f<span class="pl-k">=</span>n<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s1</span><span class="pl-k">+</span>a<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s2</span>;v<span class="pl-k">=</span>n<span class="pl-k">+</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-smi">col1</span>.<span class="pl-en">Set</span>(c<span class="pl-k">+</span>g<span class="pl-k">+</span>n<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s1</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s1</span><span class="pl-k">+</span>a<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s2</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s2</span>,f,<span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-smi">col2</span>.<span class="pl-en">Set</span>(f,</td>
      </tr>
      <tr>
        <td id="L387" class="blob-num js-line-number" data-line-number="387"></td>
        <td id="LC387" class="blob-code blob-code-inner js-file-line">v,<span class="pl-c1">0</span>);f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_K</span>.<span class="pl-en">Solve22</span>(<span class="pl-k">new</span> <span class="pl-en">w</span>,<span class="pl-k">-</span>s,<span class="pl-k">-</span>r);<span class="pl-smi">m</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">x</span>;<span class="pl-smi">m</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">y</span>;<span class="pl-smi">m</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0</span>}f<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">m</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">x</span>;c<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_perp</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-smi">m</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_axis</span>.<span class="pl-c1">y</span>;s<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s1</span><span class="pl-k">+</span><span class="pl-smi">m</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-smi">m</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a1</span>;m<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_s2</span><span class="pl-k">+</span><span class="pl-smi">m</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-smi">m</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_a2</span>;<span class="pl-smi">l</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassA</span><span class="pl-k">*</span>f;<span class="pl-smi">l</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassA</span><span class="pl-k">*</span>c;j<span class="pl-k">-=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invIA</span><span class="pl-k">*</span>s;<span class="pl-smi">o</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassB</span><span class="pl-k">*</span>f;<span class="pl-smi">o</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invMassB</span><span class="pl-k">*</span>c;q<span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_invIB</span><span class="pl-k">*</span>m;<span class="pl-smi">d</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a</span><span class="pl-k">=</span>j;<span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a</span><span class="pl-k">=</span>q;<span class="pl-smi">d</span>.<span class="pl-en">SynchronizeTransform</span>();<span class="pl-smi">h</span>.<span class="pl-en">SynchronizeTransform</span>();<span class="pl-k">return</span> b<span class="pl-k">&lt;=</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_linearSlop</span><span class="pl-k">&amp;&amp;</span>e<span class="pl-k">&lt;=</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_angularSlop</span>};<span class="pl-smi">Box2D</span>.<span class="pl-en">inherit</span>(<span class="pl-c1">O</span>,<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2JointDef</span>);</td>
      </tr>
      <tr>
        <td id="L388" class="blob-num js-line-number" data-line-number="388"></td>
        <td id="LC388" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">O</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">__super</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2JointDef</span>.<span class="pl-c1">prototype</span>;<span class="pl-c1">O</span>.<span class="pl-en">b2PrismaticJointDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2JointDef</span>.<span class="pl-smi">b2JointDef</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>);<span class="pl-c1">this</span>.<span class="pl-smi">localAnchorA</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-c1">this</span>.<span class="pl-smi">localAnchorB</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-c1">this</span>.<span class="pl-smi">localAxisA</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>};<span class="pl-c1">O</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2PrismaticJointDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">__super</span>.<span class="pl-smi">b2JointDef</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-c1">I</span>.<span class="pl-smi">e_prismaticJoint</span>;<span class="pl-c1">this</span>.<span class="pl-smi">localAxisA</span>.<span class="pl-en">Set</span>(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-smi">referenceAngle</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">enableLimit</span><span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-c1">this</span>.<span class="pl-smi">upperTranslation</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">lowerTranslation</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">enableMotor</span><span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-c1">this</span>.<span class="pl-smi">motorSpeed</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">maxMotorForce</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L389" class="blob-num js-line-number" data-line-number="389"></td>
        <td id="LC389" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>};<span class="pl-c1">O</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Initialize</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>,<span class="pl-smi">h</span>,<span class="pl-smi">l</span>,<span class="pl-smi">j</span>){<span class="pl-c1">this</span>.<span class="pl-smi">bodyA</span><span class="pl-k">=</span>d;<span class="pl-c1">this</span>.<span class="pl-smi">bodyB</span><span class="pl-k">=</span>h;<span class="pl-c1">this</span>.<span class="pl-smi">localAnchorA</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">bodyA</span>.<span class="pl-en">GetLocalPoint</span>(l);<span class="pl-c1">this</span>.<span class="pl-smi">localAnchorB</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">bodyB</span>.<span class="pl-en">GetLocalPoint</span>(l);<span class="pl-c1">this</span>.<span class="pl-smi">localAxisA</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">bodyA</span>.<span class="pl-en">GetLocalVector</span>(j);<span class="pl-c1">this</span>.<span class="pl-smi">referenceAngle</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">bodyB</span>.<span class="pl-en">GetAngle</span>()<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">bodyA</span>.<span class="pl-en">GetAngle</span>()};<span class="pl-smi">Box2D</span>.<span class="pl-en">inherit</span>(<span class="pl-c1">E</span>,<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2Joint</span>);<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">__super</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-c1">prototype</span>;<span class="pl-c1">E</span>.<span class="pl-en">b2PulleyJoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_groundAnchor1</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_groundAnchor2</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L390" class="blob-num js-line-number" data-line-number="390"></td>
        <td id="LC390" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_u1</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_u2</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAnchorA</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>.<span class="pl-en">GetWorldPoint</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>)};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAnchorB</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>.<span class="pl-en">GetWorldPoint</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>)};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetReactionForce</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">w</span>(d<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u2</span>.<span class="pl-c1">x</span>,d<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u2</span>.<span class="pl-c1">y</span>)};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetReactionTorque</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">0</span>};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetGroundAnchorA</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> d<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L391" class="blob-num js-line-number" data-line-number="391"></td>
        <td id="LC391" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_ground</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>.<span class="pl-en">Copy</span>();<span class="pl-smi">d</span>.<span class="pl-en">Add</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_groundAnchor1</span>);<span class="pl-k">return</span> d};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetGroundAnchorB</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_ground</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>.<span class="pl-en">Copy</span>();<span class="pl-smi">d</span>.<span class="pl-en">Add</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_groundAnchor2</span>);<span class="pl-k">return</span> d};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetLength1</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>.<span class="pl-en">GetWorldPoint</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>),h<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">x</span><span class="pl-k">-</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_ground</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_groundAnchor1</span>.<span class="pl-c1">x</span>);d<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_ground</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_groundAnchor1</span>.<span class="pl-c1">y</span>);<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(h<span class="pl-k">*</span>h<span class="pl-k">+</span>d<span class="pl-k">*</span>d)};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetLength2</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>.<span class="pl-en">GetWorldPoint</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>),</td>
      </tr>
      <tr>
        <td id="L392" class="blob-num js-line-number" data-line-number="392"></td>
        <td id="LC392" class="blob-code blob-code-inner js-file-line">h<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">x</span><span class="pl-k">-</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_ground</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_groundAnchor2</span>.<span class="pl-c1">x</span>);d<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_ground</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_groundAnchor2</span>.<span class="pl-c1">y</span>);<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(h<span class="pl-k">*</span>h<span class="pl-k">+</span>d<span class="pl-k">*</span>d)};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetRatio</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_ratio</span>};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2PulleyJoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-c1">this</span>.<span class="pl-smi">__super</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,d);<span class="pl-c1">this</span>.<span class="pl-smi">m_ground</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>.<span class="pl-smi">m_world</span>.<span class="pl-smi">m_groundBody</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_groundAnchor1</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">groundAnchorA</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_ground</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_groundAnchor1</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">groundAnchorA</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_ground</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_groundAnchor2</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">groundAnchorB</span>.<span class="pl-c1">x</span><span class="pl-k">-</span></td>
      </tr>
      <tr>
        <td id="L393" class="blob-num js-line-number" data-line-number="393"></td>
        <td id="LC393" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_ground</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_groundAnchor2</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">groundAnchorB</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_ground</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">d</span>.<span class="pl-smi">localAnchorA</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">d</span>.<span class="pl-smi">localAnchorB</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_ratio</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">ratio</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_constant</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">lengthA</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_ratio</span><span class="pl-k">*</span><span class="pl-smi">d</span>.<span class="pl-smi">lengthB</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_maxLength1</span><span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-en">Min</span>(<span class="pl-smi">d</span>.<span class="pl-smi">maxLengthA</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_constant</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_ratio</span><span class="pl-k">*</span><span class="pl-c1">E</span>.<span class="pl-smi">b2_minPulleyLength</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_maxLength2</span><span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-en">Min</span>(<span class="pl-smi">d</span>.<span class="pl-smi">maxLengthB</span>,(<span class="pl-c1">this</span>.<span class="pl-smi">m_constant</span><span class="pl-k">-</span><span class="pl-c1">E</span>.<span class="pl-smi">b2_minPulleyLength</span>)<span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">m_ratio</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_limitImpulse2</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_limitImpulse1</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span><span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">InitVelocityConstraints</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L394" class="blob-num js-line-number" data-line-number="394"></td>
        <td id="LC394" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>,l<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>,j;j<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;<span class="pl-k">var</span> o<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">x</span>,q<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">y</span>,n<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>o<span class="pl-k">+</span><span class="pl-smi">j</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>q;q<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>o<span class="pl-k">+</span><span class="pl-smi">j</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>q;o<span class="pl-k">=</span>n;j<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">x</span>,c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">y</span>;n<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-smi">j</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>c;c<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-smi">j</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>c;a<span class="pl-k">=</span>n;j<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>a;n<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>c;<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_ground</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_groundAnchor2</span>.<span class="pl-c1">x</span>,b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_ground</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L395" class="blob-num js-line-number" data-line-number="395"></td>
        <td id="LC395" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_groundAnchor2</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_u1</span>.<span class="pl-en">Set</span>(<span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>o<span class="pl-k">-</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_ground</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_groundAnchor1</span>.<span class="pl-c1">x</span>),<span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>q<span class="pl-k">-</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_ground</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_groundAnchor1</span>.<span class="pl-c1">y</span>));<span class="pl-c1">this</span>.<span class="pl-smi">m_u2</span>.<span class="pl-en">Set</span>(j<span class="pl-k">-</span>g,n<span class="pl-k">-</span>b);j<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u1</span>.<span class="pl-en">Length</span>();n<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u2</span>.<span class="pl-en">Length</span>();j<span class="pl-k">&gt;</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_linearSlop</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u1</span>.<span class="pl-en">Multiply</span>(<span class="pl-c1">1</span><span class="pl-k">/</span>j)<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u1</span>.<span class="pl-en">SetZero</span>();n<span class="pl-k">&gt;</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_linearSlop</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u2</span>.<span class="pl-en">Multiply</span>(<span class="pl-c1">1</span><span class="pl-k">/</span>n)<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u2</span>.<span class="pl-en">SetZero</span>();<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_constant</span><span class="pl-k">-</span>j<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_ratio</span><span class="pl-k">*</span>n<span class="pl-k">&gt;</span><span class="pl-c1">0</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_state</span><span class="pl-k">=</span><span class="pl-c1">I</span>.<span class="pl-smi">e_inactiveLimit</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span><span class="pl-k">=</span><span class="pl-c1">0</span>}<span class="pl-k">else</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_state</span><span class="pl-k">=</span><span class="pl-c1">I</span>.<span class="pl-smi">e_atUpperLimit</span>;<span class="pl-k">if</span>(j<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_maxLength1</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_limitState1</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L396" class="blob-num js-line-number" data-line-number="396"></td>
        <td id="LC396" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">I</span>.<span class="pl-smi">e_inactiveLimit</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_limitImpulse1</span><span class="pl-k">=</span><span class="pl-c1">0</span>}<span class="pl-k">else</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_limitState1</span><span class="pl-k">=</span><span class="pl-c1">I</span>.<span class="pl-smi">e_atUpperLimit</span>;<span class="pl-k">if</span>(n<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_maxLength2</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_limitState2</span><span class="pl-k">=</span><span class="pl-c1">I</span>.<span class="pl-smi">e_inactiveLimit</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_limitImpulse2</span><span class="pl-k">=</span><span class="pl-c1">0</span>}<span class="pl-k">else</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_limitState2</span><span class="pl-k">=</span><span class="pl-c1">I</span>.<span class="pl-smi">e_atUpperLimit</span>;j<span class="pl-k">=</span>o<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u1</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>q<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u1</span>.<span class="pl-c1">x</span>;n<span class="pl-k">=</span>a<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u2</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>c<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u2</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_limitMass1</span><span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">+</span><span class="pl-smi">h</span>.<span class="pl-smi">m_invI</span><span class="pl-k">*</span>j<span class="pl-k">*</span>j;<span class="pl-c1">this</span>.<span class="pl-smi">m_limitMass2</span><span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">+</span><span class="pl-smi">l</span>.<span class="pl-smi">m_invI</span><span class="pl-k">*</span>n<span class="pl-k">*</span>n;<span class="pl-c1">this</span>.<span class="pl-smi">m_pulleyMass</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_limitMass1</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_ratio</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_ratio</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_limitMass2</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_limitMass1</span><span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">m_limitMass1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_limitMass2</span><span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">m_limitMass2</span>;</td>
      </tr>
      <tr>
        <td id="L397" class="blob-num js-line-number" data-line-number="397"></td>
        <td id="LC397" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_pulleyMass</span><span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">m_pulleyMass</span>;<span class="pl-k">if</span>(<span class="pl-smi">d</span>.<span class="pl-smi">warmStarting</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span><span class="pl-k">*=</span><span class="pl-smi">d</span>.<span class="pl-smi">dtRatio</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_limitImpulse1</span><span class="pl-k">*=</span><span class="pl-smi">d</span>.<span class="pl-smi">dtRatio</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_limitImpulse2</span><span class="pl-k">*=</span><span class="pl-smi">d</span>.<span class="pl-smi">dtRatio</span>;d<span class="pl-k">=</span>(<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_limitImpulse1</span>)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u1</span>.<span class="pl-c1">x</span>;j<span class="pl-k">=</span>(<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_limitImpulse1</span>)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u1</span>.<span class="pl-c1">y</span>;n<span class="pl-k">=</span>(<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_ratio</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_limitImpulse2</span>)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u2</span>.<span class="pl-c1">x</span>;g<span class="pl-k">=</span>(<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_ratio</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_limitImpulse2</span>)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u2</span>.<span class="pl-c1">y</span>;<span class="pl-smi">h</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span>d;<span class="pl-smi">h</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span>j;<span class="pl-smi">h</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">+=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_invI</span><span class="pl-k">*</span>(o<span class="pl-k">*</span>j<span class="pl-k">-</span>q<span class="pl-k">*</span>d);<span class="pl-smi">l</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span></td>
      </tr>
      <tr>
        <td id="L398" class="blob-num js-line-number" data-line-number="398"></td>
        <td id="LC398" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">l</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span>n;<span class="pl-smi">l</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span>g;<span class="pl-smi">l</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">+=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_invI</span><span class="pl-k">*</span>(a<span class="pl-k">*</span>g<span class="pl-k">-</span>c<span class="pl-k">*</span>n)}<span class="pl-k">else</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_limitImpulse2</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_limitImpulse1</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span><span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolveVelocityConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>,h<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>,l;l<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;<span class="pl-k">var</span> j<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">d</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">x</span>,o<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">d</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">y</span>,q<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>j<span class="pl-k">+</span><span class="pl-smi">l</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>o;o<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>j<span class="pl-k">+</span><span class="pl-smi">l</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>o;j<span class="pl-k">=</span>q;l<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">x</span>,a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">y</span>;</td>
      </tr>
      <tr>
        <td id="L399" class="blob-num js-line-number" data-line-number="399"></td>
        <td id="LC399" class="blob-code blob-code-inner js-file-line">q<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>n<span class="pl-k">+</span><span class="pl-smi">l</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>a;a<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>n<span class="pl-k">+</span><span class="pl-smi">l</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>a;n<span class="pl-k">=</span>q;<span class="pl-k">var</span> c<span class="pl-k">=</span>q<span class="pl-k">=</span>l<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span><span class="pl-c1">0</span>;l<span class="pl-k">=</span>g<span class="pl-k">=</span>l<span class="pl-k">=</span>g<span class="pl-k">=</span>c<span class="pl-k">=</span>q<span class="pl-k">=</span>l<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_state</span><span class="pl-k">==</span><span class="pl-c1">I</span>.<span class="pl-smi">e_atUpperLimit</span>){l<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span><span class="pl-k">+-</span><span class="pl-smi">d</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">*</span>o;q<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">*</span>j;c<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span><span class="pl-k">+-</span><span class="pl-smi">h</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">*</span>a;g<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-smi">h</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">*</span>n;l<span class="pl-k">=</span><span class="pl-k">-</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_u1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>l<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>q)<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_ratio</span><span class="pl-k">*</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_u2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>c<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>g);g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_pulleyMass</span><span class="pl-k">*-</span>l;l<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span><span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-en">Max</span>(<span class="pl-c1">0</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span><span class="pl-k">+</span>g);g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span><span class="pl-k">-</span>l;l<span class="pl-k">=</span><span class="pl-k">-</span>g<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u1</span>.<span class="pl-c1">x</span>;q<span class="pl-k">=</span><span class="pl-k">-</span>g<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u1</span>.<span class="pl-c1">y</span>;</td>
      </tr>
      <tr>
        <td id="L400" class="blob-num js-line-number" data-line-number="400"></td>
        <td id="LC400" class="blob-code blob-code-inner js-file-line">c<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_ratio</span><span class="pl-k">*</span>g<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u2</span>.<span class="pl-c1">x</span>;g<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_ratio</span><span class="pl-k">*</span>g<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u2</span>.<span class="pl-c1">y</span>;<span class="pl-smi">d</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-smi">d</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span>l;<span class="pl-smi">d</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-smi">d</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span>q;<span class="pl-smi">d</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">+=</span><span class="pl-smi">d</span>.<span class="pl-smi">m_invI</span><span class="pl-k">*</span>(j<span class="pl-k">*</span>q<span class="pl-k">-</span>o<span class="pl-k">*</span>l);<span class="pl-smi">h</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span>c;<span class="pl-smi">h</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span>g;<span class="pl-smi">h</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">+=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_invI</span><span class="pl-k">*</span>(n<span class="pl-k">*</span>g<span class="pl-k">-</span>a<span class="pl-k">*</span>c)}<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_limitState1</span><span class="pl-k">==</span><span class="pl-c1">I</span>.<span class="pl-smi">e_atUpperLimit</span>){l<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span><span class="pl-k">+-</span><span class="pl-smi">d</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">*</span>o;q<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">*</span>j;l<span class="pl-k">=</span><span class="pl-k">-</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_u1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>l<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>q);g<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_limitMass1</span><span class="pl-k">*</span>l;l<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_limitImpulse1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_limitImpulse1</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L401" class="blob-num js-line-number" data-line-number="401"></td>
        <td id="LC401" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">y</span>.<span class="pl-en">Max</span>(<span class="pl-c1">0</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_limitImpulse1</span><span class="pl-k">+</span>g);g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_limitImpulse1</span><span class="pl-k">-</span>l;l<span class="pl-k">=</span><span class="pl-k">-</span>g<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u1</span>.<span class="pl-c1">x</span>;q<span class="pl-k">=</span><span class="pl-k">-</span>g<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u1</span>.<span class="pl-c1">y</span>;<span class="pl-smi">d</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-smi">d</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span>l;<span class="pl-smi">d</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-smi">d</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span>q;<span class="pl-smi">d</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">+=</span><span class="pl-smi">d</span>.<span class="pl-smi">m_invI</span><span class="pl-k">*</span>(j<span class="pl-k">*</span>q<span class="pl-k">-</span>o<span class="pl-k">*</span>l)}<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_limitState2</span><span class="pl-k">==</span><span class="pl-c1">I</span>.<span class="pl-smi">e_atUpperLimit</span>){c<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span><span class="pl-k">+-</span><span class="pl-smi">h</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">*</span>a;g<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-smi">h</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">*</span>n;l<span class="pl-k">=</span><span class="pl-k">-</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_u2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>c<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>g);g<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_limitMass2</span><span class="pl-k">*</span>l;l<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_limitImpulse2</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_limitImpulse2</span><span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-en">Max</span>(<span class="pl-c1">0</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_limitImpulse2</span><span class="pl-k">+</span>g);g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_limitImpulse2</span><span class="pl-k">-</span>l;c<span class="pl-k">=</span><span class="pl-k">-</span>g<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u2</span>.<span class="pl-c1">x</span>;</td>
      </tr>
      <tr>
        <td id="L402" class="blob-num js-line-number" data-line-number="402"></td>
        <td id="LC402" class="blob-code blob-code-inner js-file-line">g<span class="pl-k">=</span><span class="pl-k">-</span>g<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u2</span>.<span class="pl-c1">y</span>;<span class="pl-smi">h</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span>c;<span class="pl-smi">h</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span>g;<span class="pl-smi">h</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">+=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_invI</span><span class="pl-k">*</span>(n<span class="pl-k">*</span>g<span class="pl-k">-</span>a<span class="pl-k">*</span>c)}};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolvePositionConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>,h<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>,l,j<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_ground</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_groundAnchor1</span>.<span class="pl-c1">x</span>,o<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_ground</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_groundAnchor1</span>.<span class="pl-c1">y</span>,q<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_ground</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_groundAnchor2</span>.<span class="pl-c1">x</span>,n<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_ground</span>.<span class="pl-smi">m_xf</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_groundAnchor2</span>.<span class="pl-c1">y</span>,a<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span><span class="pl-c1">0</span>,b<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span>l<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span><span class="pl-c1">0</span>,m<span class="pl-k">=</span><span class="pl-c1">0</span>,r<span class="pl-k">=</span>e<span class="pl-k">=</span>m<span class="pl-k">=</span>l<span class="pl-k">=</span>e<span class="pl-k">=</span>l<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_state</span><span class="pl-k">==</span><span class="pl-c1">I</span>.<span class="pl-smi">e_atUpperLimit</span>){l<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L403" class="blob-num js-line-number" data-line-number="403"></td>
        <td id="LC403" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">d</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">d</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">x</span>;c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">d</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">y</span>;e<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-smi">l</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>c;c<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-smi">l</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>c;a<span class="pl-k">=</span>e;l<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">x</span>;b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">y</span>;e<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>g<span class="pl-k">+</span><span class="pl-smi">l</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>b;b<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>g<span class="pl-k">+</span><span class="pl-smi">l</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>b;g<span class="pl-k">=</span>e;l<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>a;e<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>c;f<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>g;m<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">m_u1</span>.<span class="pl-en">Set</span>(l<span class="pl-k">-</span>j,e<span class="pl-k">-</span>o);<span class="pl-c1">this</span>.<span class="pl-smi">m_u2</span>.<span class="pl-en">Set</span>(f<span class="pl-k">-</span>q,m<span class="pl-k">-</span>n);l<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u1</span>.<span class="pl-en">Length</span>();e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u2</span>.<span class="pl-en">Length</span>();l<span class="pl-k">&gt;</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_linearSlop</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u1</span>.<span class="pl-en">Multiply</span>(<span class="pl-c1">1</span><span class="pl-k">/</span></td>
      </tr>
      <tr>
        <td id="L404" class="blob-num js-line-number" data-line-number="404"></td>
        <td id="LC404" class="blob-code blob-code-inner js-file-line">l)<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u1</span>.<span class="pl-en">SetZero</span>();e<span class="pl-k">&gt;</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_linearSlop</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u2</span>.<span class="pl-en">Multiply</span>(<span class="pl-c1">1</span><span class="pl-k">/</span>e)<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u2</span>.<span class="pl-en">SetZero</span>();l<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_constant</span><span class="pl-k">-</span>l<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_ratio</span><span class="pl-k">*</span>e;r<span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-en">Max</span>(r,<span class="pl-k">-</span>l);l<span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-en">Clamp</span>(l<span class="pl-k">+</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_linearSlop</span>,<span class="pl-k">-</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_maxLinearCorrection</span>,<span class="pl-c1">0</span>);m<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_pulleyMass</span><span class="pl-k">*</span>l;l<span class="pl-k">=</span><span class="pl-k">-</span>m<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u1</span>.<span class="pl-c1">x</span>;e<span class="pl-k">=</span><span class="pl-k">-</span>m<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u1</span>.<span class="pl-c1">y</span>;f<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_ratio</span><span class="pl-k">*</span>m<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u2</span>.<span class="pl-c1">x</span>;m<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_ratio</span><span class="pl-k">*</span>m<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u2</span>.<span class="pl-c1">y</span>;<span class="pl-smi">d</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-smi">d</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span>l;<span class="pl-smi">d</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-smi">d</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span>e;<span class="pl-smi">d</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a</span><span class="pl-k">+=</span><span class="pl-smi">d</span>.<span class="pl-smi">m_invI</span><span class="pl-k">*</span>(a<span class="pl-k">*</span>e<span class="pl-k">-</span>c<span class="pl-k">*</span>l);<span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span>f;<span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span>m;<span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a</span><span class="pl-k">+=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_invI</span><span class="pl-k">*</span>(g<span class="pl-k">*</span>m<span class="pl-k">-</span>b<span class="pl-k">*</span>f);<span class="pl-smi">d</span>.<span class="pl-en">SynchronizeTransform</span>();</td>
      </tr>
      <tr>
        <td id="L405" class="blob-num js-line-number" data-line-number="405"></td>
        <td id="LC405" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">h</span>.<span class="pl-en">SynchronizeTransform</span>()}<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_limitState1</span><span class="pl-k">==</span><span class="pl-c1">I</span>.<span class="pl-smi">e_atUpperLimit</span>){l<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">d</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">x</span>;c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">d</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">y</span>;e<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-smi">l</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>c;c<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-smi">l</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>c;a<span class="pl-k">=</span>e;l<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>a;e<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>c;<span class="pl-c1">this</span>.<span class="pl-smi">m_u1</span>.<span class="pl-en">Set</span>(l<span class="pl-k">-</span>j,e<span class="pl-k">-</span>o);l<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u1</span>.<span class="pl-en">Length</span>();<span class="pl-k">if</span>(l<span class="pl-k">&gt;</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_linearSlop</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_u1</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span><span class="pl-c1">1</span><span class="pl-k">/</span>l;<span class="pl-c1">this</span>.<span class="pl-smi">m_u1</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span><span class="pl-c1">1</span><span class="pl-k">/</span>l}<span class="pl-k">else</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_u1</span>.<span class="pl-en">SetZero</span>();l<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_maxLength1</span><span class="pl-k">-</span>l;r<span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-en">Max</span>(r,<span class="pl-k">-</span>l);l<span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-en">Clamp</span>(l<span class="pl-k">+</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_linearSlop</span>,<span class="pl-k">-</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_maxLinearCorrection</span>,<span class="pl-c1">0</span>);m<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_limitMass1</span><span class="pl-k">*</span>l;</td>
      </tr>
      <tr>
        <td id="L406" class="blob-num js-line-number" data-line-number="406"></td>
        <td id="LC406" class="blob-code blob-code-inner js-file-line">l<span class="pl-k">=</span><span class="pl-k">-</span>m<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u1</span>.<span class="pl-c1">x</span>;e<span class="pl-k">=</span><span class="pl-k">-</span>m<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u1</span>.<span class="pl-c1">y</span>;<span class="pl-smi">d</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-smi">d</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span>l;<span class="pl-smi">d</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-smi">d</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span>e;<span class="pl-smi">d</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a</span><span class="pl-k">+=</span><span class="pl-smi">d</span>.<span class="pl-smi">m_invI</span><span class="pl-k">*</span>(a<span class="pl-k">*</span>e<span class="pl-k">-</span>c<span class="pl-k">*</span>l);<span class="pl-smi">d</span>.<span class="pl-en">SynchronizeTransform</span>()}<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_limitState2</span><span class="pl-k">==</span><span class="pl-c1">I</span>.<span class="pl-smi">e_atUpperLimit</span>){l<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">x</span>;b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">y</span>;e<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>g<span class="pl-k">+</span><span class="pl-smi">l</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>b;b<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>g<span class="pl-k">+</span><span class="pl-smi">l</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>b;g<span class="pl-k">=</span>e;f<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>g;m<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">m_u2</span>.<span class="pl-en">Set</span>(f<span class="pl-k">-</span>q,m<span class="pl-k">-</span>n);e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u2</span>.<span class="pl-en">Length</span>();<span class="pl-k">if</span>(e<span class="pl-k">&gt;</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_linearSlop</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_u2</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span><span class="pl-c1">1</span><span class="pl-k">/</span>e;<span class="pl-c1">this</span>.<span class="pl-smi">m_u2</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span><span class="pl-c1">1</span><span class="pl-k">/</span>e}<span class="pl-k">else</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_u2</span>.<span class="pl-en">SetZero</span>();</td>
      </tr>
      <tr>
        <td id="L407" class="blob-num js-line-number" data-line-number="407"></td>
        <td id="LC407" class="blob-code blob-code-inner js-file-line">l<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_maxLength2</span><span class="pl-k">-</span>e;r<span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-en">Max</span>(r,<span class="pl-k">-</span>l);l<span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-en">Clamp</span>(l<span class="pl-k">+</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_linearSlop</span>,<span class="pl-k">-</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_maxLinearCorrection</span>,<span class="pl-c1">0</span>);m<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_limitMass2</span><span class="pl-k">*</span>l;f<span class="pl-k">=</span><span class="pl-k">-</span>m<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u2</span>.<span class="pl-c1">x</span>;m<span class="pl-k">=</span><span class="pl-k">-</span>m<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_u2</span>.<span class="pl-c1">y</span>;<span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span>f;<span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span>m;<span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a</span><span class="pl-k">+=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_invI</span><span class="pl-k">*</span>(g<span class="pl-k">*</span>m<span class="pl-k">-</span>b<span class="pl-k">*</span>f);<span class="pl-smi">h</span>.<span class="pl-en">SynchronizeTransform</span>()}<span class="pl-k">return</span> r<span class="pl-k">&lt;</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_linearSlop</span>};<span class="pl-smi">Box2D</span>.<span class="pl-smi">postDefs</span>.<span class="pl-c1">push</span>(<span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2PulleyJoint</span>.<span class="pl-smi">b2_minPulleyLength</span><span class="pl-k">=</span><span class="pl-c1">2</span>});<span class="pl-smi">Box2D</span>.<span class="pl-en">inherit</span>(<span class="pl-c1">R</span>,<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2JointDef</span>);<span class="pl-c1">R</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">__super</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2JointDef</span>.<span class="pl-c1">prototype</span>;<span class="pl-c1">R</span>.<span class="pl-smi">b2PulleyJointDef</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L408" class="blob-num js-line-number" data-line-number="408"></td>
        <td id="LC408" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2JointDef</span>.<span class="pl-smi">b2JointDef</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>);<span class="pl-c1">this</span>.<span class="pl-smi">groundAnchorA</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-c1">this</span>.<span class="pl-smi">groundAnchorB</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-c1">this</span>.<span class="pl-smi">localAnchorA</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-c1">this</span>.<span class="pl-smi">localAnchorB</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>};<span class="pl-c1">R</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2PulleyJointDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">__super</span>.<span class="pl-smi">b2JointDef</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-c1">I</span>.<span class="pl-smi">e_pulleyJoint</span>;<span class="pl-c1">this</span>.<span class="pl-smi">groundAnchorA</span>.<span class="pl-en">Set</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>);<span class="pl-c1">this</span>.<span class="pl-smi">groundAnchorB</span>.<span class="pl-en">Set</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>);<span class="pl-c1">this</span>.<span class="pl-smi">localAnchorA</span>.<span class="pl-en">Set</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-smi">localAnchorB</span>.<span class="pl-en">Set</span>(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-smi">maxLengthB</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">lengthB</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">maxLengthA</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">lengthA</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">ratio</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">collideConnected</span><span class="pl-k">=</span><span class="pl-c1">true</span>};<span class="pl-c1">R</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">Initialize</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L409" class="blob-num js-line-number" data-line-number="409"></td>
        <td id="LC409" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">d</span>,<span class="pl-smi">h</span>,<span class="pl-smi">l</span>,<span class="pl-smi">j</span>,<span class="pl-smi">o</span>,<span class="pl-smi">q</span>,<span class="pl-smi">n</span>){<span class="pl-k">if</span>(n<span class="pl-k">===</span><span class="pl-c1">undefined</span>)n<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">bodyA</span><span class="pl-k">=</span>d;<span class="pl-c1">this</span>.<span class="pl-smi">bodyB</span><span class="pl-k">=</span>h;<span class="pl-c1">this</span>.<span class="pl-smi">groundAnchorA</span>.<span class="pl-en">SetV</span>(l);<span class="pl-c1">this</span>.<span class="pl-smi">groundAnchorB</span>.<span class="pl-en">SetV</span>(j);<span class="pl-c1">this</span>.<span class="pl-smi">localAnchorA</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">bodyA</span>.<span class="pl-en">GetLocalPoint</span>(o);<span class="pl-c1">this</span>.<span class="pl-smi">localAnchorB</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">bodyB</span>.<span class="pl-en">GetLocalPoint</span>(q);d<span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">l</span>.<span class="pl-c1">x</span>;l<span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">l</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">lengthA</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(d<span class="pl-k">*</span>d<span class="pl-k">+</span>l<span class="pl-k">*</span>l);l<span class="pl-k">=</span><span class="pl-smi">q</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">j</span>.<span class="pl-c1">x</span>;j<span class="pl-k">=</span><span class="pl-smi">q</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">j</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">lengthB</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(l<span class="pl-k">*</span>l<span class="pl-k">+</span>j<span class="pl-k">*</span>j);<span class="pl-c1">this</span>.<span class="pl-smi">ratio</span><span class="pl-k">=</span>n;n<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">lengthA</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">ratio</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">lengthB</span>;<span class="pl-c1">this</span>.<span class="pl-smi">maxLengthA</span><span class="pl-k">=</span>n<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">ratio</span><span class="pl-k">*</span><span class="pl-c1">E</span>.<span class="pl-smi">b2_minPulleyLength</span>;<span class="pl-c1">this</span>.<span class="pl-smi">maxLengthB</span><span class="pl-k">=</span>(n<span class="pl-k">-</span><span class="pl-c1">E</span>.<span class="pl-smi">b2_minPulleyLength</span>)<span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">ratio</span>};<span class="pl-smi">Box2D</span>.<span class="pl-en">inherit</span>(<span class="pl-c1">N</span>,<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2Joint</span>);</td>
      </tr>
      <tr>
        <td id="L410" class="blob-num js-line-number" data-line-number="410"></td>
        <td id="LC410" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">__super</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-c1">prototype</span>;<span class="pl-c1">N</span>.<span class="pl-en">b2RevoluteJoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>);<span class="pl-c1">this</span>.<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">G</span>;<span class="pl-c1">this</span>.<span class="pl-c1">K1</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">G</span>;<span class="pl-c1">this</span>.<span class="pl-c1">K2</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">G</span>;<span class="pl-c1">this</span>.<span class="pl-c1">K3</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">G</span>;<span class="pl-c1">this</span>.<span class="pl-smi">impulse3</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">A</span>;<span class="pl-c1">this</span>.<span class="pl-smi">impulse2</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-c1">this</span>.<span class="pl-smi">reduced</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">A</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">K</span>};<span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAnchorA</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>.<span class="pl-en">GetWorldPoint</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>)};<span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAnchorB</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>.<span class="pl-en">GetWorldPoint</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>)};</td>
      </tr>
      <tr>
        <td id="L411" class="blob-num js-line-number" data-line-number="411"></td>
        <td id="LC411" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetReactionForce</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">w</span>(d<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">x</span>,d<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">y</span>)};<span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetReactionTorque</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> d<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">z</span>};<span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetJointAngle</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_referenceAngle</span>};<span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetJointSpeed</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>.<span class="pl-smi">m_angularVelocity</span>};<span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">IsLimitEnabled</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_enableLimit</span>};<span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">EnableLimit</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L412" class="blob-num js-line-number" data-line-number="412"></td>
        <td id="LC412" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_enableLimit</span><span class="pl-k">=</span>d};<span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetLowerLimit</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_lowerAngle</span>};<span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetUpperLimit</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_upperAngle</span>};<span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetLimits</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>,<span class="pl-smi">h</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(h<span class="pl-k">===</span><span class="pl-c1">undefined</span>)h<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_lowerAngle</span><span class="pl-k">=</span>d;<span class="pl-c1">this</span>.<span class="pl-smi">m_upperAngle</span><span class="pl-k">=</span>h};<span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">IsMotorEnabled</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>.<span class="pl-en">SetAwake</span>(<span class="pl-c1">true</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>.<span class="pl-en">SetAwake</span>(<span class="pl-c1">true</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_enableMotor</span>};<span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">EnableMotor</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_enableMotor</span><span class="pl-k">=</span>d};<span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetMotorSpeed</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L413" class="blob-num js-line-number" data-line-number="413"></td>
        <td id="LC413" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>.<span class="pl-en">SetAwake</span>(<span class="pl-c1">true</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>.<span class="pl-en">SetAwake</span>(<span class="pl-c1">true</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_motorSpeed</span><span class="pl-k">=</span>d};<span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetMotorSpeed</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_motorSpeed</span>};<span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetMaxMotorTorque</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_maxMotorTorque</span><span class="pl-k">=</span>d};<span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetMotorTorque</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_maxMotorTorque</span>};<span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2RevoluteJoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-c1">this</span>.<span class="pl-smi">__super</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,d);<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">d</span>.<span class="pl-smi">localAnchorA</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">d</span>.<span class="pl-smi">localAnchorB</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_referenceAngle</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">referenceAngle</span>;</td>
      </tr>
      <tr>
        <td id="L414" class="blob-num js-line-number" data-line-number="414"></td>
        <td id="LC414" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-en">SetZero</span>();<span class="pl-c1">this</span>.<span class="pl-smi">m_motorImpulse</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_lowerAngle</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">lowerAngle</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_upperAngle</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">upperAngle</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_maxMotorTorque</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">maxMotorTorque</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_motorSpeed</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">motorSpeed</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_enableLimit</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">enableLimit</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_enableMotor</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">enableMotor</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_limitState</span><span class="pl-k">=</span><span class="pl-c1">I</span>.<span class="pl-smi">e_inactiveLimit</span>};<span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">InitVelocityConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>,l<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>,j,o<span class="pl-k">=</span><span class="pl-c1">0</span>;j<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;<span class="pl-k">var</span> q<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">x</span>,n<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">y</span>;o<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>q<span class="pl-k">+</span><span class="pl-smi">j</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L415" class="blob-num js-line-number" data-line-number="415"></td>
        <td id="LC415" class="blob-code blob-code-inner js-file-line">n;n<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>q<span class="pl-k">+</span><span class="pl-smi">j</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>n;q<span class="pl-k">=</span>o;j<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">x</span>,c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">y</span>;o<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-smi">j</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>c;c<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-smi">j</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>c;a<span class="pl-k">=</span>o;j<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_invMass</span>;o<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_invMass</span>;<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_invI</span>,b<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_invI</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>j<span class="pl-k">+</span>o<span class="pl-k">+</span>n<span class="pl-k">*</span>n<span class="pl-k">*</span>g<span class="pl-k">+</span>c<span class="pl-k">*</span>c<span class="pl-k">*</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-k">-</span>n<span class="pl-k">*</span>q<span class="pl-k">*</span>g<span class="pl-k">-</span>c<span class="pl-k">*</span>a<span class="pl-k">*</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>.<span class="pl-smi">col3</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-k">-</span>n<span class="pl-k">*</span>g<span class="pl-k">-</span>c<span class="pl-k">*</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>j<span class="pl-k">+</span>o<span class="pl-k">+</span>q<span class="pl-k">*</span>q<span class="pl-k">*</span>g<span class="pl-k">+</span>a<span class="pl-k">*</span>a<span class="pl-k">*</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>.<span class="pl-smi">col3</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>q<span class="pl-k">*</span>g<span class="pl-k">+</span>a<span class="pl-k">*</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>.<span class="pl-smi">col3</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>.<span class="pl-smi">col3</span>.<span class="pl-c1">y</span>;</td>
      </tr>
      <tr>
        <td id="L416" class="blob-num js-line-number" data-line-number="416"></td>
        <td id="LC416" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>.<span class="pl-smi">col3</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>g<span class="pl-k">+</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">m_motorMass</span><span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>(g<span class="pl-k">+</span>b);<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_enableMotor</span><span class="pl-k">==</span><span class="pl-c1">false</span>)<span class="pl-c1">this</span>.<span class="pl-smi">m_motorImpulse</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_enableLimit</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a</span><span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_referenceAngle</span>;<span class="pl-k">if</span>(<span class="pl-smi">y</span>.<span class="pl-en">Abs</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_upperAngle</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_lowerAngle</span>)<span class="pl-k">&lt;</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_angularSlop</span>)<span class="pl-c1">this</span>.<span class="pl-smi">m_limitState</span><span class="pl-k">=</span><span class="pl-c1">I</span>.<span class="pl-smi">e_equalLimits</span>;<span class="pl-k">else</span> <span class="pl-k">if</span>(e<span class="pl-k">&lt;=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_lowerAngle</span>){<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_limitState</span><span class="pl-k">!=</span><span class="pl-c1">I</span>.<span class="pl-smi">e_atLowerLimit</span>)<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_limitState</span><span class="pl-k">=</span><span class="pl-c1">I</span>.<span class="pl-smi">e_atLowerLimit</span>}<span class="pl-k">else</span> <span class="pl-k">if</span>(e<span class="pl-k">&gt;=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_upperAngle</span>){<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_limitState</span><span class="pl-k">!=</span><span class="pl-c1">I</span>.<span class="pl-smi">e_atUpperLimit</span>)<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_limitState</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L417" class="blob-num js-line-number" data-line-number="417"></td>
        <td id="LC417" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">I</span>.<span class="pl-smi">e_atUpperLimit</span>}<span class="pl-k">else</span>{<span class="pl-c1">this</span>.<span class="pl-smi">m_limitState</span><span class="pl-k">=</span><span class="pl-c1">I</span>.<span class="pl-smi">e_inactiveLimit</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0</span>}}<span class="pl-k">else</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_limitState</span><span class="pl-k">=</span><span class="pl-c1">I</span>.<span class="pl-smi">e_inactiveLimit</span>;<span class="pl-k">if</span>(<span class="pl-smi">d</span>.<span class="pl-smi">warmStarting</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span><span class="pl-smi">d</span>.<span class="pl-smi">dtRatio</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span><span class="pl-smi">d</span>.<span class="pl-smi">dtRatio</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_motorImpulse</span><span class="pl-k">*=</span><span class="pl-smi">d</span>.<span class="pl-smi">dtRatio</span>;d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">x</span>;e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">y</span>;<span class="pl-smi">h</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span>j<span class="pl-k">*</span>d;<span class="pl-smi">h</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span>j<span class="pl-k">*</span>e;<span class="pl-smi">h</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">-=</span>g<span class="pl-k">*</span>(q<span class="pl-k">*</span>e<span class="pl-k">-</span>n<span class="pl-k">*</span>d<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_motorImpulse</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">z</span>);<span class="pl-smi">l</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span>o<span class="pl-k">*</span>d;<span class="pl-smi">l</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span>o<span class="pl-k">*</span>e;<span class="pl-smi">l</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">+=</span>b<span class="pl-k">*</span>(a<span class="pl-k">*</span>e<span class="pl-k">-</span>c<span class="pl-k">*</span>d<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_motorImpulse</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">z</span>)}<span class="pl-k">else</span>{<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-en">SetZero</span>();</td>
      </tr>
      <tr>
        <td id="L418" class="blob-num js-line-number" data-line-number="418"></td>
        <td id="LC418" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_motorImpulse</span><span class="pl-k">=</span><span class="pl-c1">0</span>}};<span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolveVelocityConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>,l<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>,j<span class="pl-k">=</span><span class="pl-c1">0</span>,o<span class="pl-k">=</span>j<span class="pl-k">=</span><span class="pl-c1">0</span>,q<span class="pl-k">=</span><span class="pl-c1">0</span>,n<span class="pl-k">=</span><span class="pl-c1">0</span>,a<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_linearVelocity</span>,g<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_angularVelocity</span>,b<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_linearVelocity</span>,e<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_angularVelocity</span>,f<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_invMass</span>,m<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_invMass</span>,r<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_invI</span>,s<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_invI</span>;<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_enableMotor</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_limitState</span><span class="pl-k">!=</span><span class="pl-c1">I</span>.<span class="pl-smi">e_equalLimits</span>){o<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_motorMass</span><span class="pl-k">*-</span>(e<span class="pl-k">-</span>g<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_motorSpeed</span>);q<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_motorImpulse</span>;n<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">dt</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_maxMotorTorque</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_motorImpulse</span><span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-en">Clamp</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_motorImpulse</span><span class="pl-k">+</span>o,<span class="pl-k">-</span>n,n);o<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_motorImpulse</span><span class="pl-k">-</span>q;g<span class="pl-k">-=</span></td>
      </tr>
      <tr>
        <td id="L419" class="blob-num js-line-number" data-line-number="419"></td>
        <td id="LC419" class="blob-code blob-code-inner js-file-line">r<span class="pl-k">*</span>o;e<span class="pl-k">+=</span>s<span class="pl-k">*</span>o}<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_enableLimit</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_limitState</span><span class="pl-k">!=</span><span class="pl-c1">I</span>.<span class="pl-smi">e_inactiveLimit</span>){d<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;o<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">x</span>;q<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">y</span>;j<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>o<span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>q;q<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>o<span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>q;o<span class="pl-k">=</span>j;d<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;n<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">x</span>;a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">y</span>;j<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>n<span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>a;a<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>n<span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>a;n<span class="pl-k">=</span>j;d<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span><span class="pl-k">+-</span>e<span class="pl-k">*</span>a<span class="pl-k">-</span><span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">-</span> <span class="pl-k">-</span>g<span class="pl-k">*</span>q;<span class="pl-k">var</span> v<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>e<span class="pl-k">*</span>n<span class="pl-k">-</span><span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>g<span class="pl-k">*</span>o;<span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>.<span class="pl-en">Solve33</span>(<span class="pl-c1">this</span>.<span class="pl-smi">impulse3</span>,<span class="pl-k">-</span>d,<span class="pl-k">-</span>v,<span class="pl-k">-</span>(e<span class="pl-k">-</span>g));<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_limitState</span><span class="pl-k">==</span></td>
      </tr>
      <tr>
        <td id="L420" class="blob-num js-line-number" data-line-number="420"></td>
        <td id="LC420" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">I</span>.<span class="pl-smi">e_equalLimits</span>)<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-en">Add</span>(<span class="pl-c1">this</span>.<span class="pl-smi">impulse3</span>);<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_limitState</span><span class="pl-k">==</span><span class="pl-c1">I</span>.<span class="pl-smi">e_atLowerLimit</span>){j<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">z</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">impulse3</span>.<span class="pl-c1">z</span>;<span class="pl-k">if</span>(j<span class="pl-k">&lt;</span><span class="pl-c1">0</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>.<span class="pl-en">Solve22</span>(<span class="pl-c1">this</span>.<span class="pl-smi">reduced</span>,<span class="pl-k">-</span>d,<span class="pl-k">-</span>v);<span class="pl-c1">this</span>.<span class="pl-smi">impulse3</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">reduced</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-smi">impulse3</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">reduced</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">impulse3</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">z</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">reduced</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">reduced</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0</span>}}<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_limitState</span><span class="pl-k">==</span><span class="pl-c1">I</span>.<span class="pl-smi">e_atUpperLimit</span>){j<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">z</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">impulse3</span>.<span class="pl-c1">z</span>;<span class="pl-k">if</span>(j<span class="pl-k">&gt;</span><span class="pl-c1">0</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>.<span class="pl-en">Solve22</span>(<span class="pl-c1">this</span>.<span class="pl-smi">reduced</span>,<span class="pl-k">-</span>d,<span class="pl-k">-</span>v);<span class="pl-c1">this</span>.<span class="pl-smi">impulse3</span>.<span class="pl-c1">x</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L421" class="blob-num js-line-number" data-line-number="421"></td>
        <td id="LC421" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">reduced</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-smi">impulse3</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">reduced</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">impulse3</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">z</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">reduced</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">reduced</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0</span>}}<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span>f<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">impulse3</span>.<span class="pl-c1">x</span>;<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span>f<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">impulse3</span>.<span class="pl-c1">y</span>;g<span class="pl-k">-=</span>r<span class="pl-k">*</span>(o<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">impulse3</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>q<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">impulse3</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">impulse3</span>.<span class="pl-c1">z</span>);<span class="pl-smi">b</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span>m<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">impulse3</span>.<span class="pl-c1">x</span>;<span class="pl-smi">b</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span>m<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">impulse3</span>.<span class="pl-c1">y</span>;e<span class="pl-k">+=</span>s<span class="pl-k">*</span>(n<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">impulse3</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>a<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">impulse3</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">impulse3</span>.<span class="pl-c1">z</span>)}<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;o<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">x</span>;q<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">y</span>;j<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>o<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L422" class="blob-num js-line-number" data-line-number="422"></td>
        <td id="LC422" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">d</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>q;q<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>o<span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>q;o<span class="pl-k">=</span>j;d<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;n<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">x</span>;a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">y</span>;j<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>n<span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>a;a<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>n<span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>a;n<span class="pl-k">=</span>j;<span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>.<span class="pl-en">Solve22</span>(<span class="pl-c1">this</span>.<span class="pl-smi">impulse2</span>,<span class="pl-k">-</span>(<span class="pl-smi">b</span>.<span class="pl-c1">x</span><span class="pl-k">+-</span>e<span class="pl-k">*</span>a<span class="pl-k">-</span><span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">-</span> <span class="pl-k">-</span>g<span class="pl-k">*</span>q),<span class="pl-k">-</span>(<span class="pl-smi">b</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>e<span class="pl-k">*</span>n<span class="pl-k">-</span><span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>g<span class="pl-k">*</span>o));<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">impulse2</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">impulse2</span>.<span class="pl-c1">y</span>;<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span>f<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">impulse2</span>.<span class="pl-c1">x</span>;<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span>f<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">impulse2</span>.<span class="pl-c1">y</span>;g<span class="pl-k">-=</span>r<span class="pl-k">*</span>(o<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">impulse2</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>q<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">impulse2</span>.<span class="pl-c1">x</span>);<span class="pl-smi">b</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span>m<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">impulse2</span>.<span class="pl-c1">x</span>;<span class="pl-smi">b</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span>m<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">impulse2</span>.<span class="pl-c1">y</span>;e<span class="pl-k">+=</span>s<span class="pl-k">*</span>(n<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">impulse2</span>.<span class="pl-c1">y</span><span class="pl-k">-</span></td>
      </tr>
      <tr>
        <td id="L423" class="blob-num js-line-number" data-line-number="423"></td>
        <td id="LC423" class="blob-code blob-code-inner js-file-line">a<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">impulse2</span>.<span class="pl-c1">x</span>)}<span class="pl-smi">h</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-en">SetV</span>(c);<span class="pl-smi">h</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">=</span>g;<span class="pl-smi">l</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-en">SetV</span>(b);<span class="pl-smi">l</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">=</span>e};<span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolvePositionConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">0</span>,h,l<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>,j<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>,o<span class="pl-k">=</span><span class="pl-c1">0</span>,q<span class="pl-k">=</span>h<span class="pl-k">=</span><span class="pl-c1">0</span>,n<span class="pl-k">=</span><span class="pl-c1">0</span>,a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_enableLimit</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">m_limitState</span><span class="pl-k">!=</span><span class="pl-c1">I</span>.<span class="pl-smi">e_inactiveLimit</span>){d<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a</span><span class="pl-k">-</span><span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_referenceAngle</span>;<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_limitState</span><span class="pl-k">==</span><span class="pl-c1">I</span>.<span class="pl-smi">e_equalLimits</span>){d<span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-en">Clamp</span>(d<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_lowerAngle</span>,<span class="pl-k">-</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_maxAngularCorrection</span>,<span class="pl-c1">F</span>.<span class="pl-smi">b2_maxAngularCorrection</span>);c<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_motorMass</span><span class="pl-k">*</span>d;o<span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-en">Abs</span>(d)}<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_limitState</span><span class="pl-k">==</span></td>
      </tr>
      <tr>
        <td id="L424" class="blob-num js-line-number" data-line-number="424"></td>
        <td id="LC424" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">I</span>.<span class="pl-smi">e_atLowerLimit</span>){d<span class="pl-k">=</span>d<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_lowerAngle</span>;o<span class="pl-k">=</span><span class="pl-k">-</span>d;d<span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-en">Clamp</span>(d<span class="pl-k">+</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_angularSlop</span>,<span class="pl-k">-</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_maxAngularCorrection</span>,<span class="pl-c1">0</span>);c<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_motorMass</span><span class="pl-k">*</span>d}<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_limitState</span><span class="pl-k">==</span><span class="pl-c1">I</span>.<span class="pl-smi">e_atUpperLimit</span>){o<span class="pl-k">=</span>d<span class="pl-k">=</span>d<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_upperAngle</span>;d<span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-en">Clamp</span>(d<span class="pl-k">-</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_angularSlop</span>,<span class="pl-c1">0</span>,<span class="pl-c1">F</span>.<span class="pl-smi">b2_maxAngularCorrection</span>);c<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_motorMass</span><span class="pl-k">*</span>d}<span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a</span><span class="pl-k">-=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_invI</span><span class="pl-k">*</span>c;<span class="pl-smi">j</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a</span><span class="pl-k">+=</span><span class="pl-smi">j</span>.<span class="pl-smi">m_invI</span><span class="pl-k">*</span>c;<span class="pl-smi">l</span>.<span class="pl-en">SynchronizeTransform</span>();<span class="pl-smi">j</span>.<span class="pl-en">SynchronizeTransform</span>()}h<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">x</span>;d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor1</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">y</span>;q<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>c<span class="pl-k">+</span><span class="pl-smi">h</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L425" class="blob-num js-line-number" data-line-number="425"></td>
        <td id="LC425" class="blob-code blob-code-inner js-file-line">d;d<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>c<span class="pl-k">+</span><span class="pl-smi">h</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>d;c<span class="pl-k">=</span>q;h<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">j</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">x</span>,b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchor2</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">j</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">y</span>;q<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>g<span class="pl-k">+</span><span class="pl-smi">h</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>b;b<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>g<span class="pl-k">+</span><span class="pl-smi">h</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>b;g<span class="pl-k">=</span>q;n<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>g<span class="pl-k">-</span><span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">-</span>c;a<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>b<span class="pl-k">-</span><span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>d;<span class="pl-k">var</span> e<span class="pl-k">=</span>n<span class="pl-k">*</span>n<span class="pl-k">+</span>a<span class="pl-k">*</span>a;h<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(e);q<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_invMass</span>;<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">m_invMass</span>,m<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_invI</span>,r<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">m_invI</span>,s<span class="pl-k">=</span><span class="pl-c1">10</span><span class="pl-k">*</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_linearSlop</span>;<span class="pl-k">if</span>(e<span class="pl-k">&gt;</span>s<span class="pl-k">*</span>s){e<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>(q<span class="pl-k">+</span>f);n<span class="pl-k">=</span>e<span class="pl-k">*-</span>n;a<span class="pl-k">=</span>e<span class="pl-k">*-</span>a;<span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>q<span class="pl-k">*</span>n;<span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>q<span class="pl-k">*</span>a;<span class="pl-smi">j</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>f<span class="pl-k">*</span>n;<span class="pl-smi">j</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>f<span class="pl-k">*</span>a;n<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L426" class="blob-num js-line-number" data-line-number="426"></td>
        <td id="LC426" class="blob-code blob-code-inner js-file-line">g<span class="pl-k">-</span><span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">-</span>c;a<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>b<span class="pl-k">-</span><span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>d}<span class="pl-c1">this</span>.<span class="pl-c1">K1</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>q<span class="pl-k">+</span>f;<span class="pl-c1">this</span>.<span class="pl-c1">K1</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-c1">K1</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-c1">K1</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>q<span class="pl-k">+</span>f;<span class="pl-c1">this</span>.<span class="pl-c1">K2</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>m<span class="pl-k">*</span>d<span class="pl-k">*</span>d;<span class="pl-c1">this</span>.<span class="pl-c1">K2</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-k">-</span>m<span class="pl-k">*</span>c<span class="pl-k">*</span>d;<span class="pl-c1">this</span>.<span class="pl-c1">K2</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-k">-</span>m<span class="pl-k">*</span>c<span class="pl-k">*</span>d;<span class="pl-c1">this</span>.<span class="pl-c1">K2</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>m<span class="pl-k">*</span>c<span class="pl-k">*</span>c;<span class="pl-c1">this</span>.<span class="pl-c1">K3</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>r<span class="pl-k">*</span>b<span class="pl-k">*</span>b;<span class="pl-c1">this</span>.<span class="pl-c1">K3</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-k">-</span>r<span class="pl-k">*</span>g<span class="pl-k">*</span>b;<span class="pl-c1">this</span>.<span class="pl-c1">K3</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-k">-</span>r<span class="pl-k">*</span>g<span class="pl-k">*</span>b;<span class="pl-c1">this</span>.<span class="pl-c1">K3</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>r<span class="pl-k">*</span>g<span class="pl-k">*</span>g;<span class="pl-c1">this</span>.<span class="pl-c1">K</span>.<span class="pl-en">SetM</span>(<span class="pl-c1">this</span>.<span class="pl-c1">K1</span>);<span class="pl-c1">this</span>.<span class="pl-c1">K</span>.<span class="pl-en">AddM</span>(<span class="pl-c1">this</span>.<span class="pl-c1">K2</span>);<span class="pl-c1">this</span>.<span class="pl-c1">K</span>.<span class="pl-en">AddM</span>(<span class="pl-c1">this</span>.<span class="pl-c1">K3</span>);<span class="pl-c1">this</span>.<span class="pl-c1">K</span>.<span class="pl-en">Solve</span>(<span class="pl-c1">N</span>.<span class="pl-smi">tImpulse</span>,<span class="pl-k">-</span>n,<span class="pl-k">-</span>a);n<span class="pl-k">=</span><span class="pl-c1">N</span>.<span class="pl-smi">tImpulse</span>.<span class="pl-c1">x</span>;a<span class="pl-k">=</span><span class="pl-c1">N</span>.<span class="pl-smi">tImpulse</span>.<span class="pl-c1">y</span>;<span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span>n;<span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span>a;<span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a</span><span class="pl-k">-=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_invI</span><span class="pl-k">*</span>(c<span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L427" class="blob-num js-line-number" data-line-number="427"></td>
        <td id="LC427" class="blob-code blob-code-inner js-file-line">a<span class="pl-k">-</span>d<span class="pl-k">*</span>n);<span class="pl-smi">j</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-smi">j</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span>n;<span class="pl-smi">j</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-smi">j</span>.<span class="pl-smi">m_invMass</span><span class="pl-k">*</span>a;<span class="pl-smi">j</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a</span><span class="pl-k">+=</span><span class="pl-smi">j</span>.<span class="pl-smi">m_invI</span><span class="pl-k">*</span>(g<span class="pl-k">*</span>a<span class="pl-k">-</span>b<span class="pl-k">*</span>n);<span class="pl-smi">l</span>.<span class="pl-en">SynchronizeTransform</span>();<span class="pl-smi">j</span>.<span class="pl-en">SynchronizeTransform</span>();<span class="pl-k">return</span> h<span class="pl-k">&lt;=</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_linearSlop</span><span class="pl-k">&amp;&amp;</span>o<span class="pl-k">&lt;=</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_angularSlop</span>};<span class="pl-smi">Box2D</span>.<span class="pl-smi">postDefs</span>.<span class="pl-c1">push</span>(<span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2RevoluteJoint</span>.<span class="pl-smi">tImpulse</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>});<span class="pl-smi">Box2D</span>.<span class="pl-en">inherit</span>(<span class="pl-c1">S</span>,<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2JointDef</span>);<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">__super</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2JointDef</span>.<span class="pl-c1">prototype</span>;<span class="pl-c1">S</span>.<span class="pl-en">b2RevoluteJointDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2JointDef</span>.<span class="pl-smi">b2JointDef</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>);<span class="pl-c1">this</span>.<span class="pl-smi">localAnchorA</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L428" class="blob-num js-line-number" data-line-number="428"></td>
        <td id="LC428" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-c1">this</span>.<span class="pl-smi">localAnchorB</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2RevoluteJointDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">__super</span>.<span class="pl-smi">b2JointDef</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-c1">I</span>.<span class="pl-smi">e_revoluteJoint</span>;<span class="pl-c1">this</span>.<span class="pl-smi">localAnchorA</span>.<span class="pl-en">Set</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-smi">localAnchorB</span>.<span class="pl-en">Set</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-smi">motorSpeed</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">maxMotorTorque</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">upperAngle</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">lowerAngle</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">referenceAngle</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">enableMotor</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">enableLimit</span><span class="pl-k">=</span><span class="pl-c1">false</span>};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Initialize</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>,<span class="pl-smi">h</span>,<span class="pl-smi">l</span>){<span class="pl-c1">this</span>.<span class="pl-smi">bodyA</span><span class="pl-k">=</span>d;<span class="pl-c1">this</span>.<span class="pl-smi">bodyB</span><span class="pl-k">=</span>h;<span class="pl-c1">this</span>.<span class="pl-smi">localAnchorA</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">bodyA</span>.<span class="pl-en">GetLocalPoint</span>(l);<span class="pl-c1">this</span>.<span class="pl-smi">localAnchorB</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">bodyB</span>.<span class="pl-en">GetLocalPoint</span>(l);<span class="pl-c1">this</span>.<span class="pl-smi">referenceAngle</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">bodyB</span>.<span class="pl-en">GetAngle</span>()<span class="pl-k">-</span></td>
      </tr>
      <tr>
        <td id="L429" class="blob-num js-line-number" data-line-number="429"></td>
        <td id="LC429" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">bodyA</span>.<span class="pl-en">GetAngle</span>()};<span class="pl-smi">Box2D</span>.<span class="pl-en">inherit</span>(aa,<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2Joint</span>);<span class="pl-smi">aa</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">__super</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-c1">prototype</span>;<span class="pl-smi">aa</span>.<span class="pl-en">b2WeldJoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchorA</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchorB</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">A</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">K</span>};<span class="pl-smi">aa</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAnchorA</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>.<span class="pl-en">GetWorldPoint</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchorA</span>)};<span class="pl-smi">aa</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAnchorB</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>.<span class="pl-en">GetWorldPoint</span>(<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchorB</span>)};<span class="pl-smi">aa</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">GetReactionForce</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L430" class="blob-num js-line-number" data-line-number="430"></td>
        <td id="LC430" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">w</span>(d<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">x</span>,d<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">y</span>)};<span class="pl-smi">aa</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetReactionTorque</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> d<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">z</span>};<span class="pl-smi">aa</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2WeldJoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-c1">this</span>.<span class="pl-smi">__super</span>.<span class="pl-smi">b2Joint</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,d);<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchorA</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">d</span>.<span class="pl-smi">localAnchorA</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchorB</span>.<span class="pl-en">SetV</span>(<span class="pl-smi">d</span>.<span class="pl-smi">localAnchorB</span>);<span class="pl-c1">this</span>.<span class="pl-smi">m_referenceAngle</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">referenceAngle</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-en">SetZero</span>();<span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">K</span>};<span class="pl-smi">aa</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">InitVelocityConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">var</span> h,l<span class="pl-k">=</span><span class="pl-c1">0</span>,j<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>,o<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>;</td>
      </tr>
      <tr>
        <td id="L431" class="blob-num js-line-number" data-line-number="431"></td>
        <td id="LC431" class="blob-code blob-code-inner js-file-line">h<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;<span class="pl-k">var</span> q<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchorA</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">j</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">x</span>,n<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchorA</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">j</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">y</span>;l<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>q<span class="pl-k">+</span><span class="pl-smi">h</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>n;n<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>q<span class="pl-k">+</span><span class="pl-smi">h</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>n;q<span class="pl-k">=</span>l;h<span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchorB</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">o</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">x</span>,c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchorB</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">o</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">y</span>;l<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-smi">h</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>c;c<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-smi">h</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>c;a<span class="pl-k">=</span>l;h<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">m_invMass</span>;l<span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">m_invMass</span>;<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">m_invI</span>,b<span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">m_invI</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>h<span class="pl-k">+</span>l<span class="pl-k">+</span>n<span class="pl-k">*</span>n<span class="pl-k">*</span>g<span class="pl-k">+</span>c<span class="pl-k">*</span>c<span class="pl-k">*</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-k">-</span>n<span class="pl-k">*</span>q<span class="pl-k">*</span>g<span class="pl-k">-</span>c<span class="pl-k">*</span>a<span class="pl-k">*</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>.<span class="pl-smi">col3</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-k">-</span>n<span class="pl-k">*</span>g<span class="pl-k">-</span>c<span class="pl-k">*</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span>;</td>
      </tr>
      <tr>
        <td id="L432" class="blob-num js-line-number" data-line-number="432"></td>
        <td id="LC432" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>h<span class="pl-k">+</span>l<span class="pl-k">+</span>q<span class="pl-k">*</span>q<span class="pl-k">*</span>g<span class="pl-k">+</span>a<span class="pl-k">*</span>a<span class="pl-k">*</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>.<span class="pl-smi">col3</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>q<span class="pl-k">*</span>g<span class="pl-k">+</span>a<span class="pl-k">*</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>.<span class="pl-smi">col3</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>.<span class="pl-smi">col3</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>.<span class="pl-smi">col3</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>g<span class="pl-k">+</span>b;<span class="pl-k">if</span>(<span class="pl-smi">d</span>.<span class="pl-smi">warmStarting</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span><span class="pl-smi">d</span>.<span class="pl-smi">dtRatio</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span><span class="pl-smi">d</span>.<span class="pl-smi">dtRatio</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">z</span><span class="pl-k">*=</span><span class="pl-smi">d</span>.<span class="pl-smi">dtRatio</span>;<span class="pl-smi">j</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span>h<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">x</span>;<span class="pl-smi">j</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span>h<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">y</span>;<span class="pl-smi">j</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">-=</span>g<span class="pl-k">*</span>(q<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>n<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">z</span>);<span class="pl-smi">o</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span>l<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">x</span>;<span class="pl-smi">o</span>.<span class="pl-smi">m_linearVelocity</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span>l<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">y</span>;</td>
      </tr>
      <tr>
        <td id="L433" class="blob-num js-line-number" data-line-number="433"></td>
        <td id="LC433" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">o</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">+=</span>b<span class="pl-k">*</span>(a<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>c<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-c1">z</span>)}<span class="pl-k">else</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-en">SetZero</span>()};<span class="pl-smi">aa</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolveVelocityConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> d,h<span class="pl-k">=</span><span class="pl-c1">0</span>,l<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>,j<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>,o<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_linearVelocity</span>,q<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_angularVelocity</span>,n<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">m_linearVelocity</span>,a<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">m_angularVelocity</span>,c<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_invMass</span>,g<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">m_invMass</span>,b<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_invI</span>,e<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">m_invI</span>;d<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchorA</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">x</span>,m<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchorA</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">y</span>;h<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>f<span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>m;m<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>f<span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>m;f<span class="pl-k">=</span>h;d<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L434" class="blob-num js-line-number" data-line-number="434"></td>
        <td id="LC434" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">j</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;<span class="pl-k">var</span> r<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchorB</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">j</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">x</span>,s<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchorB</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">j</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">y</span>;h<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>r<span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>s;s<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>r<span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>s;r<span class="pl-k">=</span>h;d<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-c1">x</span><span class="pl-k">-</span>a<span class="pl-k">*</span>s<span class="pl-k">-</span><span class="pl-smi">o</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>q<span class="pl-k">*</span>m;h<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>a<span class="pl-k">*</span>r<span class="pl-k">-</span><span class="pl-smi">o</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>q<span class="pl-k">*</span>f;<span class="pl-k">var</span> v<span class="pl-k">=</span>a<span class="pl-k">-</span>q,t<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">A</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>.<span class="pl-en">Solve33</span>(t,<span class="pl-k">-</span>d,<span class="pl-k">-</span>h,<span class="pl-k">-</span>v);<span class="pl-c1">this</span>.<span class="pl-smi">m_impulse</span>.<span class="pl-en">Add</span>(t);<span class="pl-smi">o</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span>c<span class="pl-k">*</span><span class="pl-smi">t</span>.<span class="pl-c1">x</span>;<span class="pl-smi">o</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span>c<span class="pl-k">*</span><span class="pl-smi">t</span>.<span class="pl-c1">y</span>;q<span class="pl-k">-=</span>b<span class="pl-k">*</span>(f<span class="pl-k">*</span><span class="pl-smi">t</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>m<span class="pl-k">*</span><span class="pl-smi">t</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">t</span>.<span class="pl-c1">z</span>);<span class="pl-smi">n</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span>g<span class="pl-k">*</span><span class="pl-smi">t</span>.<span class="pl-c1">x</span>;<span class="pl-smi">n</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span>g<span class="pl-k">*</span><span class="pl-smi">t</span>.<span class="pl-c1">y</span>;a<span class="pl-k">+=</span>e<span class="pl-k">*</span>(r<span class="pl-k">*</span><span class="pl-smi">t</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>s<span class="pl-k">*</span><span class="pl-smi">t</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">t</span>.<span class="pl-c1">z</span>);<span class="pl-smi">l</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">=</span>q;<span class="pl-smi">j</span>.<span class="pl-smi">m_angularVelocity</span><span class="pl-k">=</span>a};<span class="pl-smi">aa</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolvePositionConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> d,h<span class="pl-k">=</span><span class="pl-c1">0</span>,l<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyA</span>,j<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_bodyB</span>;d<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;</td>
      </tr>
      <tr>
        <td id="L435" class="blob-num js-line-number" data-line-number="435"></td>
        <td id="LC435" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> o<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchorA</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">x</span>,q<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchorA</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">y</span>;h<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>o<span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>q;q<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>o<span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>q;o<span class="pl-k">=</span>h;d<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">m_xf</span>.<span class="pl-c1">R</span>;<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchorB</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">j</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">x</span>,a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_localAnchorB</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">j</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">localCenter</span>.<span class="pl-c1">y</span>;h<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>n<span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>a;a<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>n<span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>a;n<span class="pl-k">=</span>h;d<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_invMass</span>;h<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">m_invMass</span>;<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">m_invI</span>,g<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">m_invI</span>,b<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>n<span class="pl-k">-</span><span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">-</span>o,e<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>a<span class="pl-k">-</span><span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>q,f<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a</span><span class="pl-k">-</span><span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">m_referenceAngle</span>,m<span class="pl-k">=</span><span class="pl-c1">10</span><span class="pl-k">*</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_linearSlop</span>,</td>
      </tr>
      <tr>
        <td id="L436" class="blob-num js-line-number" data-line-number="436"></td>
        <td id="LC436" class="blob-code blob-code-inner js-file-line">r<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(b<span class="pl-k">*</span>b<span class="pl-k">+</span>e<span class="pl-k">*</span>e),s<span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-en">Abs</span>(f);<span class="pl-k">if</span>(r<span class="pl-k">&gt;</span>m){c<span class="pl-k">*=</span><span class="pl-c1">1</span>;g<span class="pl-k">*=</span><span class="pl-c1">1</span>}<span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>d<span class="pl-k">+</span>h<span class="pl-k">+</span>q<span class="pl-k">*</span>q<span class="pl-k">*</span>c<span class="pl-k">+</span>a<span class="pl-k">*</span>a<span class="pl-k">*</span>g;<span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-k">-</span>q<span class="pl-k">*</span>o<span class="pl-k">*</span>c<span class="pl-k">-</span>a<span class="pl-k">*</span>n<span class="pl-k">*</span>g;<span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>.<span class="pl-smi">col3</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-k">-</span>q<span class="pl-k">*</span>c<span class="pl-k">-</span>a<span class="pl-k">*</span>g;<span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>d<span class="pl-k">+</span>h<span class="pl-k">+</span>o<span class="pl-k">*</span>o<span class="pl-k">*</span>c<span class="pl-k">+</span>n<span class="pl-k">*</span>n<span class="pl-k">*</span>g;<span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>.<span class="pl-smi">col3</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>o<span class="pl-k">*</span>c<span class="pl-k">+</span>n<span class="pl-k">*</span>g;<span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>.<span class="pl-smi">col3</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>.<span class="pl-smi">col3</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>.<span class="pl-smi">col3</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>c<span class="pl-k">+</span>g;m<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">A</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_mass</span>.<span class="pl-en">Solve33</span>(m,<span class="pl-k">-</span>b,<span class="pl-k">-</span>e,<span class="pl-k">-</span>f);<span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span>d<span class="pl-k">*</span><span class="pl-smi">m</span>.<span class="pl-c1">x</span>;<span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span>d<span class="pl-k">*</span><span class="pl-smi">m</span>.<span class="pl-c1">y</span>;<span class="pl-smi">l</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a</span><span class="pl-k">-=</span>c<span class="pl-k">*</span>(o<span class="pl-k">*</span><span class="pl-smi">m</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>q<span class="pl-k">*</span><span class="pl-smi">m</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">m</span>.<span class="pl-c1">z</span>);<span class="pl-smi">j</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span>h<span class="pl-k">*</span><span class="pl-smi">m</span>.<span class="pl-c1">x</span>;<span class="pl-smi">j</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span>h<span class="pl-k">*</span><span class="pl-smi">m</span>.<span class="pl-c1">y</span>;</td>
      </tr>
      <tr>
        <td id="L437" class="blob-num js-line-number" data-line-number="437"></td>
        <td id="LC437" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">j</span>.<span class="pl-smi">m_sweep</span>.<span class="pl-smi">a</span><span class="pl-k">+=</span>g<span class="pl-k">*</span>(n<span class="pl-k">*</span><span class="pl-smi">m</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>a<span class="pl-k">*</span><span class="pl-smi">m</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">m</span>.<span class="pl-c1">z</span>);<span class="pl-smi">l</span>.<span class="pl-en">SynchronizeTransform</span>();<span class="pl-smi">j</span>.<span class="pl-en">SynchronizeTransform</span>();<span class="pl-k">return</span> r<span class="pl-k">&lt;=</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_linearSlop</span><span class="pl-k">&amp;&amp;</span>s<span class="pl-k">&lt;=</span><span class="pl-c1">F</span>.<span class="pl-smi">b2_angularSlop</span>};<span class="pl-smi">Box2D</span>.<span class="pl-en">inherit</span>(<span class="pl-c1">Z</span>,<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2JointDef</span>);<span class="pl-c1">Z</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">__super</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2JointDef</span>.<span class="pl-c1">prototype</span>;<span class="pl-c1">Z</span>.<span class="pl-en">b2WeldJointDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">Joints</span>.<span class="pl-smi">b2JointDef</span>.<span class="pl-smi">b2JointDef</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>);<span class="pl-c1">this</span>.<span class="pl-smi">localAnchorA</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-c1">this</span>.<span class="pl-smi">localAnchorB</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>};<span class="pl-c1">Z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2WeldJointDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">__super</span>.<span class="pl-smi">b2JointDef</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-c1">I</span>.<span class="pl-smi">e_weldJoint</span>;<span class="pl-c1">this</span>.<span class="pl-smi">referenceAngle</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L438" class="blob-num js-line-number" data-line-number="438"></td>
        <td id="LC438" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>};<span class="pl-c1">Z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Initialize</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>,<span class="pl-smi">h</span>,<span class="pl-smi">l</span>){<span class="pl-c1">this</span>.<span class="pl-smi">bodyA</span><span class="pl-k">=</span>d;<span class="pl-c1">this</span>.<span class="pl-smi">bodyB</span><span class="pl-k">=</span>h;<span class="pl-c1">this</span>.<span class="pl-smi">localAnchorA</span>.<span class="pl-en">SetV</span>(<span class="pl-c1">this</span>.<span class="pl-smi">bodyA</span>.<span class="pl-en">GetLocalPoint</span>(l));<span class="pl-c1">this</span>.<span class="pl-smi">localAnchorB</span>.<span class="pl-en">SetV</span>(<span class="pl-c1">this</span>.<span class="pl-smi">bodyB</span>.<span class="pl-en">GetLocalPoint</span>(l));<span class="pl-c1">this</span>.<span class="pl-smi">referenceAngle</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">bodyB</span>.<span class="pl-en">GetAngle</span>()<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">bodyA</span>.<span class="pl-en">GetAngle</span>()}})();</td>
      </tr>
      <tr>
        <td id="L439" class="blob-num js-line-number" data-line-number="439"></td>
        <td id="LC439" class="blob-code blob-code-inner js-file-line">(<span class="pl-k">function</span>(){<span class="pl-k">var</span> <span class="pl-c1">F</span><span class="pl-k">=</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">Dynamics</span>.<span class="pl-smi">b2DebugDraw</span>;<span class="pl-c1">F</span>.<span class="pl-en">b2DebugDraw</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">m_xformScale</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_fillAlpha</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_alpha</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_lineThickness</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_drawScale</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-k">var</span> <span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-c1">this</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_sprite</span><span class="pl-k">=</span>{graphics<span class="pl-k">:</span>{<span class="pl-en">clear</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">G</span>.<span class="pl-smi">m_ctx</span>.<span class="pl-en">clearRect</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">G</span>.<span class="pl-smi">m_ctx</span>.<span class="pl-smi">canvas</span>.<span class="pl-c1">width</span>,<span class="pl-c1">G</span>.<span class="pl-smi">m_ctx</span>.<span class="pl-smi">canvas</span>.<span class="pl-c1">height</span>)}}}};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_color</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-c1">G</span>,<span class="pl-c1">K</span>){<span class="pl-k">return</span><span class="pl-s"><span class="pl-pds">&quot;</span>rgba(<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>((<span class="pl-c1">G</span><span class="pl-k">&amp;</span><span class="pl-c1">16711680</span>)<span class="pl-k">&gt;&gt;</span><span class="pl-c1">16</span>)<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>((<span class="pl-c1">G</span><span class="pl-k">&amp;</span><span class="pl-c1">65280</span>)<span class="pl-k">&gt;&gt;</span><span class="pl-c1">8</span>)<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>(<span class="pl-c1">G</span><span class="pl-k">&amp;</span><span class="pl-c1">255</span>)<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-c1">K</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>)<span class="pl-pds">&quot;</span></span>};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2DebugDraw</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">m_drawFlags</span><span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetFlags</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-c1">G</span>){<span class="pl-k">if</span>(<span class="pl-c1">G</span><span class="pl-k">===</span><span class="pl-c1">undefined</span>)<span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_drawFlags</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L440" class="blob-num js-line-number" data-line-number="440"></td>
        <td id="LC440" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">G</span>};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetFlags</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_drawFlags</span>};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">AppendFlags</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-c1">G</span>){<span class="pl-k">if</span>(<span class="pl-c1">G</span><span class="pl-k">===</span><span class="pl-c1">undefined</span>)<span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_drawFlags</span><span class="pl-k">|=</span><span class="pl-c1">G</span>};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ClearFlags</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-c1">G</span>){<span class="pl-k">if</span>(<span class="pl-c1">G</span><span class="pl-k">===</span><span class="pl-c1">undefined</span>)<span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_drawFlags</span><span class="pl-k">&amp;=</span><span class="pl-k">~</span><span class="pl-c1">G</span>};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetSprite</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-c1">G</span>){<span class="pl-c1">this</span>.<span class="pl-smi">m_ctx</span><span class="pl-k">=</span><span class="pl-c1">G</span>};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetSprite</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_ctx</span>};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetDrawScale</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-c1">G</span>){<span class="pl-k">if</span>(<span class="pl-c1">G</span><span class="pl-k">===</span><span class="pl-c1">undefined</span>)<span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_drawScale</span><span class="pl-k">=</span><span class="pl-c1">G</span>};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetDrawScale</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_drawScale</span>};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetLineThickness</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-c1">G</span>){<span class="pl-k">if</span>(<span class="pl-c1">G</span><span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L441" class="blob-num js-line-number" data-line-number="441"></td>
        <td id="LC441" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">undefined</span>)<span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_lineThickness</span><span class="pl-k">=</span><span class="pl-c1">G</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_ctx</span>.<span class="pl-smi">strokeWidth</span><span class="pl-k">=</span><span class="pl-c1">G</span>};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetLineThickness</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_lineThickness</span>};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetAlpha</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-c1">G</span>){<span class="pl-k">if</span>(<span class="pl-c1">G</span><span class="pl-k">===</span><span class="pl-c1">undefined</span>)<span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_alpha</span><span class="pl-k">=</span><span class="pl-c1">G</span>};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAlpha</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_alpha</span>};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetFillAlpha</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-c1">G</span>){<span class="pl-k">if</span>(<span class="pl-c1">G</span><span class="pl-k">===</span><span class="pl-c1">undefined</span>)<span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_fillAlpha</span><span class="pl-k">=</span><span class="pl-c1">G</span>};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetFillAlpha</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_fillAlpha</span>};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetXFormScale</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-c1">G</span>){<span class="pl-k">if</span>(<span class="pl-c1">G</span><span class="pl-k">===</span><span class="pl-c1">undefined</span>)<span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">m_xformScale</span><span class="pl-k">=</span><span class="pl-c1">G</span>};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetXFormScale</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">m_xformScale</span>};</td>
      </tr>
      <tr>
        <td id="L442" class="blob-num js-line-number" data-line-number="442"></td>
        <td id="LC442" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">DrawPolygon</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-c1">G</span>,<span class="pl-c1">K</span>,<span class="pl-smi">y</span>){<span class="pl-k">if</span>(<span class="pl-c1">K</span>){<span class="pl-k">var</span> w<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_ctx</span>,<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_drawScale</span>;<span class="pl-smi">w</span>.<span class="pl-en">beginPath</span>();<span class="pl-smi">w</span>.<span class="pl-smi">strokeStyle</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">_color</span>(<span class="pl-smi">y</span>.<span class="pl-c1">color</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_alpha</span>);<span class="pl-smi">w</span>.<span class="pl-c1">moveTo</span>(<span class="pl-c1">G</span>[<span class="pl-c1">0</span>].<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">A</span>,<span class="pl-c1">G</span>[<span class="pl-c1">0</span>].<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">A</span>);<span class="pl-k">for</span>(y<span class="pl-k">=</span><span class="pl-c1">1</span>;y<span class="pl-k">&lt;</span><span class="pl-c1">K</span>;y<span class="pl-k">++</span>)<span class="pl-smi">w</span>.<span class="pl-en">lineTo</span>(<span class="pl-c1">G</span>[y].<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">A</span>,<span class="pl-c1">G</span>[y].<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">A</span>);<span class="pl-smi">w</span>.<span class="pl-en">lineTo</span>(<span class="pl-c1">G</span>[<span class="pl-c1">0</span>].<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">A</span>,<span class="pl-c1">G</span>[<span class="pl-c1">0</span>].<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">A</span>);<span class="pl-smi">w</span>.<span class="pl-en">closePath</span>();<span class="pl-smi">w</span>.<span class="pl-en">stroke</span>()}};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">DrawSolidPolygon</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-c1">G</span>,<span class="pl-c1">K</span>,<span class="pl-smi">y</span>){<span class="pl-k">if</span>(<span class="pl-c1">K</span>){<span class="pl-k">var</span> w<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_ctx</span>,<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_drawScale</span>;<span class="pl-smi">w</span>.<span class="pl-en">beginPath</span>();<span class="pl-smi">w</span>.<span class="pl-smi">strokeStyle</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">_color</span>(<span class="pl-smi">y</span>.<span class="pl-c1">color</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_alpha</span>);<span class="pl-smi">w</span>.<span class="pl-smi">fillStyle</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">_color</span>(<span class="pl-smi">y</span>.<span class="pl-c1">color</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_fillAlpha</span>);<span class="pl-smi">w</span>.<span class="pl-c1">moveTo</span>(<span class="pl-c1">G</span>[<span class="pl-c1">0</span>].<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">A</span>,<span class="pl-c1">G</span>[<span class="pl-c1">0</span>].<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">A</span>);<span class="pl-k">for</span>(y<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L443" class="blob-num js-line-number" data-line-number="443"></td>
        <td id="LC443" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">1</span>;y<span class="pl-k">&lt;</span><span class="pl-c1">K</span>;y<span class="pl-k">++</span>)<span class="pl-smi">w</span>.<span class="pl-en">lineTo</span>(<span class="pl-c1">G</span>[y].<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">A</span>,<span class="pl-c1">G</span>[y].<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">A</span>);<span class="pl-smi">w</span>.<span class="pl-en">lineTo</span>(<span class="pl-c1">G</span>[<span class="pl-c1">0</span>].<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">A</span>,<span class="pl-c1">G</span>[<span class="pl-c1">0</span>].<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">A</span>);<span class="pl-smi">w</span>.<span class="pl-en">closePath</span>();<span class="pl-smi">w</span>.<span class="pl-en">fill</span>();<span class="pl-smi">w</span>.<span class="pl-en">stroke</span>()}};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">DrawCircle</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-c1">G</span>,<span class="pl-c1">K</span>,<span class="pl-smi">y</span>){<span class="pl-k">if</span>(<span class="pl-c1">K</span>){<span class="pl-k">var</span> w<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_ctx</span>,<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_drawScale</span>;<span class="pl-smi">w</span>.<span class="pl-en">beginPath</span>();<span class="pl-smi">w</span>.<span class="pl-smi">strokeStyle</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">_color</span>(<span class="pl-smi">y</span>.<span class="pl-c1">color</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_alpha</span>);<span class="pl-smi">w</span>.<span class="pl-en">arc</span>(<span class="pl-c1">G</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">A</span>,<span class="pl-c1">G</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">A</span>,<span class="pl-c1">K</span><span class="pl-k">*</span><span class="pl-c1">A</span>,<span class="pl-c1">0</span>,<span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">*</span><span class="pl-c1">2</span>,<span class="pl-c1">true</span>);<span class="pl-smi">w</span>.<span class="pl-en">closePath</span>();<span class="pl-smi">w</span>.<span class="pl-en">stroke</span>()}};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">DrawSolidCircle</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-c1">G</span>,<span class="pl-c1">K</span>,<span class="pl-smi">y</span>,<span class="pl-smi">w</span>){<span class="pl-k">if</span>(<span class="pl-c1">K</span>){<span class="pl-k">var</span> <span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_ctx</span>,<span class="pl-c1">U</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_drawScale</span>,p<span class="pl-k">=</span><span class="pl-c1">G</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">U</span>,<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-c1">G</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">U</span>;<span class="pl-c1">A</span>.<span class="pl-c1">moveTo</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-c1">A</span>.<span class="pl-en">beginPath</span>();<span class="pl-c1">A</span>.<span class="pl-smi">strokeStyle</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">_color</span>(<span class="pl-smi">w</span>.<span class="pl-c1">color</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_alpha</span>);<span class="pl-c1">A</span>.<span class="pl-smi">fillStyle</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L444" class="blob-num js-line-number" data-line-number="444"></td>
        <td id="LC444" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-en">_color</span>(<span class="pl-smi">w</span>.<span class="pl-c1">color</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_fillAlpha</span>);<span class="pl-c1">A</span>.<span class="pl-en">arc</span>(p,<span class="pl-c1">B</span>,<span class="pl-c1">K</span><span class="pl-k">*</span><span class="pl-c1">U</span>,<span class="pl-c1">0</span>,<span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">*</span><span class="pl-c1">2</span>,<span class="pl-c1">true</span>);<span class="pl-c1">A</span>.<span class="pl-c1">moveTo</span>(p,<span class="pl-c1">B</span>);<span class="pl-c1">A</span>.<span class="pl-en">lineTo</span>((<span class="pl-c1">G</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">y</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">K</span>)<span class="pl-k">*</span><span class="pl-c1">U</span>,(<span class="pl-c1">G</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-smi">y</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">K</span>)<span class="pl-k">*</span><span class="pl-c1">U</span>);<span class="pl-c1">A</span>.<span class="pl-en">closePath</span>();<span class="pl-c1">A</span>.<span class="pl-en">fill</span>();<span class="pl-c1">A</span>.<span class="pl-en">stroke</span>()}};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">DrawSegment</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-c1">G</span>,<span class="pl-c1">K</span>,<span class="pl-smi">y</span>){<span class="pl-k">var</span> w<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_ctx</span>,<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_drawScale</span>;<span class="pl-smi">w</span>.<span class="pl-smi">strokeStyle</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">_color</span>(<span class="pl-smi">y</span>.<span class="pl-c1">color</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_alpha</span>);<span class="pl-smi">w</span>.<span class="pl-en">beginPath</span>();<span class="pl-smi">w</span>.<span class="pl-c1">moveTo</span>(<span class="pl-c1">G</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">A</span>,<span class="pl-c1">G</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">A</span>);<span class="pl-smi">w</span>.<span class="pl-en">lineTo</span>(<span class="pl-c1">K</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">A</span>,<span class="pl-c1">K</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">A</span>);<span class="pl-smi">w</span>.<span class="pl-en">closePath</span>();<span class="pl-smi">w</span>.<span class="pl-en">stroke</span>()};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">DrawTransform</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-c1">G</span>){<span class="pl-k">var</span> <span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_ctx</span>,y<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m_drawScale</span>;<span class="pl-c1">K</span>.<span class="pl-en">beginPath</span>();<span class="pl-c1">K</span>.<span class="pl-smi">strokeStyle</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">_color</span>(<span class="pl-c1">16711680</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_alpha</span>);</td>
      </tr>
      <tr>
        <td id="L445" class="blob-num js-line-number" data-line-number="445"></td>
        <td id="LC445" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">K</span>.<span class="pl-c1">moveTo</span>(<span class="pl-c1">G</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>y,<span class="pl-c1">G</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>y);<span class="pl-c1">K</span>.<span class="pl-en">lineTo</span>((<span class="pl-c1">G</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_xformScale</span><span class="pl-k">*</span><span class="pl-c1">G</span>.<span class="pl-c1">R</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">x</span>)<span class="pl-k">*</span>y,(<span class="pl-c1">G</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_xformScale</span><span class="pl-k">*</span><span class="pl-c1">G</span>.<span class="pl-c1">R</span>.<span class="pl-smi">col1</span>.<span class="pl-c1">y</span>)<span class="pl-k">*</span>y);<span class="pl-c1">K</span>.<span class="pl-smi">strokeStyle</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">_color</span>(<span class="pl-c1">65280</span>,<span class="pl-c1">this</span>.<span class="pl-smi">m_alpha</span>);<span class="pl-c1">K</span>.<span class="pl-c1">moveTo</span>(<span class="pl-c1">G</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>y,<span class="pl-c1">G</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>y);<span class="pl-c1">K</span>.<span class="pl-en">lineTo</span>((<span class="pl-c1">G</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_xformScale</span><span class="pl-k">*</span><span class="pl-c1">G</span>.<span class="pl-c1">R</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">x</span>)<span class="pl-k">*</span>y,(<span class="pl-c1">G</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">m_xformScale</span><span class="pl-k">*</span><span class="pl-c1">G</span>.<span class="pl-c1">R</span>.<span class="pl-smi">col2</span>.<span class="pl-c1">y</span>)<span class="pl-k">*</span>y);<span class="pl-c1">K</span>.<span class="pl-en">closePath</span>();<span class="pl-c1">K</span>.<span class="pl-en">stroke</span>()}})();<span class="pl-k">var</span> i;<span class="pl-k">for</span>(i<span class="pl-k">=</span><span class="pl-c1">0</span>;i<span class="pl-k">&lt;</span><span class="pl-smi">Box2D</span>.<span class="pl-smi">postDefs</span>.<span class="pl-c1">length</span>;<span class="pl-k">++</span>i)<span class="pl-smi">Box2D</span>.<span class="pl-smi">postDefs</span>[i]();<span class="pl-k">delete</span> <span class="pl-smi">Box2D</span>.<span class="pl-smi">postDefs</span>;</td>
      </tr>
</table>

  <div class="BlobToolbar position-absolute js-file-line-actions dropdown js-menu-container js-select-menu d-none" aria-hidden="true">
    <button class="btn-octicon ml-0 px-2 p-0 bg-white border border-gray-dark rounded-1 dropdown-toggle js-menu-target" id="js-file-line-action-button" type="button" aria-expanded="false" aria-haspopup="true" aria-label="Inline file action toolbar" aria-controls="inline-file-actions">
      <svg aria-hidden="true" class="octicon octicon-kebab-horizontal" height="16" version="1.1" viewBox="0 0 13 16" width="13"><path fill-rule="evenodd" d="M1.5 9a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm5 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm5 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z"/></svg>
    </button>
    <div class="dropdown-menu-content js-menu-content" id="inline-file-actions">
      <ul class="BlobToolbar-dropdown dropdown-menu dropdown-menu-se mt-2">
        <li><a class="js-zeroclipboard dropdown-item" style="cursor:pointer;" id="js-copy-lines" data-original-text="Copy lines">Copy lines</a></li>
        <li><a class="js-zeroclipboard dropdown-item" id= "js-copy-permalink" style="cursor:pointer;" data-original-text="Copy permalink">Copy permalink</a></li>
        <li><a href="/hecht-software/box2dweb/blame/03ff76dac7f9961668011b44c5ae716a30dd0b6f/Box2d.min.js" class="dropdown-item js-update-url-with-hash" id="js-view-git-blame">View git blame</a></li>
          <li><a href="/hecht-software/box2dweb/issues/new" class="dropdown-item" id="js-new-issue">Open new issue</a></li>
      </ul>
    </div>
  </div>

  </div>

  </div>

  <button type="button" data-facebox="#jump-to-line" data-facebox-class="linejump" data-hotkey="l" class="d-none">Jump to Line</button>
  <div id="jump-to-line" style="display:none">
    <!-- '"` --><!-- </textarea></xmp> --></option></form><form accept-charset="UTF-8" action="" class="js-jump-to-line-form" method="get"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /></div>
      <input class="form-control linejump-input js-jump-to-line-field" type="text" placeholder="Jump to line&hellip;" aria-label="Jump to line" autofocus>
      <button type="submit" class="btn">Go</button>
</form>  </div>


  </div>
  <div class="modal-backdrop js-touch-events"></div>
</div>

    </div>
  </div>

  </div>

      
<div class="footer container-lg px-3" role="contentinfo">
  <div class="position-relative d-flex flex-justify-between py-6 mt-6 f6 text-gray border-top border-gray-light ">
    <ul class="list-style-none d-flex flex-wrap ">
      <li class="mr-3">&copy; 2018 <span title="1.30633s from unicorn-2578284678-h5493">GitHub</span>, Inc.</li>
        <li class="mr-3"><a href="https://help.github.com/articles/github-terms-of-service/" data-ga-click="Footer, go to terms, text:terms">Terms</a></li>
        <li class="mr-3"><a href="https://github.com/site/privacy" data-ga-click="Footer, go to privacy, text:privacy">Privacy</a></li>
        <li class="mr-3"><a href="https://help.github.com/articles/github-security/" data-ga-click="Footer, go to security, text:security">Security</a></li>
        <li class="mr-3"><a href="https://status.github.com/" data-ga-click="Footer, go to status, text:status">Status</a></li>
        <li><a href="https://help.github.com" data-ga-click="Footer, go to help, text:help">Help</a></li>
    </ul>

    <a href="https://github.com" aria-label="Homepage" class="footer-octicon" title="GitHub">
      <svg aria-hidden="true" class="octicon octicon-mark-github" height="24" version="1.1" viewBox="0 0 16 16" width="24"><path fill-rule="evenodd" d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z"/></svg>
</a>
    <ul class="list-style-none d-flex flex-wrap ">
        <li class="mr-3"><a href="https://github.com/contact" data-ga-click="Footer, go to contact, text:contact">Contact GitHub</a></li>
      <li class="mr-3"><a href="https://developer.github.com" data-ga-click="Footer, go to api, text:api">API</a></li>
      <li class="mr-3"><a href="https://training.github.com" data-ga-click="Footer, go to training, text:training">Training</a></li>
      <li class="mr-3"><a href="https://shop.github.com" data-ga-click="Footer, go to shop, text:shop">Shop</a></li>
        <li class="mr-3"><a href="https://github.com/blog" data-ga-click="Footer, go to blog, text:blog">Blog</a></li>
        <li><a href="https://github.com/about" data-ga-click="Footer, go to about, text:about">About</a></li>

    </ul>
  </div>
</div>



  <div id="ajax-error-message" class="ajax-error-message flash flash-error">
    <svg aria-hidden="true" class="octicon octicon-alert" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M8.865 1.52c-.18-.31-.51-.5-.87-.5s-.69.19-.87.5L.275 13.5c-.18.31-.18.69 0 1 .19.31.52.5.87.5h13.7c.36 0 .69-.19.86-.5.17-.31.18-.69.01-1L8.865 1.52zM8.995 13h-2v-2h2v2zm0-3h-2V6h2v4z"/></svg>
    <button type="button" class="flash-close js-ajax-error-dismiss" aria-label="Dismiss error">
      <svg aria-hidden="true" class="octicon octicon-x" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M7.48 8l3.75 3.75-1.48 1.48L6 9.48l-3.75 3.75-1.48-1.48L4.52 8 .77 4.25l1.48-1.48L6 6.52l3.75-3.75 1.48 1.48z"/></svg>
    </button>
    You can't perform that action at this time.
  </div>


    
    <script crossorigin="anonymous" integrity="sha512-6oz7cTsS3E5enQjh4gWKU23tC78zIZqVJ1o5zMLCsAv5EEnmNsopwszDz7zx5IGWXU+H+sqeC5pHbt1Yxmh+sw==" src="https://assets-cdn.github.com/assets/frameworks-ea8cfb713b12.js" type="application/javascript"></script>
    
    <script async="async" crossorigin="anonymous" integrity="sha512-SDZ9lEGa8Mdp8eR7sZ32KEvLVzYIOFmzBFoq92+1fYMjll4ec3Krv/NFQpyciI0FxwQcSRE94l1hLLiNmWYFdQ==" src="https://assets-cdn.github.com/assets/github-48367d94419a.js" type="application/javascript"></script>
    
    
    
    
  <div class="js-stale-session-flash stale-session-flash flash flash-warn flash-banner d-none">
    <svg aria-hidden="true" class="octicon octicon-alert" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M8.865 1.52c-.18-.31-.51-.5-.87-.5s-.69.19-.87.5L.275 13.5c-.18.31-.18.69 0 1 .19.31.52.5.87.5h13.7c.36 0 .69-.19.86-.5.17-.31.18-.69.01-1L8.865 1.52zM8.995 13h-2v-2h2v2zm0-3h-2V6h2v4z"/></svg>
    <span class="signed-in-tab-flash">You signed in with another tab or window. <a href="">Reload</a> to refresh your session.</span>
    <span class="signed-out-tab-flash">You signed out in another tab or window. <a href="">Reload</a> to refresh your session.</span>
  </div>
  <div class="facebox" id="facebox" style="display:none;">
  <div class="facebox-popup">
    <div class="facebox-content" role="dialog" aria-labelledby="facebox-header" aria-describedby="facebox-description">
    </div>
    <button type="button" class="facebox-close js-facebox-close" aria-label="Close modal">
      <svg aria-hidden="true" class="octicon octicon-x" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M7.48 8l3.75 3.75-1.48 1.48L6 9.48l-3.75 3.75-1.48-1.48L4.52 8 .77 4.25l1.48-1.48L6 6.52l3.75-3.75 1.48 1.48z"/></svg>
    </button>
  </div>
</div>

  

  </body>
</html>

